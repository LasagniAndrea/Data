using System;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Net.Mime;
using System.Text;
//
using System.Xml.Serialization;
//
using EFS.ACommon;

namespace EFS.Common.EfsSend
{
    //------------------------------------------------------------------------------
    // <auto-generated>
    //     Ce code a été généré par un outil.
    //     Version du runtime :2.0.50727.1433
    //
    //     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
    //     le code est régénéré.
    // </auto-generated>
    //------------------------------------------------------------------------------
       

    // 
    // This source code was auto-generated by xsd, Version=2.0.50727.42.
    //
    // It was modified manually
    //

    #region Enums 
    /// <remarks/>
    public enum EfsSendSMTPPriorityEnum
    {
        /// <remarks/>
        Normal,

        /// <remarks/>
        High,

        /// <remarks/>
        Low,
    }
    /// <remarks/>
    public enum EfsSendSMTPDeliveryNotificationEnum
    {
        /// <remarks/>
        None,

        /// <remarks/>
        OnSuccess,

        /// <remarks/>
        OnFailure,

        /// <remarks/>
        Delay,

        /// <remarks/>
        Never,
    }
    #endregion
    //
    #region class EfsSendSMTP
    /// <summary>
    /// 
    /// </summary>
    /// FI 20210111 [XXXXX] refactoring for apply using expression 
    [XmlRoot(ElementName = "SendSmtp", IsNullable = true)]
    public class EfsSendSMTP
    {
        #region Members
        private EfsSendSMTPClient efsSmtpClient;
        private EfsSendSMTPMessage efsMailMessage;
        //
        private string smtpServerUser;
        private string smtpServerUserPwd;

        // FI 20210111 [XXXXX] Mise en commentaire
        //private MailMessage m_NetMailMessage;
        private int m_CountAttachments;
        #endregion
        #region Accessors 
        /// <remarks/>
        [XmlElementAttribute("SmtpClient", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public EfsSendSMTPClient SmtpClient
        {
            get { return this.efsSmtpClient; }
            set { this.efsSmtpClient = value; }
        }

        /// <remarks/>
        [XmlElementAttribute("MailMessage", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public EfsSendSMTPMessage MailMessage
        {
            get { return this.efsMailMessage; }
            set { this.efsMailMessage = value; }
        }
        [XmlIgnore]
        public string SmtpServerUser
        {
            get { return this.smtpServerUser; }
            set { this.smtpServerUser = value; }
        }
        [XmlIgnore]
        public string SmtpServerUserPwd
        {
            get { return this.smtpServerUserPwd; }
            set { this.smtpServerUserPwd = value; }
        }

        //public MailMessage NetMailMessage
        //{
        //    get {return m_NetMailMessage ;}
        //}
        public int CountAttachement
        {
            get { return m_CountAttachments; }
        }
        #endregion
        //
        #region constructor
        public EfsSendSMTP() : this(null) { }
        public EfsSendSMTP(string pHost) : this(pHost, 25) { }
        public EfsSendSMTP(string pHost, int pPort) : this(pHost, pPort, null, null) { }
        public EfsSendSMTP(string pHost, int pPort, string pSmtpUser, string pSmtpUserPwd)
        {
            SmtpServerUser = pSmtpUser;
            SmtpServerUserPwd = pSmtpUserPwd;

            efsSmtpClient = new EfsSendSMTPClient(pHost, pPort);
            efsMailMessage = new EfsSendSMTPMessage();
        }
        #endregion constructor
        //
        #region Methods
        #region SendEmail
        public Cst.ErrLevel SendEmail()
        {
            Cst.ErrLevel lRet = Cst.ErrLevel.SUCCESS;
            // FI 20210111 [XXXXX] using expression
            using (MailMessage mailMessage = new MailMessage())
            {

                //Auteur
                mailMessage.From = new MailAddress(efsMailMessage.From.MailAddress, efsMailMessage.From.DisplayName);
                //Destinataire principal
                efsMailMessage.SetToMailAddressCollection(mailMessage.To);
                //Autres destinataires
                efsMailMessage.SetCcMailAddressCollection(mailMessage.CC);
                //Autres destinataires cachés
                efsMailMessage.SetBccMailAddressCollection(mailMessage.Bcc);
                //Sujet
                mailMessage.SubjectEncoding = StrFunc.GetEncoding(efsMailMessage.Subject.encoding);
                mailMessage.Subject = mailMessage.SubjectEncoding.GetString(mailMessage.SubjectEncoding.GetBytes(efsMailMessage.Subject.Value));

                //Corps du message
                mailMessage.BodyEncoding = StrFunc.GetEncoding(efsMailMessage.Body.encoding);
                mailMessage.Body = mailMessage.BodyEncoding.GetString(mailMessage.BodyEncoding.GetBytes(efsMailMessage.Body.Value));

                mailMessage.DeliveryNotificationOptions = (DeliveryNotificationOptions)Enum.Parse(typeof(DeliveryNotificationOptions), efsMailMessage.DeliveryNotificationOptions.ToString(), true);
                //
                mailMessage.Priority = (MailPriority)Enum.Parse(typeof(MailPriority), efsMailMessage.Priority.ToString(), true);
                mailMessage.IsBodyHtml = (efsMailMessage.Body.format == EfsSendFormatEnum.Html);
                //
                efsMailMessage.SetAttachmentCollection(mailMessage.Attachments);
                m_CountAttachments = ArrFunc.Count(mailMessage.Attachments);


                //Send the message.
                // FI 20210111 [XXXXX] using expression
                using (SmtpClient smtpClient = new SmtpClient(efsSmtpClient.Host, efsSmtpClient.Port))
                {
                    // FI 20211119 [XXXXX] Gestion de EnableSsl
                    if (efsSmtpClient.EnableSsl)
                    {
                        smtpClient.EnableSsl = true;
                        smtpClient.DeliveryMethod = SmtpDeliveryMethod.Network;
                        smtpClient.UseDefaultCredentials = false;
                        smtpClient.Credentials = new NetworkCredential(SmtpServerUser, SmtpServerUserPwd);
                    }
                    else if (StrFunc.IsFilled(SmtpServerUser))
                    {
                        CredentialCache myCache = new CredentialCache
                        {
                            { efsSmtpClient.Host, efsSmtpClient.Port, "Basic", new NetworkCredential(SmtpServerUser, SmtpServerUserPwd) },
                            { efsSmtpClient.Host, efsSmtpClient.Port, "NTLM", new NetworkCredential(SmtpServerUser, SmtpServerUserPwd) },
                            { efsSmtpClient.Host, efsSmtpClient.Port, "Digest", new NetworkCredential(SmtpServerUser, SmtpServerUserPwd) }
                        };

                        smtpClient.Credentials = myCache;
                    }
                    smtpClient.Send(mailMessage);
                }
            }

            return lRet;
        }
        #endregion SendEmail
        #endregion
    }
    #endregion
    #region class EfsSendSMTPClient
    /// <remarks/>
    public class EfsSendSMTPClient
    {
        #region Members 
        [XmlIgnore]
        private string host;
        [XmlIgnore]
        private int port;
        /// <summary>
        /// 
        /// </summary>
        /// FI 20211119 [XXXX] Add
        [XmlIgnore]
        private Boolean enableSsl;
        #endregion
        #region Accessors 
        /// <remarks/>
        [XmlElementAttribute("Host", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Host 
        {
            get {
                return this.host;
            }
            set {
                this.host = value;
            }
        }
        
        /// <remarks/>
        [XmlElementAttribute("Port", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Port
        {
            get {
                return this.port;
            }
            set {
                this.port = value;
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// FI 20211119 [XXXX] Add
        [XmlElementAttribute("EnableSsl ", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Boolean EnableSsl
        {
            get
            {
                return this.enableSsl;
            }
            set
            {
                this.enableSsl = value;
            }
        }
        #endregion
        //
        #region constructor
        public EfsSendSMTPClient() : this(null, 25) { }
        public EfsSendSMTPClient(string pHots, int pPort)
        {
            host = pHots;
            port = pPort;
            if (port == 587 || port == 465)
            {
                //Secure(TLS): 587
                //Secure(SSL): 465
                enableSsl = true;
            }
        }
        #endregion
    }
    #endregion
    #region class EfsSendSMTPMessage
    /// <remarks/>
    public class EfsSendSMTPMessage
    {
        #region Members 
        private EfsSendSMTPContact from;
        private EfsSendSMTPContact[] to;
        private EfsSendSMTPContact[] cc;
        private EfsSendSMTPContact[] bcc;
        private EfsSendSMTPPriorityEnum priority;
        private EfsSendSMTPDeliveryNotificationEnum deliveryNotificationOptions;
        private EfsSendSubject subject;
        private EfsSendBody body;
        private EfsSendStream[] attachment;
        #endregion
        #region Accessors 
        /// <remarks/>
        [XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public EfsSendSMTPContact From
        {
            get {
                return this.from;
            }
            set {
                this.from = value;
            }
        }
        
        /// <remarks/>
        [XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public EfsSendSMTPContact[] To
        {
            get {
                return this.to;
            }
            set {
                this.to = value;
            }
        }
        
        /// <remarks/>
        [XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public EfsSendSMTPContact[] Cc
        {
            get {
                return this.cc;
            }
            set {
                this.cc = value;
            }
        }
        
        /// <remarks/>
        [XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public EfsSendSMTPContact[] Bcc
        {
            get {
                return this.bcc;
            }
            set {
                this.bcc = value;
            }
        }
        
        /// <remarks/>
        [XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public EfsSendSMTPPriorityEnum Priority
        {
            get {
                return this.priority;
            }
            set {
                this.priority = value;
            }
        }
        
        /// <remarks/>
        [XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public EfsSendSMTPDeliveryNotificationEnum DeliveryNotificationOptions
        {
            get {
                return this.deliveryNotificationOptions;
            }
            set {
                this.deliveryNotificationOptions = value;
            }
        }
        
        /// <remarks/>
        [XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public EfsSendSubject Subject
        {
            get {
                return this.subject;
            }
            set {
                this.subject = value;
            }
        }
        
        /// <remarks/>
        [XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public EfsSendBody Body
        {
            get {
                return this.body;
            }
            set {
                this.body = value;
            }
        }
        
        /// <remarks/>
        [XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public EfsSendStream[] Attachment
        {
            get {
                return this.attachment;
            }
            set {
                this.attachment = value;
            }
        }
        #endregion
        //
        #region constructor
		public EfsSendSMTPMessage()
        {
            priority = EfsSendSMTPPriorityEnum.Normal;
            deliveryNotificationOptions = EfsSendSMTPDeliveryNotificationEnum.None;
            //
            subject = new EfsSendSubject();
            body = new EfsSendBody();
		}
        #endregion constructor
        //
        #region Methods 
        #region SetAttachmentCollection 
        public void SetAttachmentCollection(AttachmentCollection pAttachCollection)
        {
            if (ArrFunc.IsFilled(this.Attachment))
            {
                for (int i = 0; i < this.Attachment.Length; i++)
                {
                    string fileToAttach = this.Attachment[i].Value;
                    //
                    if (StrFunc.IsFilled(fileToAttach))
                    {
                        try
                        {
                            fileToAttach = fileToAttach.Trim();
                            // Create  the file attachment for this e-mail message.
                            ContentType contentType = new ContentType(this.Attachment[i].contenttype);
                            Attachment data = new Attachment(fileToAttach, contentType);
                            // Add time stamp information for the file.
                            ContentDisposition disposition = data.ContentDisposition;
                            disposition.CreationDate = File.GetCreationTime(fileToAttach);
                            disposition.ModificationDate = File.GetLastWriteTime(fileToAttach);
                            disposition.ReadDate = File.GetLastAccessTime(fileToAttach);

                            // Add the file attachment to this e-mail message.
                            pAttachCollection.Add(data);
                        }
                        catch (Exception ex)
                        {
                            throw new Exception(
         @"Error to set Attached document (" + fileToAttach + @")", ex);
                        }
                    }
                }
            }

        }
        #endregion AddAttachment
        #region SetMailAddressCollection 
        public static void SetMailAddressCollection(MailAddressCollection pMailAddressCollection, EfsSendSMTPContact[] pEfsMailContact)
        {
                if (ArrFunc.IsFilled(pEfsMailContact))
                {
                    for (int i = 0; i < pEfsMailContact.Length; i++)
                    {
                        if (StrFunc.IsFilled(pEfsMailContact[i].MailAddress))
                            pMailAddressCollection.Add(new MailAddress(pEfsMailContact[i].MailAddress, pEfsMailContact[i].DisplayName));
                    }
                }
            
        }
        #endregion SetMailAddressCollection
        #region SetToMailAddressCollection 
        public void SetToMailAddressCollection(MailAddressCollection pMailAddressCollection)
        {
            SetMailAddressCollection(pMailAddressCollection, to);
        }
        #endregion SetToMailAddressCollection
        #region SetCcMailAddressCollection 
        public void SetCcMailAddressCollection(MailAddressCollection pMailAddressCollection)
        {
            SetMailAddressCollection(pMailAddressCollection, cc);
        }
        #endregion SetCcMailAddressCollection
        #region SetBccMailAddressCollection 
        public void SetBccMailAddressCollection(MailAddressCollection pMailAddressCollection)
        {
            SetMailAddressCollection(pMailAddressCollection, bcc);
        }
        #endregion SetBccMailAddressCollection
        #endregion
    }
    #endregion
    #region class EfsSendSMTPContact
    /// <remarks/>
    public class EfsSendSMTPContact
    {
        #region Members 
        private string displayName;
        private string mailAddress;
        #endregion
        #region Accessors 
        /// <remarks/>
        [XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DisplayName
        {
            get {
                return this.displayName;
            }
            set {
                this.displayName = value;
            }
        }
        
        /// <remarks/>
        [XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string MailAddress
        {
            get {
                return this.mailAddress;
            }
            set {
                this.mailAddress = value;
            }
        }
        #endregion
        //
        #region Constructor
        public EfsSendSMTPContact() : this(string.Empty) { }
        public EfsSendSMTPContact(string pMailAddress) : this(string.Empty, pMailAddress) { }
        public EfsSendSMTPContact(string pDisplayName, string pMailAddress)
        {
            displayName = pDisplayName;
            mailAddress = pMailAddress;
        }
        #endregion
    }
    #endregion
}
