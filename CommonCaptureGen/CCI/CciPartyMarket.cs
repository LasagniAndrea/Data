#region Using Directives
using EFS.ACommon;
using EFS.Common;
using EFS.GUI.CCI;
using EfsML.Business;
using FixML.Interface;
using FpML.Interface;
using System;
using System.Collections.Generic;
using System.Linq;
using Tz = EFS.TimeZone;
#endregion Using Directives

namespace EFS.TradeInformation
{
    /// <summary>
    ///  CciParty : Party qui contient un marché
    /// </summary>
    /// FI 20200504 [XXXXX] suppression implementation de IContainerCci
    public class CciMarketParty : CciPartyBase,  IContainerCciFactory, IContainerCciSpecified
    {
        /// <summary>
        /// Représente les ccis gérés
        /// </summary>
        public enum CciEnum
        {
            /// <summary>
            /// cci qui stocke un identifiant de marché 
            /// </summary>
            /// FI 20200116 [25141] Add CciColumnValue Attribute
            [CciColumnValue(Column = "SHORT_ACRONYM", IOColumn = "FIXML_SecurityExchange")]
            identifier,
            /// <summary>
            /// Date d'éxécution
            /// </summary>
            [CciGroup(name = "MarketTimeZone")]
            executionDateTime,
            /// <summary>
            /// When an order was first generated, as recorded for the first time when it was first entered by a person or generated by a trading algorithm (i.e., the first record of the order).
            /// </summary>
            [CciGroup(name = "MarketTimeZone")]
            orderEntered,
            // EG 20171031 [23509] New
            [System.Xml.Serialization.XmlEnumAttribute("tradeHeader.clearedDate")]
            clearedDate,
            // EG 20240227 [WI855] Trade input : New data TVTIC (Trading Venue Transaction Identification Code)
            tvtic,
            // EG 20240227 [WI858] Trade input : New data TRDID (Market Transaction ID)
            trdId,
        }


        /// <summary>
        /// Retourne l'attribut id attribué à l'élément Party
        /// </summary>
        /// <param name="pIsGetNewValueWhenDataNoValid">
        /// <para>Uniquement lorsque la donnée du cci (newValue) est non valide</para>
        /// <para>Si true, retoune la donnée du cci (newValue)</para>
        /// <para>Si false, retoune string.Empty</para>
        /// </param>
        /// <returns></returns>
        /// FI 20170928 [23452] Modify
        public override string GetPartyId(bool pIsGetNewValueWhenDataNoValid)
        {

            string ret = string.Empty;

            CustomCaptureInfo cci = Cci(CciEnum.identifier);
            if (null == cci)
                throw new NullReferenceException("cci identifier not found");

            // FI 20170928 [23452] Appel de la méthode Cci
            if (null != cci.Sql_Table)
                ret = ((SQL_Market)Cci(CciEnum.identifier).Sql_Table).XmlId;
            else if (pIsGetNewValueWhenDataNoValid && StrFunc.IsFilled(cci.NewValue))
                ret = cci.NewValue;

            return ret;
        }

        #region Constructors
        /// <summary>
        /// Construteur
        /// </summary>
        public CciMarketParty(CciTradeCommonBase pTrade, int pNumber, string pPrefixParent) :
            base(pTrade, pNumber, pPrefixParent + "market")
        {
        }
        #endregion Constructors

        

        #region IContainerCciFactory
        /// <summary>
        /// 
        /// </summary>
        // EG 20171113 Initialisation Plateforme par defaut
        // EG 20171128 [23509] Set LastValue
        public void Initialize_Document()
        {
            IParty party = cciTrade.DataDocument.GetPartyFacility();
            if ((null == party) && (Ccis.CaptureMode == Cst.Capture.ModeEnum.New))
            {
                if (Ccis.TradeCommonInput.IsDefaultSpecified(CommonInput.DefaultEnum.facility))
                {
                    string defaultFacility = Ccis.TradeCommonInput.GetDefault(CommonInput.DefaultEnum.facility) as string;

                    if (StrFunc.IsFilled(defaultFacility))
                    {

                        // FI 20200116 [25141] Appel CciTools.GetColumn pour obtenir la colonne qui alimente le cci
                        SQL_TableWithID.IDType IDTypeSearch = CciTools.ParseColumn(CciTools.GetColumn<CciEnum>(CciEnum.identifier, CcisBase.IsModeIO));

                        //DumpMarket_ToDocument(Cci(CciEnum.identifier), defaultFacility);
                        CciTools.IsMarketValid(cciTrade.CSCacheOn, defaultFacility, IDTypeSearch,
                                out SQL_Market sql_Market, out _, out bool isFound, CcisBase.User, CcisBase.SessionId);
                        if (isFound)
                        {
                            party = cciTrade.DataDocument.AddParty(sql_Market.XmlId);
                            party.PartyIds[0].Scheme = Cst.Market_Iso10383Scheme;
                            Tools.SetParty(party, sql_Market);
                            // Ajout d'un PartyTradeInformation
                            PartyTradeInformation();
                            cciTrade.DataDocument.SetRelatedMarketVenue();
                            // EG 20171128 [23509]
                            Cci(CciEnum.identifier).LastValue = ".";
                            Cci(CciEnum.identifier).LastSql_Table = sql_Market;
                        }
                    }
                }
            }
        }

        public void Initialize_FromCci()
        {
        }

        public void AddCciSystem()
        {
        }
        /*  FI 20200421 [XXXXX] Mise en commentaire
        /// FI 20140204 [19564] Gestion UTI
        /// EG 20171016 [23509] Upd
        /// EG 20171031 [23509] New
        public void Dump_ToDocument()
        {

            //string partyReferenceHref;
            Type tCciEnum = typeof(CciEnum);
            foreach (string enumName in Enum.GetNames(tCciEnum))
            {
                CustomCaptureInfo cci = ccis[prefix + enumName];
                if ((cci != null) && (cci.HasChanged))
                {
                    string data = cci.NewValue;
                    bool isSetting = true;
                    CustomCaptureInfosBase.ProcessQueueEnum processQueue = CustomCaptureInfosBase.ProcessQueueEnum.None;
                    CciEnum keyEnum = (CciEnum)System.Enum.Parse(typeof(CciEnum), enumName);
                    switch (keyEnum)
                    {
                        case CciEnum.identifier:
                            DumpMarket_ToDocument(cci, data);
                            processQueue = CustomCaptureInfosBase.ProcessQueueEnum.High;
                            break;
                        case CciEnum.executionDateTime:
                            DumpExecutionDateTime_ToDocument(data);
                            processQueue = CustomCaptureInfosBase.ProcessQueueEnum.High;
                            break;
                        case CciEnum.orderEntered:
                            DumpOrderEntered_ToDocument(data);
                            processQueue = CustomCaptureInfosBase.ProcessQueueEnum.High;
                            break;
                        case CciEnum.clearedDate:
                            DumpClearedDate_ToDocument(data);
                            processQueue = CustomCaptureInfosBase.ProcessQueueEnum.High;
                            break;
                        default:
                            isSetting = false;
                            break;
                    }

                    if (isSetting)
                        ccis.Finalize(cci.ClientId_WithoutPrefix, processQueue);
                }
            }
        }
        */

        /// FI 20140204 [19564] Gestion UTI
        /// EG 20141020 [20442]
        /// EG 20171016 [23509] Upd FIXML_SecurityExchange, SynchronizeTimeZone
        // EG 20171031 [23509] New
        // EG 20171128 [23509] Upd
        // EG 20240227 [WI855] Trade input : New data TVTIC (Trading Venue Transaction Identification Code)
        // EG 20240227 [WI858] Trade input : New data TRDID (Market Transaction ID)
        public void Initialize_FromDocument()
        {
            Type tCciEnum = typeof(CciEnum);
            foreach (string enumName in Enum.GetNames(tCciEnum))
            {
                CustomCaptureInfo cci = CcisBase[Prefix + enumName];
                if (cci != null)
                {
                    #region Reset variables
                    IPartyTradeInformation partyTradeInformation = GetPartyTradeInformation();
                    IPartyTradeIdentifier partyTradeIdentifier = GetPartyTradeIdentifier();
                    SQL_Table sql_Table = null;
                    string partyId = string.Empty;
                    string data = string.Empty;
                    bool isSetting = true;
                    #endregion Reset variables
                    //
                    CciEnum keyEnum = (CciEnum)System.Enum.Parse(typeof(CciEnum), enumName);
                    switch (keyEnum)
                    {
                        case CciEnum.identifier:
                            IParty party = null;
                            IParty[] partyMarket = (from item in this.cciTrade.DataDocument.Party.Where(x => DataDocumentContainer.IsPartyFacility(x))
                                                    select item).ToArray();

                            if (ArrFunc.IsFilled(partyMarket) && number <= partyMarket.Count())
                                party = partyMarket[number - 1];

                            if ((null != party) && (party.OTCmlId != 0))
                            {
                                SQL_Market sql_Market = new SQL_Market(cciTrade.CSCacheOn, party.OTCmlId)
                                {
                                    IsUseView = true
                                };
                                if (sql_Market.IsLoaded)
                                {
                                    // FI 20200116 [25141] Utilisation de CciTools.GetColumn pour obtenir la colonne qui alimente le cci
                                    data = (sql_Market.GetFirstRowColumnValue(CciTools.GetColumn<CciEnum>(CciEnum.identifier, CcisBase.IsModeIO))) as string;
                                    sql_Table = (SQL_Table)sql_Market;
                                }
                                else
                                {
                                    data = party.PartyId;
                                }
                            }
                            break;

                        case CciEnum.executionDateTime:
                            if ((null != partyTradeInformation) && (partyTradeInformation.ExecutionDateTimeSpecified))
                            {
                                data = partyTradeInformation.ExecutionDateTime.Value;
                                SynchronizeTimeZone();
                            }
                            break;
                        case CciEnum.orderEntered:
                            if ((null != partyTradeInformation) && (partyTradeInformation.TimestampsSpecified && partyTradeInformation.Timestamps.OrderEnteredSpecified))
                            {
                                data = partyTradeInformation.Timestamps.OrderEntered;
                                SynchronizeTimeZone();
                            }
                            break;

                        case CciEnum.clearedDate:
                            if (cciTrade.DataDocument.TradeHeader.ClearedDateSpecified)
                                data = cciTrade.DataDocument.TradeHeader.ClearedDate.Value;
                            break;

                        case CciEnum.tvtic:
                            if (null != partyTradeIdentifier)
                            {
                                IScheme scheme = partyTradeIdentifier.GetTradeIdFromScheme(Cst.Spheres_TradeIdTvticScheme);
                                if (scheme != null)
                                    data = scheme.Value;
                            }
                            break;
                        case CciEnum.trdId:
                            if (null != partyTradeIdentifier)
                            {
                                IScheme scheme = partyTradeIdentifier.GetTradeIdFromScheme(Cst.Spheres_TradeIdMarketTransactionIdScheme);
                                if (scheme != null)
                                    data = scheme.Value;
                            }
                            break;
                        default:
                            #region default
                            isSetting = false;
                            #endregion default
                            break;
                    }
                    if (isSetting)
                    {
                        CcisBase.InitializeCci(cci, sql_Table, data);
                    }
                }
            }
        }

        public bool IsClientId_PayerOrReceiver(CustomCaptureInfo pCci)
        {
            return false;
        }

        /// <summary>
        /// Initialization others data following modification
        /// </summary>
        /// <param name="pProcessQueue"></param>
        /// <param name="pCci"></param>
        // EG 20171025 [23509] SynchronizeClearedDate (temporaire : à revoir)
        // EG 20171031 [23509] Upd
        public void ProcessInitialize(CustomCaptureInfo pCci)
        {
            if (this.IsCciOfContainer(pCci.ClientId_WithoutPrefix))
            {
                string cliendid_Key = CciContainerKey(pCci.ClientId_WithoutPrefix);
                if (System.Enum.IsDefined(typeof(CciEnum), cliendid_Key))
                {
                    CciEnum key = (CciEnum)System.Enum.Parse(typeof(CciEnum), cliendid_Key);
                    switch (key)
                    {
                        case CciEnum.identifier:
                            SynchronizeTimeZone();
                            cciTrade.cciProduct.InitializeDates(pCci);
                            break;
                        case CciEnum.executionDateTime:
                        case CciEnum.orderEntered:
                            cciTrade.cciProduct.InitializeDates(pCci);
                            break;
                        default:
                            break;
                    }
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pCci"></param>
        public void ProcessExecute(CustomCaptureInfo pCci)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pCci"></param>
        public void ProcessExecuteAfterSynchronize(CustomCaptureInfo pCci)
        {

        }

        /// <summary>
        /// Do not delete
        /// </summary>
        public new void CleanUp()
        {
        }



        /// <summary>
        /// 
        /// </summary>
        public void RefreshCciEnabled()
        { }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pCci"></param>
        public void SetDisplay(CustomCaptureInfo pCci)
        {
            if (IsCci(CciEnum.identifier, pCci) && (null != pCci.Sql_Table))
                pCci.Display = pCci.Sql_Table.FirstRow["DISPLAYNAME"].ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// FI 20140204 [19564] Gestion UTI
        /// EG 20171016 [23509] Upd
        /// EG 20171031 [23509] New
        /// FI 20200421 [XXXXX] Usage de ccis.ClientId_DumpToDocument
        // EG 20240227 [WI855] Trade input : New data TVTIC (Trading Venue Transaction Identification Code)
        // EG 20240227 [WI858] Trade input : New data TRDID (Market Transaction ID)
        public void Dump_ToDocument()
        {
            foreach (string clientId in CcisBase.ClientId_DumpToDocument.Where(x => IsCciOfContainer(x)))
            {
                string cliendId_Key = CciContainerKey(clientId);
                if (Enum.IsDefined(typeof(CciEnum), cliendId_Key))
                {
                    CustomCaptureInfo cci = CcisBase[clientId];
                    CciEnum cciEnum = (CciEnum)System.Enum.Parse(typeof(CciEnum), cliendId_Key);

                    #region Reset variables
                    string data = cci.NewValue;
                    bool isSetting = true;
                    CustomCaptureInfosBase.ProcessQueueEnum processQueue = CustomCaptureInfosBase.ProcessQueueEnum.None;
                    #endregion Reset variables

                    switch (cciEnum)
                    {
                        case CciEnum.identifier:
                            DumpMarket_ToDocument(cci, data);
                            processQueue = CustomCaptureInfosBase.ProcessQueueEnum.High;
                            break;
                        case CciEnum.executionDateTime:
                            DumpExecutionDateTime_ToDocument(data);
                            processQueue = CustomCaptureInfosBase.ProcessQueueEnum.High;
                            break;
                        case CciEnum.orderEntered:
                            DumpOrderEntered_ToDocument(data);
                            processQueue = CustomCaptureInfosBase.ProcessQueueEnum.High;
                            break;
                        case CciEnum.clearedDate:
                            DumpClearedDate_ToDocument(data);
                            processQueue = CustomCaptureInfosBase.ProcessQueueEnum.High;
                            break;
                        case CciEnum.tvtic:
                            DumpTvtic_ToDocument(data);
                            processQueue = CustomCaptureInfosBase.ProcessQueueEnum.High;
                            break;
                        case CciEnum.trdId:
                            DumpTrdId_ToDocument(data);
                            processQueue = CustomCaptureInfosBase.ProcessQueueEnum.High;
                            break;
                        default:
                            isSetting = false;
                            break;
                    }

                    if (isSetting)
                        CcisBase.Finalize(cci.ClientId_WithoutPrefix, processQueue);

                }
            }
        }
        #endregion

        #region IContainerCciSpecified Members
        /// <summary>
        /// Obtient true si sql_Table du cci actor est renseigné
        /// </summary>
        public bool IsSpecified
        {
            get
            {
                CustomCaptureInfo cci = Cci(CciEnum.identifier);
                return (null != cci) && (null != cci.Sql_Table);
            }
        }
        #endregion IContainerCciSpecified Members

        #region DumpSpecific_ToGUI
        /// <summary>
        /// 
        /// </summary>
        /// <param name="pPage"></param>
        public void DumpSpecific_ToGUI(CciPageBase pPage)
        {
            CustomCaptureInfo cci = Cci(CciEnum.identifier);
            if (null != cci)
            {
                pPage.SetMarketCountryImage(cci);
                pPage.SetOpenFormReferential(cci, Cst.OTCml_TBL.MARKET);
            }
        }
        #endregion DumpSpecific_ToGUI

        #region DumpExecutionDateTime_ToDocument
        /// <summary>
        /// Dump a ExecutionDateTime into DataDocument
        /// </summary>
        /// <param name="pCci"></param>
        /// <param name="pData"></param>
        // EG 20170822 [23342] New
        // EG 20171016 [23509] Upd
        // EG 20171025 [23509] Upd set tradeDate in TimeZone
        // EG 20220523 [XXXXX] Corrections diverses liées à la saisie OTC - OMIGRADE
        private void DumpExecutionDateTime_ToDocument(string pData)
        {
            IPartyTradeInformation partyTradeInformation = PartyTradeInformation();
            if (null != partyTradeInformation)
            {
                //PL 20180618 Compatibility FpML.v42 (où executionDateTime n'existe pas)
                if (null != partyTradeInformation.ExecutionDateTime)
                {
                    if (Tz.Tools.IsDateFilled(pData))
                    {
                        partyTradeInformation.ExecutionDateTime.Value = pData;
                        partyTradeInformation.ExecutionDateTime.Scheme = "http://www.iana.org/time-zones";
                        partyTradeInformation.ExecutionDateTimeSpecified = true;
                        // la TRADEDATE = Date de DTEXECUTION dans le time zone de la plateforme (avec application du CutOff)
                        Nullable<DateTimeOffset> dtExecutionInTimeZone = Tz.Tools.FromTimeZone(partyTradeInformation.ExecutionDateTimeOffset.Value, GetTimeZoneValue());
                        Nullable<DateTime> dtTrade = cciTrade.cciProduct.ApplyCutOff(dtExecutionInTimeZone);
                        if (dtTrade.HasValue && (dtTrade.Value!= DateTime.MinValue))
                            cciTrade.DataDocument.TradeHeader.TradeDate.Value = DtFunc.DateTimeToStringDateISO(dtTrade.Value.Date);
                        else
                            cciTrade.DataDocument.TradeHeader.TradeDate.Value = DtFunc.DateTimeToStringDateISO(new DtFunc().StringToDateTime(pData, DtFunc.FmtTZISOLongDateTime));
                    }
                    // EG 20240531 [WI926] DTORDERENTERD|DTEXECUTION are made optional if the trade is a TEMPLATE
                    else if (StrFunc.IsFilled(pData) && cciTrade.TradeCommonInput.TradeStatus.IsStEnvironment_Template)
                    {
                        partyTradeInformation.ExecutionDateTime.Value = pData;
                        partyTradeInformation.ExecutionDateTimeSpecified = true;
                    }
                    else
                    {
                        partyTradeInformation.ExecutionDateTime.Value = string.Empty;
                        partyTradeInformation.ExecutionDateTime.Scheme = string.Empty;
                        partyTradeInformation.ExecutionDateTimeSpecified = false;
                        cciTrade.DataDocument.TradeHeader.TradeDate.Value = string.Empty;
                    }
                }
                else
                {
                    if (Tz.Tools.IsDateFilled(pData))
                        cciTrade.DataDocument.TradeHeader.TradeDate.Value = DtFunc.DateTimeToStringDateISO(new DtFunc().StringToDateTime(pData, DtFunc.FmtTZISOLongDateTime));
                    else
                        cciTrade.DataDocument.TradeHeader.TradeDate.Value = string.Empty;
                }
            }
        }
        #endregion DumpExecutionDateTime_ToDocument
        #region DumpMarket_ToDocument
        /// <summary>
        /// Dump a party into DataDocument
        /// </summary>
        /// <param name="pCci">cci qui contient un identifier de marché</param>
        /// <param name="pData">l'identifier saisi pour le marché</param>
        // EG 20171016 [23509] Upd
        // EG 20171025 [23509] Add DumpOrderEntered_ToDocument
        // EG 20171031 [23509] Upd
        // EG 20171113 [23509] Upd
        private void DumpMarket_ToDocument(CustomCaptureInfo pCci, string pData)
        {
            SQL_Market sql_Market = null;
            bool isLoaded = false;
            bool isFound = false;

            if (StrFunc.IsFilled(pData))
            {
                // FI 20200116 [25141] Appel CciTools.GetColumn pour obtenir la colonne qui alimente le cci
                SQL_TableWithID.IDType IDTypeSearch = CciTools.ParseColumn(CciTools.GetColumn<CciEnum>(CciEnum.identifier, CcisBase.IsModeIO));
                CciTools.IsMarketValid(cciTrade.CSCacheOn, pData, IDTypeSearch, out sql_Market, out isLoaded, out isFound, CcisBase.User, CcisBase.SessionId);
            }

            string party_id = (isFound ? sql_Market.XmlId : XMLTools.GetXmlId(pCci.NewValue));

            //Remove Last Market from Parties
            string lastParty_id = (null != pCci.LastSql_Table) ? ((SQL_Market)pCci.LastSql_Table).XmlId : XMLTools.GetXmlId(pCci.LastValue);
            if (StrFunc.IsFilled(lastParty_id))
                cciTrade.DataDocument.RemoveParty(lastParty_id);

            //Add Party
            IParty party = null;
            if (StrFunc.IsFilled(pData))
            {
                party = cciTrade.DataDocument.AddParty(party_id);
                party.PartyIds[0].Scheme = Cst.Market_Iso10383Scheme;
            }

            if (isFound)
            {
                #region Party is found in Database
                // FI 20200115 [25141] Utilisation de CciTools.GetColumn pour obtenir la colonne qui alimente le cci 
                pCci.NewValue = (sql_Market.GetFirstRowColumnValue(CciTools.GetColumn<CciEnum>(CciEnum.identifier, CcisBase.IsModeIO))) as string;
                pCci.Sql_Table = sql_Market;
                pCci.ErrorMsg = string.Empty;
                if (!sql_Market.IsEnabled)
                    pCci.ErrorMsg = CciTools.BuildCciErrMsg(Ressource.GetString("Msg_MarketDisabled"), pCci.NewValue);
                Tools.SetParty(party, sql_Market);

                // Ajout d'un PartyTradeInformation
                PartyTradeInformation();

                cciTrade.DataDocument.SetRelatedMarketVenue();
                if (StrFunc.IsFilled(lastParty_id))
                {
                    // Dump pour ne pas perdre les saisies après suppression/Création de PartyTradeInformation pour la plateforme
                    DumpOrderEntered_ToDocument(Cci(CciEnum.orderEntered).NewValue);
                    DumpExecutionDateTime_ToDocument(Cci(CciEnum.executionDateTime).NewValue);
                }
                else
                {
                    if (StrFunc.IsFilled(Cci(CciEnum.orderEntered).NewValue))
                        DumpOrderEntered_ToDocument(Cci(CciEnum.orderEntered).NewValue);
                    if (StrFunc.IsFilled(Cci(CciEnum.executionDateTime).NewValue))
                        DumpExecutionDateTime_ToDocument(Cci(CciEnum.executionDateTime).NewValue);
                }
                // FI 20200116 [25141] default alimenté avec pCci.NewValue
                Ccis.TradeCommonInput.SetDefault(CommonInput.DefaultEnum.facility, pCci.NewValue);
                #endregion Party is found in Database
            }
            else
            {
                #region Market is NOT found in Database
                pCci.ErrorMsg = string.Empty;
                pCci.Sql_Table = null;

                if (pCci.IsFilled)
                {
                    if (isLoaded)
                        pCci.ErrorMsg = CciTools.BuildCciErrMsg(Ressource.GetString("Msg_MarketNotUnique"), pCci.NewValue);
                    else
                        pCci.ErrorMsg = CciTools.BuildCciErrMsg(Ressource.GetString("Msg_MarketNotFound"), pCci.NewValue);
                }

                if (null != party)
                {
                    party.Id = party_id;
                    party.OTCmlId = 0;
                    party.PartyId = pData;
                    party.PartyName = string.Empty;
                }

                #endregion Market is NOT found in Database
            }
        }
        #endregion DumpMarket_ToDocument
        #region DumpOrderEntered_ToDocument
        /// <summary>
        /// Dump a orderEntered into DataDocument
        /// </summary>
        /// <param name="pData"></param>
        // EG 20171031 [23509] New
        private void DumpOrderEntered_ToDocument(string pData)
        {
            IPartyTradeInformation partyTradeInformation = PartyTradeInformation();
            if (null != partyTradeInformation)
            {
                //PL 20180618 Compatibility FpML.v42 (où timestamps.orderEntered n'existe pas)
                if (null != partyTradeInformation.Timestamps)
                {
                    if (Tz.Tools.IsDateFilled(pData))
                    {
                        partyTradeInformation.Timestamps.OrderEntered = pData;
                        partyTradeInformation.Timestamps.OrderEnteredSpecified = true;
                        partyTradeInformation.TimestampsSpecified = true;
                    }
                    else
                    {
                        partyTradeInformation.Timestamps.OrderEntered = string.Empty;
                        partyTradeInformation.Timestamps.OrderEnteredSpecified = false;
                    }
                    partyTradeInformation.TimestampsSpecified = partyTradeInformation.Timestamps.OrderEnteredSpecified;
                }
            }
        }
        #endregion DumpOrderEntered_ToDocument
        #region DumpClearedDate_ToDocument
        /// <summary>
        /// Dump a clearedDate into DataDocument
        /// </summary>
        /// <param name="pData"></param>
        // EG 20171031 [23509] New
        private void DumpClearedDate_ToDocument(string pData)
        {
            cciTrade.DataDocument.TradeHeader.ClearedDate.Value = pData;
            cciTrade.DataDocument.TradeHeader.ClearedDateSpecified = StrFunc.IsFilled(pData);
            // FI 20240307 [WI862] Mise en commentaire (déjà effectué via l'appel à ProductContainerBase.SynchronizeFromDataDocument)
            //cciTrade.cciProduct.DumpBizDt_ToDocument(pData);
        }
        #endregion DumpClearedDate_ToDocument
        /// <summary>
        /// Alimentation du TVTIC (Trading Venue Transaction Identification Code)
        /// Si renseigné
        /// - dans PartyTradeIdentifier de la Venue
        /// - dans TradeCaptureReport.RegulatoryTradeIDGrp (si ExchangeTraded)
        /// Si non renseigné
        /// - suppression dans les deux collections PartyTradeIdentifier et TradeCaptureReport.RegulatoryTradeIDGrp
        /// </summary>
        /// <param name="pValue">TVTIC</param>
        // EG 20240227 [WI855] Trade input : New data TVTIC (Trading Venue Transaction Identification Code)
        private void DumpTvtic_ToDocument(string pValue)
        {
            cciTrade.DataDocument.SetTvtic(pValue);
        }
        /// <summary>
        /// Alimentation du TRDID (Market Transaction ID)
        /// Si renseigné
        /// - dans PartyTradeIdentifier du marché (s'il existe)
        /// - dans TradeCaptureReport.TrdId (si ExchangeTraded)
        /// Si non renseigné
        /// - suppression dans PartyTradeIdentifier et TradeCaptureReport.TrdId
        /// </summary>
        /// <param name="pValue">TVTIC</param>
        // EG 20240227 [WI858] Trade input : New data TRDID (Market Transaction ID)
        private void DumpTrdId_ToDocument(string pValue)
        {
            cciTrade.DataDocument.SetTrdId(cciTrade.CS, pValue);
        }

        #region GetTimeZoneValue
        /// <summary>
        /// Retourne le timezone.
        /// </summary>
        /// <returns></returns>
        // EG 20171113 [23509] New
        public string GetTimeZoneValue()
        {
            string timezone = string.Empty;
            CustomCaptureInfo cciExecutionDateTime = Cci(CciEnum.executionDateTime);

            // 1. Recherche du Timezone associé à la date d'exécution
            if (null != cciExecutionDateTime)
            {
                CustomCaptureInfo cciZone = CcisBase[cciExecutionDateTime.ClientIdZone, false];
                if ((null != cciZone) && StrFunc.IsFilled(cciZone.NewValue))
                    timezone = cciZone.NewValue;
            }
            // 2. Recherche du Timezone associé à la plateforme puis à l'entité et Universal timezone si non trouvé
            if (StrFunc.IsEmpty(timezone))
            {
                timezone = cciTrade.DataDocument.GetTradeTimeZone(cciTrade.CSCacheOn, CcisBase.User.Entity_IdA, Tz.Tools.UniversalTimeZone);
            }
            return timezone;
        }
        #endregion GetTimeZoneValue

        #region SynchronizeTimeZone
        /// <summary>
        /// Synchronisation des timezones (sur tous les enum avec [CciGroup(name = "MarketTimeZone")])
        /// </summary>
        /// EG 20170922 [22374] Alimentation de la timeZone avec celle de la party référencée
        /// FI 20180208 [23776] Modify
        private void SynchronizeTimeZone()
        {
            // FI 20180208 [23776] Le code de cette fonction est non appropriée lors de l'imporation des trades puisqu'il n'existe pas de cci TMZ, ni de cci TMS
            // Dans l'import tous les ccis commencent par IMP
            // => Avant la mis en place du if, dès le chargement d'un trade (en modification) On se retrouvait avec un timezone dans le cci IMPtradeHeader_market1_executionDateTime à la place d'une date
            if (false == CcisBase.IsModeIO)
            {
                CustomCaptureInfo cciMarket = Cci(CciEnum.identifier);
                bool isMarketValid = cciMarket.IsFilledValue && (cciMarket.Sql_Table is SQL_Market);
                if (isMarketValid)
                {
                    string timeZone = cciTrade.DataDocument.GetTradeTimeZone(cciTrade.CSCacheOn, CcisBase.User.Entity_IdA);
                    IEnumerable<CciMarketParty.CciEnum> cci = CciTools.GetCciEnum<CciMarketParty.CciEnum>("MarketTimeZone");
                    foreach (CciMarketParty.CciEnum item in cci)
                    {
                        string clientIdZone = Cci(item).ClientId.Replace(Cst.TMS, Cst.TMZ);
                        CustomCaptureInfo cciZone = CcisBase[clientIdZone, false];
                        if (cciZone.NewValue != timeZone)
                            CcisBase.SetNewValue(cciZone.ClientId, false, timeZone, false);
                    }
                }
            }
        }
        #endregion SynchronizeTimeZone

    }
}
