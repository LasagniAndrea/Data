//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// Ce code source a été automatiquement généré par xsd, Version=1.1.4322.573. 
// Ce code source a été ensuite enrichi manuellement 
// 
using System;
using System.Configuration;
using System.Xml;
using System.Xml.Serialization;
using System.Data;
using System.Collections;
using System.Collections.Generic;
using System.Linq; 
using System.Text.RegularExpressions; 
using System.Threading.Tasks;

using EFS.ACommon;
using EFS.ApplicationBlocks.Data;

using EFS.Restriction;
 
using EFS.Common;
using EFS.Common.Web;
using EfsML.DynamicData;
using EFS.Common.Log;

namespace EFS.Referential
{
    /// <summary>
    ///  Indique la source d'un DynamicData
    /// </summary>
    /// FI 20200205 [XXXXX] Add
    [Flags]
    public enum DynamicDataSourceEnum
    {
        /// <summary>
        /// Dynamic Data généré à partir d'un paramètre GUI
        /// </summary>
        GUI = 1,
        /// <summary>
        /// Dynamic Data généré à partir d'une URL HTTP
        /// </summary>
        URL = 2,
        /// <summary>
        /// Dynamic Data généré en runtime par Spheres
        /// </summary>
        RUNTIME = 4
    }
    
    
    /// <summary>
    /// 
    /// </summary>
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public class Referentials
    {
        [System.Xml.Serialization.XmlElementAttribute("Referential", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferential[] Items;
        //
        /// <summary>
        /// 
        /// </summary>
        /// <param name="_tableName"></param>
        /// <returns></returns>
        public ReferentialsReferential this[string _tableName]
        {
            get
            {
                if (Items.Length == 1)
                    return Items[0];
                for (int i = 0; i < Items.Length; i++)
                {
                    if (Items[i].TableName == _tableName)
                        return Items[i];
                }
                return null;
            }
        }
    }

    /// <summary>
    /// 
    /// </summary>
    /// EG 20110906 Add SQLCheckSelectedDefaultValueSpecified/SQLCheckSelectedDefaultValue
    /// EG 20111013 Add isLoupe & isLoupeSpecified
    // EG 20200720 [XXXXX] Nouvelle interface GUI v10 (Mode Noir ou blanc)
    // EG 20210505 [25700] FreezeGrid implementation 
    public class ReferentialsReferential
    {

        private enum LinkedTableEnum
        {
            ATTACHEDDOC,
            NOTEPAD
        }

        /// <summary>
        /// Retourne true s'il existe au minimum 1 colonne telle que DataType.datakindSpecified = true
        /// </summary>
        /// FI 20171025 [23533] Add
        public Boolean HasDatakind
        {
            get
            {
                Boolean ret = false;
                if (ArrFunc.Count(Column) > 0)
                {
                    ret = (Column.Where(x => x.DataType.datakindSpecified).Count() > 0);
                }
                return ret;
            }
        }



        public ReferentialsReferential()
        {
            this.Notepad = new ReferentialsReferentialBooleanEltAndTablenameAttrib();
            this.AttachedDoc = new ReferentialsReferentialBooleanEltAndTablenameAttrib();
        }

        #region Members
        // EG 20210505 [25700] FreezeGrid implementation 
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool freezeColumnSpecified;
        /// <summary>
        /// Indicateur de compatibilité 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("freezeColumn", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string freezeColumn;

        //PL 20120611 Add CmptLevel/CmptLevelSpecified
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CmptLevelSpecified;
        /// <summary>
        /// Indicateur de compatibilité 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("CmptLevel", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CmptLevel;

        //PL 20120621 Add Button/ButtonSpecified
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ButtonSpecified;
        [System.Xml.Serialization.XmlElementAttribute("Button", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialButton[] Button;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsUseSQLParametersSpecified;

        /// <summary>
        /// Indicateur pour usage de paramètres SQL ds les requêtes 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("IsUseSQLParameters", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsUseSQLParameters;

        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("customObject", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CustomObject[] customObject;

        /// <summary>
        /// Table principale
        /// <para>Table surlaquelle sont appliqués les mis à jour</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TableName;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AliasTableNameSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string AliasTableName;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RoleTableNameSpecified;
        [System.Xml.Serialization.XmlElementAttribute("RoleTableName", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialItemTableName RoleTableName;

        // RD 20161121 [22619] Add ExtlIDTableName
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExtlIDTableNameSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ExtlIDTableName;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ItemsSpecified;
        [System.Xml.Serialization.XmlElementAttribute("Items", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialItems Items;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HideExtlIdSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool HideExtlId;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Ressource;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TargetNameSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TargetName;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ColumnByRowSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int ColumnByRow;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreateSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Create;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModifySpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Modify;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RemoveSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Remove;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DuplicateSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Duplicate;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ImportSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Import;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExportSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Export;
        //
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Image;
        //
        [System.Xml.Serialization.XmlElementAttribute("Column", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumn[] Column;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ToolBarSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ToolBar;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TableName_PSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool TableName_P;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseStatisticSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool UseStatistic;
        //
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string HelpUrl;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HelpUrlSpecified;
        //
        [System.Xml.Serialization.XmlElementAttribute("Logo", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialLogo Logo;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LogoSpecified;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NotepadSpecified;
        [System.Xml.Serialization.XmlElementAttribute("Notepad", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        //public bool Notepad;
        public ReferentialsReferentialBooleanEltAndTablenameAttrib Notepad;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AttachedDocSpecified;
        [System.Xml.Serialization.XmlElementAttribute("AttachedDoc", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        //public bool AttachedDoc;
        public ReferentialsReferentialBooleanEltAndTablenameAttrib AttachedDoc;
        //
        // EG 20111013 Utilisation de Flag pour forcer la gestion ou non de la loupe
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isLoupeSpecified;
        [System.Xml.Serialization.XmlElementAttribute("IsLoupe", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool isLoupe;
        // EG 20111013 Utilisation de Flag pour forcer la gestion ou non du doubleclick
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isDblClickSpecified;
        [System.Xml.Serialization.XmlElementAttribute("IsDblClick", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool isDblClick;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLSelectSpecified;
        /// <summary>
        /// Représente la commande Select exécutée pour charger les données ds le grid
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("SQLSelect", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialSQLSelect[] SQLSelect;

        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLSelectResourceSpecified;
        /// <summary>
        /// Définie la resource qui permet d'obtenir SQLSelect 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("SQLSelectResource", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialSQLSelectResource SQLSelectResource;

        /// <summary>
        /// Représente le script Select qui charge les données (lorsque SQLSelect est renseigné)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string SQLSelectCommand;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLPreSelectSpecified;
        /// <summary>
        /// Représente les scripts SQL exécutables avant le chargement des données
        /// <para>Plusieurs scripts sont présents (exemple: un script pour Oracle et un script pour SqlServer)</para>
        /// <para>exemple: création d'une table temporaire</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("SQLPreSelect", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialSQLSelect[] SQLPreSelect;

        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLPreSelectResourceSpecified;
        /// <summary>
        /// Définie la resource qui permet d'obtenir SQLPreSelectResource 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("SQLPreSelectResource", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialSQLSelectResource SQLPreSelectResource;

        /// <summary>
        /// Représente les scripts retenus qui seront exécutés avant le chargement des données
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string[] SQLPreSelectCommand;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLWhereSpecified;
        [System.Xml.Serialization.XmlElementAttribute("SQLWhere", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialSQLWhere[] SQLWhere;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLOrderBySpecified;
        [System.Xml.Serialization.XmlElementAttribute("SQLOrderBy", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialSQLOrderBy[] SQLOrderBy;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLGroupBySpecified;
        [System.Xml.Serialization.XmlElementAttribute("SQLGroupBy", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] SQLGroupBy;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLJoinSpecified;
        [System.Xml.Serialization.XmlElementAttribute("SQLJoin", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] SQLJoin;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLRowStyleSpecified;
        [System.Xml.Serialization.XmlElementAttribute("SQLRowStyle", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialSQLRowStyle SQLRowStyle;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLRowStateSpecified;
        [System.Xml.Serialization.XmlElementAttribute("SQLRowState", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialSQLRowState SQLRowState;
        //
        // EG 20110906
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLCheckSelectedDefaultValueSpecified;
        [System.Xml.Serialization.XmlElementAttribute("SQLCheckSelectedDefaultValue", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool SQLCheckSelectedDefaultValue;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool XSLFileNameSpecified;
        [System.Xml.Serialization.XmlElementAttribute("XSLFileName", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialXSLFileName[] XSLFileName;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LoadOnStartSpecified;
        [System.Xml.Serialization.XmlElementAttribute("LoadOnStart", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LoadOnStart;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RefreshIntervalSpecified;
        [System.Xml.Serialization.XmlElementAttribute("RefreshInterval", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int RefreshInterval;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RequestTrackSpecified;
        /// <summary>
        /// Pilote la journalisation des actions utilisateurs
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("RequestTrack", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialRequestTrack RequestTrack;
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JQuerySpecified;

        /// <summary>
        /// Obtient ou définit l'existence de code JQuery associé
        /// </summary>
        /// FI 20210218 [XXXXX] Add
        [System.Xml.Serialization.XmlElementAttribute("JQuery", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialJQuery[] JQuery;

        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasMultiTable;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasLstWhereClause; // = false;

        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsDataKeyField_String; // = false;        
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasColumnsWithStyle; // = false;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasAggregateColumns; // = false;        
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasEditableColumns;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasDynamicResource;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasLengthInDatagrid;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasDataTRIM;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasDataLightDisplay;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string IdLstConsult; //FDA/PL 20181115
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsConsultation;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsForm;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsGrid;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Cst.ConsultationMode consultationMode;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string ValueForeignKeyField
        {
            get;
            set;
        }
        /// <summary>
        ///  
        /// </summary>
        /// FI 20201215 [XXXXX] Add
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string ColumnForeignKeyField
        {
            get
            {
                string ret = null;
                if (ExistsColumnForeignKeyField)
                {
                    ret = Column[IndexForeignKeyField].ColumnName;
                    //20090611 PL Add AliasColumnName (utile pour DEBTSECURITY)
                    if (Column[IndexForeignKeyField].AliasTableNameSpecified)
                        ret = Column[IndexForeignKeyField].AliasTableName + "." + ret;
                }
                return ret;
            }
        }



        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string firstVisibleAndEnabledControlID;

        /// <summary>
        /// Liste des arguments
        /// </summary>
        /// FI 20200205 [XXXXX] private set et usage de ReferentialsReferentialStringDynamicData
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Dictionary<string, ReferentialsReferentialStringDynamicData> dynamicArgs
        {
            get;
            private set;
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dynamicArgsSpecified;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public DataSet dataSet;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public DataRow dataRow;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public DataRow[] drExternal;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool[] isNewDrExternal;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isNewRecord;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isLookReadOnly;
        //	
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isValidDataOnly;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isUnValidDataOnly;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isDailyUpdDataOnly;
        //	
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isDailyNewDataOnly;
        // EG [XXXXX][WI437] Nouvelles options de filtrage des données sur les référentiels
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isDailyUserUpdDataOnly;
        // EG [XXXXX][WI437] Nouvelles options de filtrage des données sur les référentiels
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isDailyUserNewDataOnly;
        //Variables pour la gestion des linked controls
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int NbControlLinked; // = 0;
        //
        private int m_IndexColSQL_DataKeyField, m_IndexDataKeyField, m_IndexKeyField, m_IndexColSQL_KeyField;
        private int m_IndexColSQL_ForeignKeyField, m_IndexForeignKeyField, m_ColumnPosition_ForeignKeyField;
        private int m_IndexColSQL_DISPLAYNAME, m_IndexColSQL_DESCRIPTION;
        // RD 20161121 [22619] Add m_IndexEXTLID
        private int m_IndexColSQL_EXTLLINK, m_IndexColSQL_EXTLLINK2, m_IndexColSQL_EXTLATTRB, m_IndexEXTLLINK, m_IndexEXTLLINK2, m_IndexEXTLID, m_IndexEXTLATTRB;
        private int m_IndexColSQL_IDENTITY, m_IndexColSQL_IDENTITYWithSource, m_IndexIDENTITY;
        private int m_IndexColSQL_DTENABLED, m_IndexColSQL_DTDISABLED, m_IndexDTENABLED, m_IndexDTDISABLED;
        private int m_IndexColSQL_DTUPD, m_IndexColSQL_IDAUPD, m_IndexColSQL_DTINS, m_IndexColSQL_IDAINS;
        //PL 20161124 - RATP 4Eyes - MakingChecking
        private int m_IndexColSQL_DTCHK, m_IndexColSQL_IDACHK, m_IndexColSQL_IDCHK, m_IndexColSQL_ISCHK;
        private int m_IndexColSQL_ROWATTRIBUT, m_IndexColSQL_DTHOLIDAYVALUE;
        // RD 20110704 [17501]
        // Utilisation d'un Index à la place du nom, pour avoir accéder aux caractèristique de coloration (alColumnCellStyle)        
        private int m_IndexColSQL_ISSIDE;
        // EG 20120608 Add Timeout (en seconde)
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeoutSpecified;
        /// <summary>
        /// SQL timeOut
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Timeout", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Timeout;



        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ScriptTimeoutSpecified;
        /// <summary>
        /// Permet l'augmentation par programmation de la durée limite d'exécution de la page 
        /// </summary>
        /// FI 20190910 [24914] Add
        [System.Xml.Serialization.XmlElementAttribute("ScriptTimeout", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int ScriptTimeout;



        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsUseCCSpecified;
        /// <summary>
        /// Indicateur pour activer ou non l'interprétation des mots clé %%CC:
        /// <para>Flag mis en place juste avant livraison de la 4.1 de manière à pouvoir débrayer l'interprétation en cas de dysfonctionnement</para>
        /// </summary>
        /// FI 20140626 [20142]  add property
        [System.Xml.Serialization.XmlElementAttribute("IsUseCC", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsUseCC;
        #endregion Members

        #region indexor
        public ReferentialsReferentialColumn this[string _columnName]
        {
            get
            {
                for (int i = 0; i < Column.Length; i++)
                {
                    if (Column[i].ColumnName == _columnName)
                        return Column[i];
                }
                return null;
            }
        }
        //20090305 PL New
        public ReferentialsReferentialColumn this[string _columnName, string _aliasTableName]
        {
            get
            {
                if (_aliasTableName == null)
                {
                    return this[_columnName];
                }
                else
                {
                    //PL 20120924 Add TrimEnd
                    _aliasTableName = _aliasTableName.TrimEnd(' ');
                    for (int i = 0; i < Column.Length; i++)
                    {
                        if ((null != Column[i])
                            && (Column[i].ColumnName == _columnName)
                            && (Column[i].AliasTableNameSpecified && (Column[i].AliasTableName == _aliasTableName)))
                            return Column[i];
                    }
                }
                return null;
            }
        }
        //20070607 PL New
        public ReferentialsReferentialColumn this[int _columnPositionInDataGrid]
        {
            get
            {
                for (int i = 0; i < Column.Length; i++)
                {
                    if (Column[i].ColumnPositionInDataGridSpecified && (Column[i].ColumnPositionInDataGrid == _columnPositionInDataGrid))
                        return Column[i];
                }
                return Column[_columnPositionInDataGrid];
            }
        }
        //20090224 PL New
        public ReferentialsReferentialColumn this[int _index, string property]
        {
            get
            {
                switch (property)
                {
                    case "ExternalFieldID":
                        for (int i = 0; i < Column.Length; i++)
                        {
                            if (Column[i].IsAdditionalData && (Column[i].ExternalFieldID == _index))
                                return Column[i];
                        }
                        break;
                }
                return null;
            }
        }
        #endregion indexor

        #region properties
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsLightDisplayAvailable
        {
            get
            {
                return (true);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        // EG 20240207 [WI825] Logs: Harmonization data of consultation (VW_ATTACHEDDOC_TRACKER_L)
        public bool IsTableAttachedDoc
        {
            get
            {
                return (TableName.Contains(Cst.OTCml_TBL.ATTACHEDDOC.ToString()));
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// FI 20171025 [23533] Modify
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsDataGridWithTemplateColumn
        {
            /* 
            Utilisation d'une TemplateColumn ou d'une BoundColumn
                TemplateColumn: Colonne dont on veux personnaliser le contenu
                        ex: isGridInputMode ou existance d'une colonne dont on veux traduire le contenu
                
             * BoundColumn: Colonne dont on n'a pas besoin de personnaliser le contenu
            */
            get
            {
                return (this.HasDynamicResource
                        || this.HasDataTRIM
                        || this.HasLengthInDatagrid
                        || this.ExistsColumnISSIDE
                        || this.HasColumnsWithStyle
                        || this.HasAggregateColumns
                        || this.HasEditableColumns
                        || this.HasDatakind // FI 20171025 [23533] add Si true signifie que la donnée est formattée selon le profil (Exemple date avec timezone, ou encore Echéance formatée)
                        );
            }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnDataKeyField
        {
            get { return (m_IndexColSQL_DataKeyField >= 0); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnKeyField
        {
            get { return (m_IndexColSQL_KeyField >= 0); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnForeignKeyField
        {
            get { return (m_IndexColSQL_ForeignKeyField >= 0); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnDISPLAYNAME
        {
            get { return (m_IndexColSQL_DISPLAYNAME >= 0); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnDESCRIPTION
        {
            get { return (m_IndexColSQL_DESCRIPTION >= 0); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnEXTL
        {
            get { return (ExistsColumnEXTLLINK || ExistsColumnEXTLLINK2 || ExistsColumnEXTLATTRB); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnEXTLLINK
        {
            get { return (m_IndexColSQL_EXTLLINK >= 0); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnEXTLLINK2
        {
            get { return (m_IndexColSQL_EXTLLINK2 >= 0); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnEXTLATTRB
        {
            get { return (m_IndexColSQL_EXTLATTRB >= 0); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnIDENTITY
        {
            get { return (m_IndexColSQL_IDENTITY >= 0); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnIDENTITYWithSource
        {
            get { return (m_IndexColSQL_IDENTITYWithSource >= 0); }
        }
        /// <summary>
        /// Obtient true s'il existe les colonnes DTENABLED et DTDISABLED
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnsDateValidity
        {
            get { return (m_IndexColSQL_DTENABLED >= 0) && (m_IndexColSQL_DTDISABLED >= 0); }
        }
        //PL 20161124 - RATP 4Eyes - MakingChecking        
        /// <summary>
        /// Obtient true s'il existe une colonne ISCHK
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsMakingChecking
        {
            get { return (m_IndexColSQL_ISCHK >= 0); }
        }

        /// <summary>
        /// Obtient true s'il existe les colonnes ROWATTRIBUT
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnROWATTRIBUT
        {
            get { return (m_IndexColSQL_ROWATTRIBUT >= 0); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnISSIDE
        {
            get { return (m_IndexColSQL_ISSIDE >= 0); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnsUPD
        {
            get { return (m_IndexColSQL_DTUPD >= 0) && (m_IndexColSQL_IDAUPD >= 0); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnsINS
        {
            get { return (m_IndexColSQL_DTINS >= 0) && (m_IndexColSQL_IDAINS >= 0); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsColumnDTHOLIDAYVALUE
        {
            get { return (m_IndexColSQL_DTHOLIDAYVALUE >= 0); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_DataKeyField
        {
            get { return m_IndexColSQL_DataKeyField; }
        }
        /// <summary>
        /// Obtient l'index de position de la colonnes dite "DataKeyField"
        /// <para>Obtient -1 si aucune colonne DataKeyField </para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexDataKeyField
        {
            get { return m_IndexDataKeyField; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexKeyField
        {
            get { return m_IndexKeyField; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_KeyField
        {
            get { return m_IndexColSQL_KeyField; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_ForeignKeyField
        {
            get { return m_IndexColSQL_ForeignKeyField; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexForeignKeyField
        {
            get { return m_IndexForeignKeyField; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int ColumnPosition_ForeignKeyField
        {
            get { return m_ColumnPosition_ForeignKeyField; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_DISPLAYNAME
        {
            get { return m_IndexColSQL_DISPLAYNAME; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_DESCRIPTION
        {
            get { return m_IndexColSQL_DESCRIPTION; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_EXTLLINK
        {
            get { return m_IndexColSQL_EXTLLINK; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_EXTLLINK2
        {
            get { return m_IndexColSQL_EXTLLINK2; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_EXTLATTRB
        {
            get { return m_IndexColSQL_EXTLATTRB; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_IDENTITY
        {
            get { return m_IndexColSQL_IDENTITY; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_DTENABLED
        {
            get { return m_IndexColSQL_DTENABLED; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_DTDISABLED
        {
            get { return m_IndexColSQL_DTDISABLED; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexEXTLLINK
        {
            get { return m_IndexEXTLLINK; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexEXTLLINK2
        {
            get { return m_IndexEXTLLINK2; }
        }
        /// <summary>
        /// Obtient l'index de position de la colonnes dite "EXTLID"
        /// <para>Obtient l'index de position de la colonnes dite "DataKeyField" si aucune colonne "EXTLID"</para>
        /// </summary>
        // RD 20161121 [22619] Add IndexEXTLID
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexEXTLID
        {
            get { return (m_IndexEXTLID > -1 ? m_IndexEXTLID : m_IndexDataKeyField); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexEXTLATTRB
        {
            get { return m_IndexEXTLATTRB; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexIDENTITY
        {
            get { return m_IndexIDENTITY; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexDTENABLED
        {
            get { return m_IndexDTENABLED; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexDTDISABLED
        {
            get { return m_IndexDTDISABLED; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_ROWATTRIBUT
        {
            get { return m_IndexColSQL_ROWATTRIBUT; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_ISSIDE
        {
            get { return m_IndexColSQL_ISSIDE; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_DTUPD
        {
            get { return m_IndexColSQL_DTUPD; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_IDAUPD
        {
            get { return m_IndexColSQL_IDAUPD; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_DTINS
        {
            get { return m_IndexColSQL_DTINS; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_IDAINS
        {
            get { return m_IndexColSQL_IDAINS; }
        }
        //PL 20161124 - RATP 4Eyes - MakingChecking
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_DTCHK
        {
            get { return m_IndexColSQL_DTCHK; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_IDACHK
        {
            get { return m_IndexColSQL_IDACHK; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_IDCHK
        {
            get { return m_IndexColSQL_IDCHK; }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL_ISCHK
        {
            get { return m_IndexColSQL_ISCHK; }
        }
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsROWVERSIONDataKeyField
        {
            get { return ((this.IndexDataKeyField != -1) && (this.Column[this.IndexDataKeyField].ColumnName == Cst.OTCml_COL.ROWVERSION.ToString())); }
        }

        /// <summary>
        /// Représente l'instance de la classe DynamicDataArgs (classe générée en runtime dont le contenu est fonction des dynamicArgs)
        /// </summary>
        /// FI 20201201 [XXXXX] Add
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Object DynamicDataArgsInstance
        {
            private set;
            get;
        }


        #endregion

        #region Methods

        /// <summary>
        /// Retourne l'index de la colonne {pColumnName}
        /// <para>Retourne -1 si la colonne n'existe pas</para>
        /// </summary>
        /// <param name="pColumnName"></param>
        /// <returns></returns>
        /// 20091110 EG Test nullable
        /// FI 20171025 [23533] Modify
        public int GetIndexColSQL(string pColumnName)
        {

            // FI 20171025 [23533]  instruction link
            //for (int i = 0; i < Column.Length; i++)
            //{
            //    if (Column[i].ColumnName == pColumnName)
            //        return Column[i].IndexColSQL;
            //}

            ReferentialsReferentialColumn col = Column.Where(x => x.ColumnName == pColumnName).FirstOrDefault();
            if (null != col)
                return col.IndexColSQL;



            // FI 20171025 [23533] instruction link et usage de la propriété RelationColumnSQLName
            //Ex a1_Identifier
            //int pos = pColumnName.IndexOf("_");
            //if (pos > 0)
            //{
            //    string[] aliasNameColumnName = pColumnName.Split("_".ToCharArray());
            //    string aliasName = aliasNameColumnName[0];
            //    string columnName = aliasNameColumnName[1];
            //    for (int i = 0; i < Column.Length; i++)
            //    {
            //        if ((null != Column[i].Relation) && (null != Column[i].Relation[0]))
            //        {
            //            ReferentialsReferentialColumnRelation relation = Column[i].Relation[0];
            //            if (ArrFunc.IsFilled(relation.ColumnSelect) && (null != relation.ColumnSelect[0]))
            //            {
            //                if ((relation.ColumnSelect[0].ColumnName == columnName) && (relation.AliasTableName == aliasName))
            //                    return Column[i].IndexColSQL + 1;
            //            }
            //        }
            //    }
            //}
            // FI 20240130 [WI832] Usage de ToUpper()
            int pos = pColumnName.IndexOf("_");
            if (pos > 0)
            {
                col = Column.Where(x => ArrFunc.IsFilled(x.Relation) &&
                                           (null != x.Relation[0]) &&
                                           (x.Relation[0].RelationColumnSQLName.ToUpper() == pColumnName.ToUpper())).FirstOrDefault();

                if (null != col)
                    return col.IndexColSQL + 1;
            }

            //for (int i = 0; i < Column.Length; i++)
            //{
            //    if (Column[i].DataField.ToUpper() == pColumnName.ToUpper())
            //        return Column[i].IndexColSQL;
            //}

            // FI 20171025 [23533] Instruction link
            col = Column.Where(x => x.DataField.ToUpper() == pColumnName.ToUpper()).FirstOrDefault();
            if (null != col)
                return col.IndexColSQL;


            return -1;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pColumnName"></param>
        /// <returns></returns>
        /// 20091110 EG Test nullable
        public int GetIndexDataGrid(string pColumnName)
        {
            for (int i = 0; i < Column.Length; i++)
            {
                if (Column[i].ColumnName == pColumnName)
                    return i;
            }
            //Ex a1_Identifier
            int pos = pColumnName.IndexOf("_");
            if (pos > 0)
            {
                // EG 20130619 L'alias tout comme la colonne peut comporter plusieurs UNDERSCORE
                //string[] aliasNameColumnName = pColumnName.Split("_".ToCharArray());
                //string aliasName = aliasNameColumnName[0];
                //string columnName = aliasNameColumnName[1];
                //for (int i = 0; i < Column.Length; i++)
                //{
                //    if ((null != Column[i].Relation) && (null != Column[i].Relation[0]))
                //    {
                //        ReferentialsReferentialColumnRelation relation = Column[i].Relation[0];
                //        if (ArrFunc.IsFilled(relation.ColumnSelect) && (null != relation.ColumnSelect[0]))
                //        {
                //            if ((relation.ColumnSelect[0].ColumnName == columnName) && (relation.AliasTableName == aliasName))
                //                return i;
                //        }
                //    }
                //}
                string[] aliasNameColumnName = pColumnName.Split("_".ToCharArray(), 2, StringSplitOptions.RemoveEmptyEntries);
                string previousAliasName = string.Empty;
                while (2 == aliasNameColumnName.Length)
                {
                    string aliasName = previousAliasName + aliasNameColumnName[0];
                    string columnName = aliasNameColumnName[1];
                    for (int i = 0; i < Column.Length; i++)
                    {
                        if ((null != Column[i].Relation) && (null != Column[i].Relation[0]))
                        {
                            ReferentialsReferentialColumnRelation relation = Column[i].Relation[0];
                            if (ArrFunc.IsFilled(relation.ColumnSelect) && (null != relation.ColumnSelect[0]))
                            {
                                if ((relation.ColumnSelect[0].ColumnName == columnName) && (relation.AliasTableName == aliasName))
                                    return i;
                            }
                        }
                        else if (Column[i].ColumnNameOrColumnSQLSelectSpecified)
                        {
                            if (Column[i].ColumnNameOrColumnSQLSelect.ToUpper() == (aliasName + "." + columnName).ToUpper())
                                return i;
                        }
                    }
                    previousAliasName += aliasNameColumnName[0] + "_";
                    aliasNameColumnName = aliasNameColumnName[1].Split("_".ToCharArray(), 2, StringSplitOptions.RemoveEmptyEntries);
                }
            }
            return -1;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pColumnName"></param>
        /// <returns></returns>
        public int GetIndexCol(string pColumnName)
        {
            for (int i = 0; i < Column.Length; i++)
            {
                if (Column[i].ColumnName == pColumnName)
                    return i;
            }
            return -1;
        }

        #region public InitializeNewRow
        public void InitializeNewRow(ref DataRow opNewRow)
        {
            InitializeNewRow(ref opNewRow, null);
        }
        public void InitializeNewRow(ref DataRow opNewRow, DataRow pPreviousDataRow)
        {
            bool previousDataRowSpecified = (pPreviousDataRow != null);

            for (int index = 0; index < this.Column.Length; index++)
            {
                ReferentialsReferentialColumn rrc = this.Column[index];
                if (rrc.IsAdditionalData)
                {
                    //if external data : no creation until ID is affected                    
                }
                else
                {
                    Object oDefaultValue = null;
                    if (rrc.IsForeignKeyField)
                        oDefaultValue = this.ValueForeignKeyField;
                    else if (rrc.IsMandatory && rrc.ExistsDDLType)
                        oDefaultValue = SystemSettings.GetAppSettings("Spheres_ReferentialDefault_" + rrc.Relation[0].DDLType.Value);

                    //Automatic setting Logo on/off if exists column LOLOGO
                    if (rrc.ColumnName == "LOLOGO")
                    {
                        this.Logo.Value = true;
                        this.LogoSpecified = true;
                        this.Logo.columnname = rrc.ColumnName;
                        this.Logo.columnnameSpecified = true;
                    }

                    if (oDefaultValue == null)
                    {
                        if (rrc.ExistsDefaultValue)
                        {
                            if (rrc.Default[0].Value.ToString().ToLower() == "{Previous}".ToLower())
                            {
                                if (previousDataRowSpecified)
                                {
                                    oDefaultValue = pPreviousDataRow[rrc.DataField];
                                }
                            }
                            else
                            {
                                string defaultValue = rrc.GetStringDefaultValue(this.TableName);
                                if (StrFunc.IsEmpty(defaultValue))
                                {
                                    oDefaultValue = Convert.DBNull;
                                }
                                else
                                {
                                    oDefaultValue = defaultValue;
                                }
                            }
                        }
                        else if (rrc.ExistsDefaultColumnName)
                        {
                            try
                            {
                                oDefaultValue = opNewRow[this[rrc.Default[0].ColumnName].DataField];
                            }
                            catch { }
                        }
                        else if (TypeData.IsTypeBool(rrc.DataType.value))
                        {
                            string defaultValue = rrc.GetStringDefaultValue(this.TableName);
                            if (StrFunc.IsEmpty(defaultValue))
                                oDefaultValue = Convert.DBNull;
                            else
                                oDefaultValue = defaultValue;
                        }
                    }
                    if (oDefaultValue != null && StrFunc.IsFilled(oDefaultValue.ToString()))
                        try
                        {
                            opNewRow[rrc.DataField] = oDefaultValue;
                        }
                        catch
                        {
                            opNewRow[rrc.DataField] = Convert.DBNull;
                        }
                }
            }
        }


        // EG 20210113 [XXXXX] La valeur par défaut alimente la colonne que si cette dernière est vide
        public void InitializeUpdateRow(DataRow pUpdRow)
        {
            for (int index = 0; index < this.Column.Length; index++)
            {
                ReferentialsReferentialColumn rrc = this.Column[index];
                if (rrc.IsAdditionalData)
                {
                    //if external data : no creation until ID is affected                    
                }
                else
                {
                    Object oDefaultValue = null;
                    if (rrc.IsForeignKeyField)
                        oDefaultValue = this.ValueForeignKeyField;
                    else if (rrc.IsMandatory && rrc.ExistsDDLType)
                        oDefaultValue = SystemSettings.GetAppSettings("Spheres_ReferentialDefault_" + rrc.Relation[0].DDLType.Value);

                    if (oDefaultValue == null)
                    {
                        if (rrc.ExistsDefaultValue)
                        {
                            string defaultValue = rrc.GetStringDefaultValue2(this.TableName);
                            if (StrFunc.IsEmpty(defaultValue))
                                oDefaultValue = Convert.DBNull;
                            else
                                oDefaultValue = defaultValue;
                        }
                        else if (rrc.ExistsDefaultColumnName)
                        {
                            try
                            {
                                oDefaultValue = pUpdRow[this[rrc.Default[0].ColumnName].DataField];
                            }
                            catch { }
                        }
                        else if (TypeData.IsTypeBool(rrc.DataType.value))
                        {
                            string defaultValue = rrc.GetStringDefaultValue2(this.TableName);
                            if (StrFunc.IsEmpty(defaultValue))
                                oDefaultValue = Convert.DBNull;
                            else
                                oDefaultValue = defaultValue;
                        }
                    }
                    // EG 20210113 La valeur par défaut alimente la colonne que si cette dernière est vide
                    if ((pUpdRow[rrc.DataField] == Convert.DBNull) && (oDefaultValue != null) && StrFunc.IsFilled(oDefaultValue.ToString()))
                    {
                        try
                        {
                            pUpdRow[rrc.DataField] = oDefaultValue;
                        }
                        catch
                        {
                            pUpdRow[rrc.DataField] = Convert.DBNull;
                        }
                    }
                }
            }
        }
        #endregion

        /// <summary>
        /// Duplication d'un DataRow, colonne par colonne. Avec, le cas échéant Init/Reset de certaines colonnes (ex.IDENTIFIER).  
        /// <para>NB: Méthode utilisée dans le cadre de l'usage du bouton "Duliquer".</para>
        /// </summary>
        /// <param name="opNewRow"></param>
        /// <param name="pRow"></param>
        /// <param name="pActorIdentifier"></param>
        //PL 20180531 Add lstColInitByJSCopyFromAnotherCol and isReset
        //PL 20191105 Newness
        public void DuplicateRow(ref DataRow opNewRow, DataRow pRow, string pActorIdentifier)
        {
            bool isCreateActorFromTemplate = !String.IsNullOrEmpty(pActorIdentifier);
            string srcActorIdentifierOnCreateActorFromTemplate = null;
            List<string> lstColInitByJSCopyFromAnotherCol = new List<string>();

            for (int index = 0; index < Column.Length; index++)
            {
                ReferentialsReferentialColumn rrc = this.Column[index];
                if (!rrc.IsAdditionalData)
                {
                    bool isReset = false;
                    
                    try
                    {
                        #region Load Column initialized from another colum (ex. DISPLAYNAME from IDENTIFIER)
                        if (rrc.ExistsJavaScript)
                        {
                            JavaScript.JavaScriptScript jss;
                            for (int i = 0; i <= rrc.JavaScript.Script.GetLength(0) - 1; i++)
                            {
                                jss = rrc.JavaScript.Script[i];
                                XMLJavaScript.Interpret(jss);
                                if (JavaScript.IsScriptTypeEFS_Copy(jss.name))
                                {
                                    for (int ni = 0; ni < jss.aControl.Length; ni++)
                                    {
                                        if (!lstColInitByJSCopyFromAnotherCol.Contains(jss.aControl[ni]))
                                            lstColInitByJSCopyFromAnotherCol.Add(jss.aControl[ni]);
                                    }
                                }
                            }
                        }
                        #endregion

                        opNewRow[rrc.DataField] = pRow[rrc.DataField];

                        if ((rrc.ColumnName == "IDENTIFIER") && (rrc.IsDataKeyField || rrc.IsKeyField))
                        {
                                isReset = true; 
                            if (isCreateActorFromTemplate)
                            {
                                isReset = false;
                                srcActorIdentifierOnCreateActorFromTemplate = opNewRow[rrc.DataField].ToString();
                                opNewRow[rrc.DataField] = pActorIdentifier;
                        }
                        }
                        else if (rrc.ColumnName == "DISPLAYNAME" || (rrc.ColumnName == "ADDRESS1")) 
                        {
                            //PL 20191105 Newness
                            if (isCreateActorFromTemplate)
                            {
                                opNewRow[rrc.DataField] = opNewRow[rrc.DataField].ToString().Replace(srcActorIdentifierOnCreateActorFromTemplate, pActorIdentifier);
                                lstColInitByJSCopyFromAnotherCol.Remove(rrc.DataField);
                            }
                        }
                        else if (rrc.ColumnName == "IDCOUNTRYRESIDENCE" || rrc.ColumnName == "REGIONRESIDENCE")
                        {
                            //PL 20191105 Reset afin de bénéficier du JS qui permet de dupliquer la saisie de cette donnée sur les 2 autres données COUNTRY 
                            //PL 20210323 Reset REGIONRESIDENCE
                            isReset = true;
                        }
                        else if (rrc.ColumnName == "ISTEMPLATE")
                        {
                            isReset = true;
                        }
                        
                        if ((!isReset) && rrc.ExistsDefault)
                        {
                            if (rrc.ExistsDefaultColumnName)
                                isReset = true;
                            else if (rrc.ExistsDefaultValue && (rrc.Default[0].Value == Cst.AUTOMATIC_COMPUTE.ToString()))
                                isReset = true;
                        }
                        if (!isReset)
                        {
                            //Reset if column is setted from another column (ex. DISPLAYNAME fom IDENTIFIER)
                            isReset = lstColInitByJSCopyFromAnotherCol.Contains(rrc.ColumnName);
                        }
                    }
                    catch
                    {
                        isReset = true; 
                    }

                    if (isReset)
                        opNewRow[rrc.DataField] = Convert.DBNull;
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pIsIgnoreNotepadAndAttacheddoc"></param>
        /// <param name="pCondApp">Condition courante (null accepté)</param>
        /// <param name="pParam"></param>
        /// <param name="pDynamicArgs"></param>
        /// <param name="pValueFK">value ForeignKeyField</param>
        /// FI 20141211 [20563] Modification signature add paramètre pDynamicArgs
        /// EG 20180627 PERF - Newness Reverse InitializeSQLWhere and InitializeSQLSelectCommand (for DynamicArguments for FILTER_ETDONLY|FILTER_COMONLY|FILTER_ETDNONE)
        /// EG 20180627 PERF - Newness InitDynamicArgsFilter_Product (for DynamicArguments for FILTER_ETDONLY|FILTER_COMONLY|FILTER_ETDNONE)
        /// EG 20180713 PERF - Newness Reverse InitializeSQLPreSelectCommand and InitializeSQLWhere
        /// FI 20200205 [XXXXX] pDynamicArgs est de type Dictionary<string, ReferentialsReferentialStringDynamicData>
        /// EG 20200226 [25077] RDBMS : New version of Trades tables architecture (TRADEINSTRUMENT (INSTRUMENTNO=1) to TRADE)
        /// EG 20200914 [XXXXX] Nouvelle interface GUI v10 (Mode Noir ou blanc) Correction et compléments
        /// EG 20211108 [XXXXX] Correction requête de contrôle existence pièces jointes sur ATTACHEDOC(S)
        public void Initialize(bool pIsIgnoreNotepadAndAttacheddoc, string pCondApp, string[] pParam, Dictionary<string, ReferentialsReferentialStringDynamicData> pDynamicArgs, string pValueFK)
        {
            //PL 20120629 Add pIsIgnoreNotepadAndAttacheddoc afin, sur les consultations LST, de ne plus engendrer de jointure sur NOTEPAD et ATTACHEDOC.
            // RD 20161121 [22619] Add m_IndexEXTLID

            #region Initialisation
            HasMultiTable = false;

            //PL 20161124 - RATP 4Eyes - MakingChecking
            m_IndexColSQL_DTCHK = -1;
            m_IndexColSQL_IDACHK = -1;
            m_IndexColSQL_IDCHK = -1;
            m_IndexColSQL_ISCHK = -1;

            m_IndexColSQL_DTUPD = -1;
            m_IndexColSQL_IDAUPD = -1;
            m_IndexColSQL_DTINS = -1;
            m_IndexColSQL_IDAINS = -1;
            m_IndexColSQL_DataKeyField = -1;
            m_IndexDataKeyField = -1;
            m_IndexKeyField = -1;
            m_IndexColSQL_KeyField = -1;
            m_IndexColSQL_ForeignKeyField = -1;
            m_IndexForeignKeyField = -1;
            m_ColumnPosition_ForeignKeyField = -1;
            m_IndexColSQL_DISPLAYNAME = -1;
            m_IndexColSQL_DESCRIPTION = -1;
            m_IndexColSQL_IDENTITY = -1;
            m_IndexColSQL_IDENTITYWithSource = -1;
            m_IndexColSQL_DTENABLED = -1;
            m_IndexColSQL_DTDISABLED = -1;
            m_IndexDTENABLED = -1;
            m_IndexDTDISABLED = -1;
            m_IndexEXTLLINK = -1;
            m_IndexEXTLLINK2 = -1;
            m_IndexEXTLID = -1;
            m_IndexEXTLATTRB = -1;
            m_IndexColSQL_EXTLLINK = -1;
            m_IndexColSQL_EXTLLINK2 = -1;
            m_IndexColSQL_EXTLATTRB = -1;
            m_IndexColSQL_ROWATTRIBUT = -1;
            m_IndexColSQL_ISSIDE = -1;
            m_IndexColSQL_DTHOLIDAYVALUE = -1;
            #endregion

            if (!ImportSpecified)
            {
                Import = false;
                ImportSpecified = true;
            }
            if (!ExportSpecified)
            {
                Export = false;
                ExportSpecified = true;
            }

            // FI 20141211 [20563] Appel à SetDynamicArgs
            if (null != pDynamicArgs)
                SetDynamicArgs(pDynamicArgs);

            this.TableName = ReplaceDynamicData(this.TableName, pParam);
            this.Ressource = ReplaceDynamicData(this.Ressource, pParam);

            // FI 20201215 [XXXXX] Alimentation de ValueForeignKeyField pour alimentation de l'argument EXISTFKVALUE
            this.ValueForeignKeyField = pValueFK;

            #region ItemTableName - ReplaceDynamicData() - Oracle®: limitation à 30 car.
            if (this.ItemsSpecified)
            {
                this.Items.srctablename = ReplaceDynamicData(this.Items.srctablename, pParam);
                this.Items.tablename = ReplaceDynamicData(this.Items.tablename, pParam);
                this.Items.columnname = ReplaceDynamicData(this.Items.columnname, pParam);
                #region Items.columnname - Specific
                if (Items.columnname.IndexOf("(") > 0)
                {
                    int posOpenParenthesis = Items.columnname.IndexOf("(");
                    int posCloseParenthesis = Items.columnname.IndexOf(")");
                    switch (Items.columnname.Substring(0, posOpenParenthesis))
                    {
                        case "substring":
                            int posComma = Items.columnname.IndexOf(",");
                            int len = Convert.ToInt32(Items.columnname.Substring(posComma + 1, posCloseParenthesis - posComma - 1));
                            this.Items.columnname = this.Items.columnname.Substring(posOpenParenthesis + 1, len);
                            break;
                        case "PKofTable":
                            string table = this.Items.columnname.Substring(posOpenParenthesis + 1, posCloseParenthesis - posOpenParenthesis - 1);
                            this.Items.columnname = OTCmlHelper.GetColunmID(table);
                            break;
                    }
                }
                #endregion

                //PL 20111223 Add TBD... (See also: ReferentialTools.DeserializeXML_ForModeRW())
                if (DataHelper.IsDbOracle(SessionTools.CS))
                {
                    //WARNING: En Oracle la longueur d'un objet est limitée à 30 car. 
                    //         Si une donnée d'une table dépasse cette taille on ne peut donc utiliser l'automate pour convertir 
                    //         ces données en tables "virtuelles" destinées à afficher chaque élément sous forme d'item.
                    string sqlSelect28 = SQLCst.SELECT + "1" + Cst.CrLf;
                    sqlSelect28 += SQLCst.FROM_DBO + this.Items.srctablename + Cst.CrLf;
                    sqlSelect28 += SQLCst.WHERE + DataHelper.SQLLength(SessionTools.CS, this.Items.columnname) + ">28";

                    object obj = DataHelper.ExecuteScalar(SessionTools.CS, CommandType.Text, sqlSelect28);
                    if (obj != null)
                    {
                        //On considère dans ce cas cet élement comme "inexistant", car on ne peut offrir cette fonctionnalité.
                        this.ItemsSpecified = false;
                    }
                }
            }
            #endregion

            if (!AliasTableNameSpecified || StrFunc.IsEmpty(AliasTableName))
                AliasTableName = SQLCst.TBLMAIN;

            #region Replace in SQLSelect or SQLWhere/SQLJoin, constant by value and set null SQLWhere with pCondApp

            
            // FI 20210721 [XXXXX] Remove call of InitializeSQLWhere, call of RemoveUnusedSQLWhere
            //InitializeSQLWhere(pParam, pCondApp);
            RemoveUnusedSQLWhere(pCondApp);
            

            #region Ajout éventuels de Dynamic Arguments (DA)
            // FI 20201214 [XXXXX] Add EXISTFKVALUE Arg
            if (StrFunc.IsFilled(this.ValueForeignKeyField))
                AddBoolFilterToDynamicArgs("EXISTFKVALUE", true);

            if (IsConsultation)
            {
                InitDynamicArgsFilter_Product();
                InitDynamicArgsFilter_ISWITHINCOMPLETETRADE();
                InitDynamicArgsFilter_ISWITHOPP2();
                InitDynamicArgsFilter_ISWITHLOVUMG();
                InitDynamicArgsFilter_PosDet();


                SetDynamicArgs(dynamicArgs);
                ReplaceDynamicArgsInChooseExpression();
                if (SQLJoinSpecified)
                    ReplaceLeftOuterJoin();
            }
            #endregion

            // FI 20210721 [XXXXX] call InitializeSQLWhere
            InitializeSQLWhere2(pParam);

            #region SQLPreSelect
            InitializeSQLPreSelectCommand(pParam, pCondApp);

            //PL 20181115 [24256] Newness "WARNING CODAGE EN DUR" - Step 2/2 (en attendant nouvel automate...) 
            if (IsConsultation && (this.IdLstConsult == LstConsult.ConsultEnum.POSSYNT_ALLOC.ToString()))
            {
                bool isExistColumnOnUnderlyingInformation = (null != this.Column.FirstOrDefault(x => (x.AliasTableName == "quoteOptUnl")));
                if (!isExistColumnOnUnderlyingInformation)
                {
                    //Suppression des queries relatives aux SSJ, queries inutiles lorsqu'il n'existe aucune colonne relatif aux SSJ
                    for (int j = 0; j < ArrFunc.Count(SQLPreSelectCommand); j++)
                    {
                        for (int i = 0; i < ArrFunc.Count(SQLPreSelectCommand); i++)
                        {
                            if ((SQLPreSelectCommand[i].IndexOf("insert into POSSYNTQUOTE_") >= 0) || (SQLPreSelectCommand[i].IndexOf("update POSSYNTQUOTE_") >= 0))
                            {
                                SQLPreSelectCommand = SQLPreSelectCommand.Where(w => w != SQLPreSelectCommand[i]).ToArray();
                                break;
                            }
                        }
                    }
                }
            }
            #endregion SQLPreSelect

            #region SQLSelect
            InitializeSQLSelectCommand(pParam, pCondApp);
            #endregion SQLSelect

            #region SQLJoin
            InitializeSQLJoin(pParam);
            #endregion SQLJoin
            
            #endregion

            // EG 20110530 New
            #region ReplaceDynamicData for SQLRowStyle and SQLRowState
            if (this.SQLRowStyleSpecified)
                this.SQLRowStyle.Value = ReplaceDynamicData(this.SQLRowStyle.Value, pParam);
            if (this.SQLRowStateSpecified)
                this.SQLRowState.Value = ReplaceDynamicData(this.SQLRowState.Value, pParam);
            #endregion ReplaceDynamicData for SQLRowStyle and SQLRowState

            #region DTHOLIDAYVALUE: Create a second column
            //PL 20120116 Newness: Création de DTHOLIDAYNEXTDATE, colonne fictive associée à la colonne DTHOLIDAYVALUE
            ReferentialsReferentialColumn rrc_DTHOLIDAYVALUE = this[Cst.OTCml_COL.DTHOLIDAYVALUE.ToString()];
            if (rrc_DTHOLIDAYVALUE != null)
            {
                //Modification de la colonne(Name et Type), pour bénéficier de la position.
                rrc_DTHOLIDAYVALUE.ColumnName = Cst.OTCml_COL.DTHOLIDAYNEXTDATE.ToString();
                rrc_DTHOLIDAYVALUE.DataType.value = TypeData.TypeDataEnum.date.ToString();

                ArrayList aObjects = new ArrayList();
                for (int index = 0; index < Column.Length; index++)
                    aObjects.Add(((System.Array)Column).GetValue(index));

                //Ajout d'une nouvelle colonne identique à celle d'origine 
                // EG 20231114 [WI736] Application syntaxe new(){}
                ReferentialsReferentialColumn newColumn = new ReferentialsReferentialColumn()
                {
                    ColumnName = Cst.OTCml_COL.DTHOLIDAYVALUE.ToString(),
                    RessourceSpecified = rrc_DTHOLIDAYVALUE.RessourceSpecified,
                    DataType = new ReferentialsReferentialColumnDataType() { value = TypeData.TypeDataEnum.@string.ToString() },
                    AliasTableNameSpecified = rrc_DTHOLIDAYVALUE.AliasTableNameSpecified,
                    AliasColumnNameSpecified = rrc_DTHOLIDAYVALUE.AliasColumnNameSpecified,
                    IsVirtualColumnSpecified = rrc_DTHOLIDAYVALUE.IsVirtualColumnSpecified,
                    IsHideInDataGridSpecified = true,
                    IsHideInDataGrid = true,
                    IsHideSpecified = true,
                    IsHide = true,
                };
                if (newColumn.RessourceSpecified)
                    newColumn.Ressource = rrc_DTHOLIDAYVALUE.Ressource;
                if (newColumn.AliasTableNameSpecified)
                    newColumn.AliasTableName = rrc_DTHOLIDAYVALUE.AliasTableName;
                if (newColumn.AliasColumnNameSpecified)
                    newColumn.AliasColumnName = rrc_DTHOLIDAYVALUE.AliasColumnName;
                if (newColumn.IsVirtualColumnSpecified)
                    newColumn.IsVirtualColumn = rrc_DTHOLIDAYVALUE.IsVirtualColumn;

                aObjects.Add(newColumn);

                System.Type type = ((System.Array)Column).GetType().GetElementType();
                Column = (ReferentialsReferentialColumn[])aObjects.ToArray(type);
            }
            #endregion

            int indexColSQL = 0;
            bool isTableStatistic = TableName.EndsWith("_S");
            bool isTablePreviousImage = TableName.EndsWith("_P");

            #region IsDataArchive --> Interdiction des actions
            if (SessionTools.IsDataArchive)
            {
                this.Create = false;
                this.CreateSpecified = true;
                this.Modify = false;
                this.ModifySpecified = true;
                this.Remove = false;
                this.RemoveSpecified = true;
                this.Duplicate = false;
                this.DuplicateSpecified = true;
            }
            #endregion

            #region isTablePreviousImage --> Ajout automatique des colonnes complémentaires (ACTION_, ...)
            if (isTablePreviousImage)
            {
                //------------------------------------------------
                //PL 20120118 
                //------------------------------------------------
                this.Create = false;
                this.Modify = false;
                this.Remove = false;
                this.ItemsSpecified = false;
                this.RoleTableNameSpecified = false;
                //------------------------------------------------
                ArrayList aObjects = new ArrayList();
                ArrayList aObjectsRelation = new ArrayList();

                UseStatistic = false;
                // EG 20231114 [WI736] Application syntaxe new(){}
                ReferentialsReferentialColumnRelation[] relation = new ReferentialsReferentialColumnRelation[1] { new ReferentialsReferentialColumnRelation() };
                ReferentialsReferentialColumnhtml_BLOCK[] block = new ReferentialsReferentialColumnhtml_BLOCK[1]
                {
                    new ReferentialsReferentialColumnhtml_BLOCK()
                    {
                        title = "Tracks",
                        columnbyrow = 2,
                        columnbyrowSpecified = true,
                        backcolorheader = System.Drawing.Color.DarkRed.Name,
                        backcolorheaderSpecified = true,
                    }
                };
                // EG 20231106 [WI736] Appel à nouvelle méthode CreateColumnTableP
                ReferentialsReferentialColumn newColumn1 = CreateColumnTableP("ID" + TableName, "ID", TypeData.TypeDataEnum.@int, true, relation);
                newColumn1.IsOrderBy = new ReferentialsReferentialColumnIsOrderBy() { Value = SQLCst.DESC.Trim() };
                newColumn1.IsOrderBySpecified = true;
                newColumn1.IsDataKeyField = true;
                newColumn1.IsDataKeyFieldSpecified = true;
                newColumn1.html_BLOCK = block;
                aObjects.Add(newColumn1);

                // EG 20231114 [WI736] Appel à nouvelle méthode CreateColumnTableP
                aObjects.Add(CreateColumnTableP("ACTION_", "ACTION_", TypeData.TypeDataEnum.@string, false, relation));
                aObjects.Add(CreateColumnTableP("DTSYS_", "DTSYS_", TypeData.TypeDataEnum.datetime, false, relation));
                aObjects.Add(CreateColumnTableP("USER_", "USER_", TypeData.TypeDataEnum.@string, false, relation));
                aObjects.Add(CreateColumnTableP("HOSTNAME_", "HOSTNAME_", TypeData.TypeDataEnum.@string, false, relation));

                for (int index = 0; index < Column.Length; index++)
                {
                    //Warning: Reinit de IsDataKeyField
                    Column[index].IsOrderBySpecified = false;   //PL 20120118
                    if (Column[index].IsDataKeyField)           //PL 20120118
                    {
                        Column[index].IsHideInDataGrid = false; //PL 20120118
                        Column[index].IsDataKeyField = false;
                        if (TypeData.IsTypeInt(Column[index].DataType.value)) //PL 20120118
                            Column[index].Ressource = "ID";
                    }
                    aObjects.Add(((System.Array)Column).GetValue(index));
                }

                System.Type type = ((System.Array)Column).GetType().GetElementType();
                Column = (ReferentialsReferentialColumn[])aObjects.ToArray(type);
            }
            #endregion isTablePreviousImage

            #region isTableStatistic --> Todo
            if (isTableStatistic)
            {
                ArrayList aObjects = new ArrayList();
                ArrayList aObjectsRelation = new ArrayList();

                UseStatistic = false;
                // EG 20160404 Migration vs2013
                // #warning 20050528 PL (Not Urgent) Finaliser la gestion des Statistics
            }
            #endregion isTableStatistic

            #region UseStatisticSpecified --> Ajout automatique de la colonne LIBUSEFREQUENCY
            if (this.UseStatisticSpecified && (this.UseStatistic))
            {
                ArrayList aObjects = new System.Collections.ArrayList();
                ArrayList aObjectsRelation = new System.Collections.ArrayList();

                for (int index = 0; index < Column.Length; index++)
                {
                    aObjects.Add(((System.Array)Column).GetValue(index));
                }

                aObjects.Add(CreateColumnStatistics("LIBUSEFREQUENCY", "LIBUSEFREQUENCY",TypeData.TypeDataEnum.@string, this.TableName, null, false));
                // "1" --> Never
                aObjects.Add(CreateColumnStatistics(DataHelper.SQLIsNullChar(SessionTools.CS, this.TableName + "_S" + "." + "USEFREQUENCY", "1"), "USEFREQUENCY", 
                    TypeData.TypeDataEnum.@int, this.TableName, "USEFREQUENCY", true));
                System.Type type = ((System.Array)Column).GetType().GetElementType();
                Column = (ReferentialsReferentialColumn[])aObjects.ToArray(type);
            }
            #endregion UseStatisticSpecified
            //WARNING: Temporaire CC/FL/FDA/PL 20120126 Pb checkbox disabled / ex.: repository ACTOR
            //PL 20120221 Add test sur isUserReadOnly()
            //if (!SessionTools.IsSessionSysAdmin)
            if ((!SessionTools.IsSessionSysAdmin) || CSTools.IsUserReadOnly(SessionTools.CS))
            {
                this.ItemsSpecified = false;
                this.RoleTableNameSpecified = false;
            }

            HasLengthInDatagrid = false;
            HasDynamicResource = false;
            HasDataTRIM = false;
            HasDataLightDisplay = false;
            
            // FI 20200820 [25468] Dates systemes en UTC
            // Afin de faciliter le paramétrage, Spheres® applique les propriétés nécessaires aux colonnes DTINS, DTUPS, DTCHK
            Column.Where(x => ((x.ColumnName == "DTINS") || (x.ColumnName == "DTUPD") || (x.ColumnName == "DTCHK") || (x.ColumnName == "DTMARKED")) && !x.DataType.datakindSpecified).ToList().ForEach(item =>
            {
                item.DataType.datakind = Cst.DataKind.Timestamp;
                item.DataType.datakindSpecified = true;
                item.DataType.display = Cst.DataTypeDisplayMode.Audit;
                item.DataType.displaySpecified = true;
                item.DataType.tzdbid = "Etc/UTC";
                item.DataType.tzdbidSpecified = true;
            });



            ArrayList listJoinTable = new ArrayList();
            for (int index = 0; index < Column.Length; index++)
            {
                ReferentialsReferentialColumn c = Column[index];
                c.IndexColSQL = indexColSQL;
                if (!(c.Scale > 0))
                    c.Scale = 0;

                c.ColumnName = ReplaceDynamicData(c.ColumnName, pParam);

                if (c.RessourceSpecified || (c.Ressource != null))
                {
                    c.RessourceSpecified = true;
                    c.Ressource = ReplaceDynamicData(c.Ressource, pParam);
                }
                else
                {
                    c.RessourceSpecified = true;
                    c.Ressource = string.Empty;
                }

                if (c.ExistsRelation)
                {
                    // EG 20231114 [WI736] Ajout variable relation
                    ReferentialsReferentialColumnRelation relation = c.Relation[0];
                    relation.TableName = ReplaceDynamicData(relation.TableName, pParam);
                    if (relation.TableNameForDDLSpecified)
                        relation.TableNameForDDL = ReplaceDynamicData(relation.TableNameForDDL, pParam);

                    if (ArrFunc.IsFilled(relation.ColumnSelect))
                    {
                        ReferentialsReferentialColumnRelationColumnSelect select = relation.ColumnSelect[0];
                        select.ColumnName = ReplaceDynamicData(select.ColumnName, pParam);
                        select.Ressource = ReplaceDynamicData(select.Ressource, pParam);
                    }
                    if (ArrFunc.IsFilled(c.Relation[0].ColumnLabel))
                    {
                        ReferentialsReferentialColumnRelationColumnLabel label = relation.ColumnLabel[0];
                        label.ColumnName = ReplaceDynamicData(label.ColumnName, pParam);
                        label.Ressource = ReplaceDynamicData(label.Ressource, pParam);
                    }
                    if (ArrFunc.IsFilled(relation.ColumnRelation))
                        relation.ColumnRelation[0].ColumnName = ReplaceDynamicData(relation.ColumnRelation[0].ColumnName, pParam);

                    //PL 20111021 Refactoring Relation[0].AliasTableName 
                    if (relation.AliasTableName == null)
                    {
                        if (listJoinTable.IndexOf(relation.TableName) < 0)
                        {
                            relation.AliasTableName = relation.TableName;
                        }
                        else
                        {
                            int numAlias = 1;
                            while (listJoinTable.IndexOf(relation.TableName + numAlias.ToString()) >= 0)
                            {
                                numAlias++;
                            }
                            relation.AliasTableName = relation.TableName + numAlias.ToString();
                        }
                    }
                    listJoinTable.Add(relation.AliasTableName);
                }
                //PL 20110324 New
                // EG 20120417 Add Gestion Enum directement sur Tooltip en utilisant le tag URL (exemple: <URL>enum.SecurityClassEnum</URL>)
                else
                {
                    bool isDDLEnum = c.ExistsRelationDDLType && (c.Relation[0].DDLType.Value.IndexOf("enum") >= 0) && c.InformationSpecified && (!c.Information.URLSpecified);
                    bool isOtherEnum = (false == isDDLEnum) && c.InformationSpecified && c.Information.URLSpecified && (c.Information.URL.Value.IndexOf("enum") >= 0);
                    if (isDDLEnum || isOtherEnum)
                    {
                        string codeEnum = string.Empty;
                        if (isDDLEnum)
                            codeEnum = c.Relation[0].DDLType.Value;
                        if (isOtherEnum)
                            codeEnum = c.Information.URL.Value;
                        //codeEnum = c.Information.Type;
                        //Création automatique d'un hyperlink d'accès aux référentiels ENUMS
                        LoadEnumArguments loadEnum = LoadEnumArguments.GetArguments(codeEnum, false);
                        if (null != loadEnum)
                        {
                            ReferentialInformationURL riURL = new ReferentialInformationURL()
                            {
                                @enum = loadEnum.code,
                                enumSpecified = true,
                            };
                            c.Information.URL = riURL;
                            c.Information.URLSpecified = true;
                        }
                    }
                }

                HasLengthInDatagrid = HasLengthInDatagrid || (c.LengthInDataGridSpecified);
                HasDynamicResource = HasDynamicResource || (c.IsResourceSpecified && c.IsResource.IsResource)
                    || (c.Ressource == @"/") || (c.Ressource == @":");
                HasDataTRIM = HasDataTRIM || (c.IsTRIMSpecified && c.IsTRIM);
                HasDataLightDisplay = HasDataLightDisplay || (c.IsHideOnLightDisplaySpecified && c.IsHideOnLightDisplay);

                #region ROWVERSION
                //20060524 PL Pour Oracle
                if (c.ColumnName == Cst.OTCml_COL.ROWVERSION.ToString())
                {
                    //20061114 PL Gestion du ROWVERSION a revoir
                    //if (isSqlServer)
                    //c.DataType = "int";
                    c.DataType.value = TypeData.TypeDataEnum.integer.ToString();//PL 20100914 Tuning
                    //else
                    //	c.DataType = "string";
                }
                #endregion

                if (!c.ColspanSpecified)
                    c.Colspan = 1;
                if (c.LabelWidth == null)
                    c.LabelWidth = string.Empty;
                if (c.InputWidth == null)
                    c.InputWidth = string.Empty;
                if (c.InputHeight == null)
                    c.InputHeight = 50.ToString();
                if (c.TextMode == null)
                {
                    if (TypeData.IsTypeText(c.DataType.value))
                        c.TextMode = System.Web.UI.WebControls.TextBoxMode.MultiLine.ToString();
                    else
                        c.TextMode = System.Web.UI.WebControls.TextBoxMode.SingleLine.ToString();
                }
                if (c.ExistsDefault)
                {
                    if (c.Default[0].Value != null)
                        c.Default[0].Value = ReplaceDynamicData(c.Default[0].Value, pParam);
                }
                //PL 20120118 Set comment
                //if (isTablePreviousImage)
                //{
                //    if (!(c.IsDataKeyField || c.IsKeyField || (c.ColumnName == "IDENTIFIER") || (c.ColumnName == "DISPLAYNAME")
                //        || (c.ColumnName == "DESCRIPTION") || (c.ColumnName == "EXTLLINK") || (c.ColumnName == "ACTION_")
                //        || (c.ColumnName == "DTSYS_") || (c.ColumnName == "USER_") || (c.ColumnName == "HOSTNAME_")))
                //        c.IsHideInDataGrid = true;
                //}

                #region ListType --> utilisé par les boutons "..."
                if (c.ExistsRelation)
                {
                    if (false == c.Relation[0].ListTypeSpecified || c.Relation[0].ListType == null)
                    {
                        c.Relation[0].ListTypeSpecified = true;
                        // FI 20160804 [Migration TFS] (Repositoty instead of Referential)
                        c.Relation[0].ListType = Cst.ListType.Repository.ToString();
                    }
                    else
                    {
                        try
                        {
                            //Cst.ListType myEnum = (Cst.ListType)Enum.Parse(typeof(Cst.ListType), c.Relation[0].ListType, true);
                        }
                        catch (ArgumentException)
                        {
                            Exception ex = new Exception("Invalid ListType specified : " + c.Relation[0].ListType + " is not a part of Cst.ListType");
                            throw ex;
                        }
                    }
                }
                #endregion ListType
                if (!c.AliasTableNameSpecified || c.AliasTableName == null)
                {
                    c.AliasTableName = this.AliasTableName;
                    // 20081023 EG 
                    c.AliasTableNameSpecified = StrFunc.IsFilled(c.AliasTableName);
                }
                if (StrFunc.IsEmpty(c.DataField))
                {
                    if (c.AliasColumnNameSpecified && StrFunc.IsFilled(c.AliasColumnName))
                        c.DataField = c.AliasColumnName;
                    else
                        c.DataField = c.ColumnName;
                }

                if (c.CellStyleSpecified && c.CellStyle.modelSpecified && (c.CellStyle.model.Contains("side")))
                    m_IndexColSQL_ISSIDE = indexColSQL;
                // 20090805 RD Pour gérére la nouvelle colonne CellStyle 
                HasColumnsWithStyle = HasColumnsWithStyle || c.CellStyleSpecified;
                // EG 20110105 Gestion de la nouvelle propriété IsEditable 
                HasEditableColumns = HasEditableColumns || c.IsEditableSpecified;
                // RD 20110704 [17501] / Suppression des deux colonnes LSTCOLUMN.ISSIDE et LSTCOLUMN.ISQUANTITY

                #region switch (c.ColumnName) --> Valorise les variables m_Index...
                switch (c.ColumnName)
                {
                    case "DISPLAYNAME":
                        m_IndexColSQL_DISPLAYNAME = indexColSQL;
                        break;
                    case "DESCRIPTION":
                        m_IndexColSQL_DESCRIPTION = indexColSQL;
                        break;
                    case "EXTLLINK":
                        m_IndexColSQL_EXTLLINK = indexColSQL;
                        m_IndexEXTLLINK = index;
                        break;
                    case "EXTLLINK2":
                        m_IndexColSQL_EXTLLINK2 = indexColSQL;
                        m_IndexEXTLLINK2 = index;
                        break;
                    case "EXTLATTRB":
                        m_IndexColSQL_EXTLATTRB = indexColSQL;
                        m_IndexEXTLATTRB = index;
                        break;
                    case "DTENABLED":
                        m_IndexColSQL_DTENABLED = indexColSQL;
                        m_IndexDTENABLED = index;
                        break;
                    case "DTDISABLED":
                        m_IndexColSQL_DTDISABLED = indexColSQL;
                        m_IndexDTDISABLED = index;
                        break;
                    case "DTUPD":
                        m_IndexColSQL_DTUPD = indexColSQL;
                        break;
                    case "IDAUPD":
                        m_IndexColSQL_IDAUPD = indexColSQL;
                        break;
                    case "DTINS":
                        m_IndexColSQL_DTINS = indexColSQL;
                        break;
                    case "IDAINS":
                        m_IndexColSQL_IDAINS = indexColSQL;
                        break;
                    case "ROWATTRIBUT"://Cst.OTCml_COL.ROWATTRIBUT
                        m_IndexColSQL_ROWATTRIBUT = indexColSQL;
                        break;
                    case "DTHOLIDAYVALUE"://Cst.OTCml_COL.DTHOLIDAYVALUE
                        m_IndexColSQL_DTHOLIDAYVALUE = indexColSQL;
                        break;
                    //PL 20161124 - RATP 4Eyes - MakingChecking
                    case "DTCHK":
                        m_IndexColSQL_DTCHK = indexColSQL;
                        break;
                    case "IDACHK":
                        m_IndexColSQL_IDACHK = indexColSQL;
                        break;
                    case "IDCHK":
                        m_IndexColSQL_IDCHK = indexColSQL;
                        break;
                    case "ISCHK":
                        m_IndexColSQL_ISCHK = indexColSQL;
                        break;
                    default:
                        if (c.IsDataKeyField)
                        {
                            m_IndexDataKeyField = index;
                            m_IndexColSQL_DataKeyField = indexColSQL;
                        }
                        if (c.IsKeyField)
                        {
                            m_IndexKeyField = index;
                            m_IndexColSQL_KeyField = indexColSQL;
                        }
                        if (c.IsForeignKeyField)
                        {
                            m_IndexForeignKeyField = index;
                            m_IndexColSQL_ForeignKeyField = indexColSQL;
                            if (c.ColumnPositionInDataGridSpecified)
                            {
                                m_ColumnPosition_ForeignKeyField = c.ColumnPositionInDataGrid;
                        }
                        }
                        // RD 20161121 [22619] Add IndexEXTLID
                        if (c.IsExternalKeyFieldSpecified && c.IsExternalKeyField)
                        {
                            m_IndexEXTLID = index;
                        }
                        if (c.IsIdentity.Value)
                        {
                            m_IndexIDENTITY = index;
                            m_IndexColSQL_IDENTITY = indexColSQL;
                            if (c.IsIdentity.sourceSpecified)
                            {
                                m_IndexColSQL_IDENTITYWithSource = indexColSQL; ;
                            }
                        }
                        break;
                }
                #endregion switch (c.ColumnName)
                if (c.ExistsRelation)
                {
                    indexColSQL++;
                    #region Replace in SQLWhere constant by value
                    if ((c.Relation[0].Condition != null) && (c.Relation[0].Condition[0].SQLWhere != null))
                        c.Relation[0].Condition[0].SQLWhere = ReplaceDynamicData(c.Relation[0].Condition[0].SQLWhere, pParam);
                    #endregion
                }
                indexColSQL++;
            }

            if (m_IndexColSQL_KeyField == -1)
                //La colonne PK est a priori une colonne de données et non pas un identity 
                m_IndexColSQL_KeyField = m_IndexColSQL_DataKeyField;

            if (!this.ColumnByRowSpecified)
                ColumnByRow = 2;
            if (StrFunc.IsEmpty(Image))
            {
                if (!Create && !Modify && !Remove)
                    Image = "fas fa-search";
                else
                    Image = "fab fa-whmcs"; 
            }
            if (!pIsIgnoreNotepadAndAttacheddoc)
            {
                if (!NotepadSpecified)
                {
                    NotepadSpecified = true;
                    if (IndexDataKeyField == -1)
                        Notepad.Value = false;
                    else
                        Notepad.Value = TypeData.IsTypeInt(this.Column[this.IndexDataKeyField].DataType.value) ||
                            TypeData.IsTypeString(this.Column[this.IndexDataKeyField].DataType.value);
                }
                if (!AttachedDocSpecified)
                {
                    AttachedDocSpecified = true;
                    AttachedDoc.Value = this.Notepad.Value;
                    if (this.Notepad.tablenameSpecified)
                    {
                        AttachedDoc.tablenameSpecified = true;
                        AttachedDoc.tablename = this.Notepad.tablename;
                        if (this.Notepad.IDSpecified)
                        {
                            AttachedDoc.IDSpecified = true;
                            AttachedDoc.ID = this.Notepad.ID;
                        }
                    }
                }
            }
            //Type de PK (alpha ou num) pour les tables EXTLID(S), ATTACHEDDOC(S), ...
            if (this.IndexDataKeyField != -1)
                this.IsDataKeyField_String = !TypeData.IsTypeNumeric(this.Column[this.IndexDataKeyField].DataType.value);

            #region tables NOTEPAD(S) and ATTACHEDDOC(S)
            if (m_IndexDataKeyField != -1 && Column[m_IndexDataKeyField].ColumnName != Cst.OTCml_COL.ROWVERSION.ToString())
            {
                bool isNotepad = (NotepadSpecified && Notepad.Value);
                bool isAttachedDoc = (AttachedDocSpecified && AttachedDoc.Value);
                bool isBoth = (isNotepad && isAttachedDoc);
                bool isHideInDatagrid = true;
                // EG 20231106 [WI736] Les jointures NOTEPAD et ATTACHEDDOC ne sont ajoutées qu'en mode Form
                if ((isNotepad || isAttachedDoc) && IsForm)
                {
                    ReferentialsReferentialColumn rrcolumnDataKeyField = Column[m_IndexDataKeyField];
                    string tblNOTEPAD = Cst.OTCml_TBL.NOTEPAD.ToString();
                    string tblATTACHEDDOC = Cst.OTCml_TBL.ATTACHEDDOC.ToString();
                    string tblACTOR = Cst.OTCml_TBL.ACTOR.ToString();
                    if (IsDataKeyField_String)
                    {
                        tblNOTEPAD += "S";
                        tblATTACHEDDOC += "S";
                    }
                    // FI 20191002 gestion de AttachedDoc.viewName
                    if (AttachedDoc.viewNameSpecified)
                        tblATTACHEDDOC = AttachedDoc.viewName;

                    #region Add Join for tables NOTEPAD(S) and ATTACHEDDOC(S)
                    string[] SQLJoinsAdd = new string[(isBoth ? 4 : 2)];
                    int currentIndex = -1;
                    #region NOTEPAD(S)
                    if (isNotepad)
                    {
                        Pair<String, String> joinInfo = this.GetLinkedTableAndColumn(LinkedTableEnum.NOTEPAD);
                        string tblName = joinInfo.First;
                        string columnName = joinInfo.Second;

                        currentIndex++;
                        SQLJoinsAdd[currentIndex] = SQLCst.LEFTJOIN_DBO + tblNOTEPAD + " " + Cst.AliasNOTEPAD
                            + SQLCst.ON + "(" + Cst.AliasNOTEPAD + ".TABLENAME=" + DataHelper.SQLString(tblName)
                            + SQLCst.AND + Cst.AliasNOTEPAD + ".ID=" + this.AliasTableName + "." + columnName + ")";
                        currentIndex++;
                        SQLJoinsAdd[currentIndex] = SQLCst.LEFTJOIN_DBO + tblACTOR + " " + Cst.AliasNOTEPADACTOR
                            + SQLCst.ON + "(" + Cst.AliasNOTEPADACTOR + ".IDA=" + Cst.AliasNOTEPAD + ".IDAUPD)";
                    }
                    #endregion
                    #region ATTACHEDDOC(S)
                    if (isAttachedDoc)
                    {
                        string qry;
                        // FI 20191002 [XXXXX] usage de la methode GetAttachadDocTableAndColumn 
                        Pair<String, String> joinInfo = this.GetLinkedTableAndColumn(LinkedTableEnum.ATTACHEDDOC);
                        string tblName = joinInfo.First;
                        string columnName = joinInfo.Second;

                        string aliasMaxAD = "max" + Cst.AliasATTACHEDDOC;
                        string aliasAD = Cst.AliasATTACHEDDOC;
                        string aliasADA = Cst.AliasATTACHEDDOCACTOR;

                        // EG 20211108 [XXXXX] LOG IO (Input):  Spheres® n'affiche pas le trombone en vert lorsqu'il existe des fichier joints
                        // Retrait de l'agrégat MAX(DOCNAME) et de son utilisation sur la jointure avec ATTACHEDDOC
                        // L'usage du MAX(DOCNAME) couplé avec MAX(DTUPD) pouvait engendrer un retour vierge sur la table ATTACHEDDOC
                        // dans le cas où la plus grande date (MAX(DTUPD)) ne correspond pas  nécessairement à la même ligne que celle du plus grand document (MAX(DOCNAME))
                        // Les doublons peuvent être évités en passant DTUPD en UT_DATETIME2, l'utilsation de DOCNAME dans la requête est caduque
                        qry = String.Format(@"left outer join ( select ID, max(DTUPD) as DTUPD from dbo.{0} where TABLENAME = {1} group by ID) {2} on {2}.ID={3}.{4}
                        left outer join dbo.{0} {5} on ({5}.TABLENAME={1} and {5}.ID={3}.{4} and {5}.DTUPD={2}.DTUPD)", tblATTACHEDDOC, DataHelper.SQLString(tblName), aliasMaxAD, this.AliasTableName, columnName, aliasAD);

                        currentIndex++;
                        SQLJoinsAdd[currentIndex] = qry;

                        //Left outer join on ACTOR table for ATTACHEDDOC
                        qry = SQLCst.LEFTJOIN_DBO + tblACTOR + " " + aliasADA + SQLCst.ON + "(" + aliasADA + ".IDA = " + aliasAD + ".IDAUPD)";

                        currentIndex++;
                        SQLJoinsAdd[currentIndex] = qry;
                    }
                    #endregion
                    #region Add in SQLJoin
                    if (SQLJoin == null || SQLJoin.GetLength(0) == 0)
                    {
                        SQLJoin = SQLJoinsAdd;
                        SQLJoinSpecified = true;
                    }
                    else
                    {
                        string[] newSQLJoin = new string[SQLJoin.GetLength(0) + SQLJoinsAdd.GetLength(0)];
                        for (int i = 0; i < SQLJoin.GetLength(0); i++)
                            newSQLJoin[i] = SQLJoin[i];
                        for (int i = SQLJoin.GetLength(0); i < SQLJoin.GetLength(0) + SQLJoinsAdd.GetLength(0); i++)
                            newSQLJoin[i] = SQLJoinsAdd[i - SQLJoin.GetLength(0)];
                        SQLJoin = newSQLJoin;
                    }
                    #endregion
                    #endregion Add Join for tables NOTEPAD(S) and ATTACHEDDOC(S)

                    #region add Column for tables NOTEPAD(S) and ATTACHEDDOC(S)
                    System.Collections.ArrayList alColumns = new System.Collections.ArrayList();
                    for (int index = 0; index < Column.Length; index++)
                    {
                        alColumns.Add(((System.Array)Column).GetValue(index));
                    }
                    //NOTEPAD(S) ACTOR.DISPLAYNAME & ACTOR.DTUPD
                    if (isNotepad)
                    {
                        // EG 20231114 [WI736] Appel à nouvelle méthode CreateColumnAttachedDocAndNotePad
                        alColumns.Add(CreateColumnAttachedDocAndNotePad("DISPLAYNAME", "NotePad", TypeData.TypeDataEnum.@string, Cst.AliasNOTEPADACTOR, isHideInDatagrid));
                        alColumns.Add(CreateColumnAttachedDocAndNotePad("DTUPD", "NotePadDtUpd", TypeData.TypeDataEnum.datetime, Cst.AliasNOTEPAD, isHideInDatagrid));
                    }
                    //ATTACHEDDOC(S) ACTOR.DISPLAYNAME & ACTOR.DTUPD                    
                    if (isAttachedDoc)
                    {
                        alColumns.Add(CreateColumnAttachedDocAndNotePad("DISPLAYNAME", "AttachedDoc", TypeData.TypeDataEnum.@string, Cst.AliasATTACHEDDOCACTOR, isHideInDatagrid));
                        alColumns.Add(CreateColumnAttachedDocAndNotePad("DTUPD", "AttachedDocDtUpd", TypeData.TypeDataEnum.datetime, Cst.AliasATTACHEDDOC, isHideInDatagrid));
                    }
                    System.Type type = ((System.Array)Column).GetType().GetElementType();
                    Column = (ReferentialsReferentialColumn[])alColumns.ToArray(type);
                    #endregion add Column for tables NOTEPAD(S) and ATTACHEDDOC(S)
                }
            }
            #endregion tables NOTEPAD(S) and ATTACHEDDOC(S)
        }
        /// <summary>
        /// Méthode de construction des colonnes ACTION_, DTSYS_, USER_ et HOSTNAME_ 
        /// pour la table _P associé
        /// </summary>
        /// <param name="pColumnName"></param>
        /// <param name="pRessource"></param>
        /// <param name="pDataType"></param>
        /// <param name="pIsHide"></param>
        /// <param name="pRelation"></param>
        /// <returns></returns>
        // EG 20231114 [WI736] New
        private ReferentialsReferentialColumn CreateColumnTableP(string pColumnName, string pRessource, TypeData.TypeDataEnum pDataType,
            bool pIsHide, ReferentialsReferentialColumnRelation[] pRelation)
        {
            ReferentialsReferentialColumn newColumn = new ReferentialsReferentialColumn()
            {
                ColumnName = pColumnName,
                Ressource = pRessource,
                RessourceSpecified = true,
                DataType = new ReferentialsReferentialColumnDataType() { value = pDataType.ToString() },
                RegularExpression = string.Empty,
                AliasTableNameSpecified = false,
                IsHideInDataGrid = false,
                IsHideInDataGridSpecified = true,
                IsHide = pIsHide,
                IsHideSpecified = true,
                IsMandatory = true,
                IsMandatorySpecified = true,
                IsAutoPostBack = false,
                IsAutoPostBackSpecified = true,
                IsVirtualColumn = false,
                IsVirtualColumnSpecified = true,
                IsDataKeyField = true,
                IsDataKeyFieldSpecified = true,
                IsOrderBy = new ReferentialsReferentialColumnIsOrderBy() { Value = SQLCst.DESC.Trim() },
                IsOrderBySpecified = true,
                Relation = pRelation,
            };
            return newColumn;
        }
        /// <summary>
        /// Méthode de construction des colonnes DISPLAYNAME et DTUPD pour les tables NOTEPAD et ATTACHEDDOC
        /// </summary>
        /// <param name="pColumnName">Nom de la colonne</param>
        /// <param name="pRessource">Ressource pour la colonne</param>
        /// <param name="pDataType">DataType de la colonne</param>
        /// <param name="pAliasTable">Alias de la table associée</param>
        /// <param name="pIsHideInDatagrid">La colonne est-elle visible dans le Grid</param>
        /// <returns></returns>
        // EG 20231106 [WI736] New
        private ReferentialsReferentialColumn CreateColumnAttachedDocAndNotePad(string pColumnName, string pRessource, TypeData.TypeDataEnum pDataType, string pAliasTable, bool pIsHideInDatagrid)
        {
            ReferentialsReferentialColumn newColumn = new ReferentialsReferentialColumn()
            {
                ColumnName = pColumnName,
                Ressource = pRessource,
                RessourceSpecified = true,
                DataType = new ReferentialsReferentialColumnDataType() {value = pDataType.ToString()},
                RegularExpression = string.Empty,
                AliasTableName = pAliasTable,
                AliasTableNameSpecified = true,
                IsHideInDataGrid = pIsHideInDatagrid,
                IsHideInDataGridSpecified = true,
                IsHide = true,
                IsHideSpecified = true,
                IsMandatory = false,
                IsMandatorySpecified = false,
                IsAutoPostBack = false,
                IsAutoPostBackSpecified = true,
                IsVirtualColumn = false,
                IsVirtualColumnSpecified = true,
                DataField = pAliasTable + "_" + pColumnName
            };
            return newColumn;
        }
        /// <summary>
        /// Méthode de construction des colonnes LIBUSEFREQUENCY et USEFREQUENCY pour les tables statistiques _S
        /// </summary>
        /// <param name="pColumnName">Nom de la colonne</param>
        /// <param name="pRessource">Ressource pour la colonne</param>
        /// <param name="pDataType">DataType de la colonne</param>
        /// <param name="pAliasTable">Alias de la table associée</param>
        /// <param name="pAliasColumnName">Alias de la colonne associée</param>
        /// <param name="pIsHideInDatagrid">La colonne est-elle visible dans le Grid</param>
        /// <returns></returns>
        // EG 20231106 [WI736] New
        private ReferentialsReferentialColumn CreateColumnStatistics(string pColumnName, string pRessource, TypeData.TypeDataEnum pDataType, string pAliasTable, string pAliasColumnName, bool pIsHideInDatagrid)
        {
            ReferentialsReferentialColumn newColumn = new ReferentialsReferentialColumn()
            {
                ColumnName = pColumnName,
                Ressource = pRessource,
                RessourceSpecified = true,
                DataType = new ReferentialsReferentialColumnDataType() { value = pDataType.ToString() },
                RegularExpression = string.Empty,
                AliasTableName = pAliasTable + "_S",
                AliasTableNameSpecified = true,
                AliasColumnName = pAliasTable + "_S_" + pAliasColumnName,
                AliasColumnNameSpecified = StrFunc.IsFilled(pAliasColumnName),
                IsHideInDataGrid = pIsHideInDatagrid,
                IsHideInDataGridSpecified = true,
                IsHide = true,
                IsHideSpecified = true,
                IsMandatory = false,
                IsMandatorySpecified = false,
                IsAutoPostBack = false,
                IsAutoPostBackSpecified = true,
                IsVirtualColumn = false,
                IsVirtualColumnSpecified = true,
            };
            return newColumn;
        }

        /// <summary>
        /// Initiale SQLSelectCommand
        /// </summary>
        /// FI 20141211 [20563] add parameter pCondApp
        public void InitializeSQLSelectCommand(string[] pParam, string pCondApp)
        {
            //
            //Select
            //Les commandes présentes ds SQLSelect sont prioritaires vis à vis des commandes resources
            //Cela permet de modifier le xml ou les lst de manière et d'écraser la resource incorporée
            if (SQLSelectResourceSpecified && (false == SQLSelectSpecified))
            {
                ReferentialsReferentialSQLSelects rrSqlSelects = ReferentialTools.LoadReferentialsReferentialSQLSelect(SQLSelectResource.name);
                SQLSelect = rrSqlSelects.item;
                SQLSelectSpecified = true;
            }
            if (SQLSelectSpecified)
            {
                string[] sqlCmd = GetSqlCommand(SQLSelect, pParam, pCondApp);
                if (ArrFunc.IsFilled(sqlCmd))
                {
                    //Il ne peut exister qu'une commande
                    SQLSelectCommand = sqlCmd[0];
                }
                SQLSelectSpecified = StrFunc.IsFilled(SQLSelectCommand);
            }
        }

        /// <summary>
        /// Initiale SQLPreSelectCommand
        /// </summary>
        public void InitializeSQLPreSelectCommand(string[] pParam, string pCondApp)
        {
            //Preselect
            //Les commandes présentes ds SQLPreSelect sont prioritaires vis à vis des commandes resources
            //Cela permet de modifier le xml ou les lst de manière et d'écraser la resource incorporée
            if (SQLPreSelectResourceSpecified && (false == SQLPreSelectSpecified))
            {
                ReferentialsReferentialSQLSelects rrSqlSelects = ReferentialTools.LoadReferentialsReferentialSQLSelect(SQLPreSelectResource.name);
                SQLPreSelect = rrSqlSelects.item;
                SQLPreSelectSpecified = true;
            }
            if (SQLPreSelectSpecified)
            {
                SQLPreSelectCommand = GetSqlCommand(SQLPreSelect, pParam, pCondApp);
                SQLPreSelectSpecified = ArrFunc.IsFilled(SQLPreSelectCommand);
            }
        }


        



        /// <summary>
        /// Initialisation des DynamicArguments FILTER_ETDONLY|FILTER_COMONLY|FILTER_ETDNONE) si consultation
        /// </summary>
        /// EG 20180627 PERF - Newness
        /// FI 20201127 [XXXXX] Refactoring
        /// FI 20201201 [XXXXX] Refactoring
        private void InitDynamicArgsFilter_Product()
        {
            if (IsConsultation)
            {
                string CS = SessionTools.CS;
            
            bool isExistCriteria_ProductCOMOnly = false;
            bool isExistCriteria_ProductDSTOnly = false;
            bool isExistCriteria_ProductESTOnly = false;
            bool isExistCriteria_ProductETDOnly = false;
            bool isExistCriteria_ProductRTSOnly = false;
            bool isExistCriteria_ProductETDNone = false;

            if (SQLWhereSpecified)
            {
                    List<ReferentialsReferentialSQLWhere> lstWhereProduct = SQLWhere.ToList().Where(item
                        => item.ColumnNameSpecified && item.TableNameSpecified && item.TableName == "PRODUCT").ToList();

                    if (0 < lstWhereProduct.Count)
                    {
                        // On Suppose qu'il n'existe qu'un seul alias de la table PRODUCT
                        string aliasProduct = (from item in lstWhereProduct.Where(item => item.AliasTableNameSpecified)
                                               select item.AliasTableName).FirstOrDefault();

                        List<SQL_ColumnCriteria> sql_ColumnCriteria = lstWhereProduct.Select(item =>
                        {
                            return SQLReferentialData.GetSQL_ColumnCriteria(CS, item, this);
                        }).ToList();


                    SQL_Criteria sql_Criteria = new SQL_Criteria(sql_ColumnCriteria.ToArray(), SystemSettings.IsCollationCI());
                    
                        isExistCriteria_ProductCOMOnly = sql_Criteria.IsExistFilterOnValueOnly(CS, aliasProduct, "IDENTIFIER", "commoditySpot");
                        isExistCriteria_ProductDSTOnly = sql_Criteria.IsExistFilterOnValueOnly(CS, aliasProduct, "IDENTIFIER", "debtSecurityTransaction");
                        isExistCriteria_ProductESTOnly = sql_Criteria.IsExistFilterOnValueOnly(CS, aliasProduct, "IDENTIFIER", "equitySecurityTransaction");
                        isExistCriteria_ProductETDOnly = sql_Criteria.IsExistFilterOnValueOnly(CS, aliasProduct, "IDENTIFIER", "exchangeTradedDerivative");
                        isExistCriteria_ProductRTSOnly = sql_Criteria.IsExistFilterOnValueOnly(CS, aliasProduct, "IDENTIFIER", "returnSwap");
                        isExistCriteria_ProductETDNone = sql_Criteria.IsExistFilterOnValueNone(CS, aliasProduct, "IDENTIFIER", "exchangeTradedDerivative");
                }
            }

            AddBoolFilterToDynamicArgs("FILTER_COMONLY", isExistCriteria_ProductCOMOnly);
            AddBoolFilterToDynamicArgs("FILTER_DSTONLY", isExistCriteria_ProductDSTOnly);
            AddBoolFilterToDynamicArgs("FILTER_ESTONLY", isExistCriteria_ProductESTOnly);
            //PL 20181130 [24350]
            //AddBoolFilterToDynamicArgs("FILTER_ETDONLY", isExistCriteria_ProductETDOnly);
            //AddBoolFilterToDynamicArgs("FILTER_ETDNONE", isExistCriteria_ProductETDNone);
            AddBoolFilterToDynamicArgs("FILTER_ETDONLY", SessionTools.License.IsLicProductAuthorised_Add_ALLOCETDOnly() || isExistCriteria_ProductETDOnly);
            AddBoolFilterToDynamicArgs("FILTER_ETDNONE", SessionTools.License.IsLicProductAuthorised_Add_ALLOCETDNotAllowed() || isExistCriteria_ProductETDNone);
            AddBoolFilterToDynamicArgs("FILTER_RTSONLY", isExistCriteria_ProductRTSOnly);
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="pName"></param>
        /// <param name="pValue"></param>
        ///  FI 20200205 [XXXXX] Usage de ReferentialsReferentialStringDynamicData
        private void AddBoolFilterToDynamicArgs(string pName, bool pValue)
        {
            if (null == dynamicArgs)
                dynamicArgs = new Dictionary<string, ReferentialsReferentialStringDynamicData>();

            if (false == dynamicArgs.ContainsKey(pName))
            {
                ReferentialsReferentialStringDynamicData sDD = new ReferentialsReferentialStringDynamicData(TypeData.TypeDataEnum.@bool.ToString(), pName, pValue ? "true" : "false")
                {
                    source = DynamicDataSourceEnum.RUNTIME
                };
                dynamicArgs.Add(sDD.name, sDD);
            }
        }
    
        /// <summary>
        /// Initiale SQLJoin
        /// </summary>
        private void InitializeSQLJoin(string[] pParam)
        {
            if (ArrFunc.IsFilled(SQLJoin))
            {
                for (int index = 0; index < SQLJoin.Length; index++)
                {
                    SQLJoin[index] = ReplaceDynamicData(SQLJoin[index], pParam);
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        // EG 20201008 [XXXXX] Suppression du BreakLine sur les validateurs obligatoires (MsgErrRequiredField)
        public void InitializeRegEx()
        {
            ReferentialsReferentialColumn rrc;

            for (int index = 0; index < Column.Length; index++)
            {
                rrc = Column[index];

                if (!ReferentialTools.IsDataForDDL(rrc))
                {
                    if (0 > rrc.Scale)
                        rrc.Scale = 0;

                    string startMsgError = $"{rrc.Label} :";
                    string msgError = startMsgError;
                    string regularExpression = rrc.RegularExpression;
                    string minOccurence = (rrc.IsMandatorySpecified && rrc.IsMandatory ? "1" : "0");
                    string maxOccurence = Math.Max((rrc.IsMandatorySpecified && rrc.IsMandatory ? 1 : 0), rrc.Length).ToString();

                    if (StrFunc.IsEmpty(regularExpression))
                    {
                        switch (rrc.DataTypeEnum)
                        {
                            case TypeData.TypeDataEnum.@int:
                            case TypeData.TypeDataEnum.integer:
                                {
                                    //[+-]? : + or - (1 char), optionnal ( -> ? )
                                    //([\d]{0,x}) : any decimal char : [\d]   from 0 to x occurences max  {0,x}                        
                                    regularExpression = @"[-+]?([\d]{" + minOccurence + "," + maxOccurence + "})";
                                    msgError += Cst.HTMLBreakLine + EFSRegex.ErrorMessage(EFSRegex.TypeRegex.RegexInteger);
                                    msgError += " (" + ACommon.Ressource.GetString2("RegexMaxLengthError", maxOccurence) + " )";
                                    break;
                                }
                            case TypeData.TypeDataEnum.dec:
                            case TypeData.TypeDataEnum.@decimal:
                                {
                                    //FI 20100309 le "." est désormais autorisé
                                    System.Globalization.NumberFormatInfo nfi = System.Globalization.CultureInfo.CurrentUICulture.NumberFormat;
                                    //[+-]? : + or - (1 char), optionnal ( -> ? )
                                    //([\d]{0,x}) : any decimal char : [\d]   from 0 to x occurences max  {0,x}      
                                    regularExpression = @"([-+]?([\d]{0," + (rrc.Length - rrc.Scale).ToString() + @"}))";
                                    if (rrc.Scale > 0)
                                    {
                                        //? -> first part (int) is optionnal : so we can type .05 for the value 0.05
                                        // ( : begin group
                                        // nfi.NumberDecimalSeparator : decimal separator
                                        //([\d]{0,x}) : any decimal char : [\d]   from 0 to x occurences max  {0,x}    
                                        // ) : end group (group is separator + dec)
                                        //? -> second part (group as separator + dec) is also optionnal
                                        regularExpression += @"?(";
                                        regularExpression += "[" + nfi.NumberDecimalSeparator + ".]";
                                        regularExpression += @"[\d]{0," + rrc.Scale.ToString() + @"}";
                                        regularExpression += @")?";
                                    }
                                    msgError += Cst.HTMLBreakLine + EFS.ACommon.Ressource.GetString2("RegexDecimalFormatError", (rrc.Length - rrc.Scale).ToString(), nfi.NumberDecimalSeparator, rrc.Scale.ToString());
                                    break;
                                }
                            case TypeData.TypeDataEnum.date:
                            case TypeData.TypeDataEnum.datetime:
                            case TypeData.TypeDataEnum.time:
                                {

                                    EFSRegex.TypeRegex tRegex = EFSRegex.TypeRegex.None;
                                    if (TypeData.IsTypeDateTime(rrc.DataType.value))
                                    {
                                        tRegex = EFSRegex.TypeRegex.RegexDateTime;
                                        regularExpression = EFSRegex.RegularExpression(tRegex);
                                        regularExpression += "|" + EFSRegex.RegularExpression(EFSRegex.TypeRegex.RegexDateRelativeOffset);
                                        msgError += Cst.HTMLBreakLine + EFSRegex.ErrorMessage(tRegex);
                                    }
                                    else if (TypeData.IsTypeDate(rrc.DataType.value))
                                    {
                                        tRegex = EFSRegex.TypeRegex.RegexDate;
                                        regularExpression = EFSRegex.RegularExpression(tRegex);
                                        regularExpression += "|" + EFSRegex.RegularExpression(EFSRegex.TypeRegex.RegexDateRelativeOffset);
                                        msgError += Cst.HTMLBreakLine + EFSRegex.ErrorMessage(tRegex);
                                    }
                                    else if (TypeData.IsTypeTime(rrc.DataType.value))
                                    {
                                        tRegex = EFSRegex.TypeRegex.RegexShortTime;
                                        regularExpression = EFSRegex.RegularExpression(tRegex);
                                        msgError += Cst.HTMLBreakLine + EFSRegex.ErrorMessage(tRegex);
                                    }
                                    break;
                                }
                            default:
                                {
                                    //20050530 FI mise en comment => pourquoi on n'autoriserait pas les char speciaux ni les espaces ????
                                    //si le champ est de type DataKeyField ou KeyField on n'autorise pas les char speciaux ni les espaces
                                    //if ((rrc.IsDataKeyFieldSpecified && rrc.IsDataKeyField) || ( rrc.IsKeyField && rrc.IsKeyFieldSpecified))
                                    //{
                                    //    regularExpression = @"([\w]{" + minOccurence + "," + rrc.Length.ToString() + @"})" ;
                                    //    msgError += " {" + EFS.ACommon.Ressource.GetString("RegexStringWithoutSpecialsAndSpace") + "}";
                                    //}
                                    //else
                                    if (!TypeData.IsTypeText(rrc.DataType.value))
                                    {
                                        //PL 20181112 [22965] Newness          
                                        if (rrc.IsDataKeyField || rrc.IsKeyField || rrc.ColumnName == "IDENTIFIER")
                                        {
                                            //PL 20190107 New RegEx: ^[^\s]$|^[^\s][\w\W]{0,62}[^\s]$
                                            //regularExpression = @"([^-\s][\w|\W]{" + minOccurence + "," + maxOccurence + @"}[^-\s])";
                                            regularExpression = @"^[^\s]$|^[^\s][\w\W]{0," + Math.Max(0, Convert.ToInt32(maxOccurence) - 2).ToString() + @"}[^\s]$";

                                            msgError += " (" + ACommon.Ressource.GetString2("RegexMaxLengthError", maxOccurence) + " " + ACommon.Ressource.GetString2("RegexStringNoStartEndWhiteSpace") + ")";
                                        }
                                        else
                                        {
                                            regularExpression = @"([\w|\W]{" + minOccurence + "," + maxOccurence + @"})";
                                            msgError += " (" + ACommon.Ressource.GetString2("RegexMaxLengthError", maxOccurence) + ")";
                                        }
                                    }
                                    break;
                                }
                        }
                    }

                    if (StrFunc.IsFilled(regularExpression) && regularExpression.ToUpper().StartsWith("REGEX"))
                    {
                        string newMsgError = string.Empty;
                        string newRegularExpression = ACommon.Ressource.GetString(regularExpression, @"[\w|\W]+");

                        switch (regularExpression)
                        {
                            case "RegexStringAlphaNumUpper":
                            case "RegexStringAlphaNum":
                                newRegularExpression = newRegularExpression.Replace(@"+$", @"{" + minOccurence + @"," + maxOccurence + @"}$");
                                newMsgError = ACommon.Ressource.GetString(regularExpression + "Error", string.Empty);
                                if (StrFunc.IsFilled(newMsgError))
                                {
                                    msgError += Cst.HTMLBreakLine;
                                    msgError += newMsgError;
                                }
                                msgError += " (" + ACommon.Ressource.GetString2("RegexMaxLengthError", maxOccurence) + " )";
                                break;
                        }
                        regularExpression = newRegularExpression;
                    }

                    // FI 20220523 [XXXXX] add RegexDefaultError 
                    if (StrFunc.IsFilled(regularExpression) && msgError == startMsgError)
                        msgError += ACommon.Ressource.GetString2("RegexDefaultError");

                    rrc.RegularExpression = regularExpression;
                    rrc.MsgErr = msgError;
                    //rrc.MsgErrRequiredField = rrc.Label + " :" + Cst.HTMLBreakLine + EFS.ACommon.Ressource.GetString("ISMANDATORY");
                    rrc.MsgErrRequiredField = rrc.Label + " : " + EFS.ACommon.Ressource.GetString("ISMANDATORY");
                }
            }
        }

        /// <summary>
        /// Retourne true s'il existe au minimum un SQLWhere tel que ConditionSystem = "SESSIONRESTRICT"
        /// </summary>
        /// <returns></returns>
        public bool IsSQLWhereWithSessionRestrict()
        {
            bool ret = false;
            if (ArrFunc.IsFilled(SQLWhere))
            {
                for (int i = 0; i < SQLWhere.Length; i++)
                {
                    if ((null != SQLWhere[i]) &&
                        SQLWhere[i].ConditionSystemSpecified &&
                        SQLWhere[i].ConditionSystem == Cst.SESSIONRESTRICT)
                    {
                        ret = true;
                        break;
                    }
                }
            }
            return ret;
        }

        /// <summary>
        /// Remplace les paramètres PARAM1,PARAM2, etc... par leur valeur
        /// <para>Remplace les mots clefs session par leur valeur (voir SessionTools.ReplaceDynamicConstantsWithValues) </para>
        /// </summary>
        /// <param name="pData"></param>
        /// <param name="pParam"></param>
        /// <returns></returns>
        private static string ReplaceDynamicData(string pData, string[] pParam)
        {
            string ret = pData;
            //
            if (ArrFunc.IsFilled(pParam) && StrFunc.IsFilled(ret))
            {
                for (int i = 0; i < pParam.Length; i++)
                {
                    string param = Cst.PARAM_START + "$" + Cst.PARAM_END;
                    param = param.Replace("$", (i + 1).ToString());
                    ret = ret.Replace(param, pParam[i]);
                }
            }
            //
            ret = SessionTools.ReplaceDynamicConstantsWithValues(ret);
            //
            return ret;
        }

        /// <summary>
        /// Affecte les permission en fonction du menu
        /// </summary>
        /// <param name="pIdMenu"></param>
        /// FI 20090416 création
        /// FI 20120116 Un admin n'a pas nécessairement les droits Create,Modify,Delete etc.. (c'est le cas lorsque la Database est de type READONLY
        public void SetPermission(string pIdMenu)
        {
            if (StrFunc.IsFilled(pIdMenu))
            {
                if ((pIdMenu == "ATTACHEDDOC") || (pIdMenu == "ATTACHEDDOCS"))
                {
                    //Note: 
                    //Il n'existe pas pour l'instant de gestion des permissions sur l'accès aux pièces jointes
                    //Cela peut être gênant, car un user qui n'aurait pas le droit de modifié/supprimé un item 
                    //pourra malgré tout ajouter/supprimer une pièce jointe (cf. TRIM n°3230)
                }
                else
                {
                    //Note: 
                    //Les permissions "FALSE" définies dans le fichier XML sont prioritaires à celles définis via les habilitations.
                    //ici this.Create,etc... est déjà valoriser avec les permissions spécfiées sur le fichier XML oi les lst
                    //
                    RestrictionPermission restrictPermission =
                        new RestrictionPermission(pIdMenu, SessionTools.User);
                    restrictPermission.Initialize(CSTools.SetCacheOn(SessionTools.CS));
                    //
                    if (!restrictPermission.IsCreate)
                        this.Create = false;
                    if (!restrictPermission.IsModify)
                        this.Modify = false;
                    if (!restrictPermission.IsRemove)
                        this.Remove = false;
                    if (!restrictPermission.IsImport)
                        this.Import = false;
                    if ((!restrictPermission.IsEnabledDisabled) && ExistsColumnsDateValidity)
                    {
                        Column[IndexDTENABLED].IsUpdatable.Value = false;
                        Column[IndexDTDISABLED].IsUpdatable.Value = false;
                    }
                    
                }
            }
        }

 


        /// <summary>
        ///  Retourne un compteur avec le nombre d'item dans {pDynamicArgCondition} qui matchent avec les dynamicArgs
        /// </summary>
        /// <param name="pDynamicArgCondition"></param>
        /// <returns></returns>
        private Int32 DynamicArgMatchNumber(ConditionDynamicArg pDynamicArgCondition)
        {
            if (null == pDynamicArgCondition)
                throw new ArgumentNullException("pDynamicArgCondition is null");

            Int32 ret = 0;
            if (pDynamicArgCondition.dynamicArgValueSpecified)
            {
                DynamicArgValue[] dynamicArgValue = pDynamicArgCondition.dynamicArgValue;
                if (ArrFunc.IsFilled(dynamicArgValue))
                {
                    foreach (string key in dynamicArgs.Keys)
                    {
                        int mathResult = dynamicArgValue.Where(item => item.name == key & item.value == dynamicArgs[key].value).Count();
                        ret += mathResult;
                    }
                }
            }
            return ret;
        }

        /// <summary>
        /// Retourne les scripts SQL à exécuter 
        /// <para>pSQL contient une liste de script, seuls certains sont à exécuter.Cela en fonction du contexte (Oracle,SQLServer, sessionRestrict, conditionsystem, etc)</para>
        /// </summary>
        /// <param name="pSQL">Liste des scripts SQL</param>
        /// <param name="pParam"></param>
        /// <param name="pCondApp"></param>
        /// <returns></returns>
        /// FI 20141211 [20563] Refactoring complet, Add parameter pCondApp
        /// FI 20150107 [XXXXX] Modify 
        private string[] GetSqlCommand(ReferentialsReferentialSQLSelect[] pSQL, string[] pParam, string pCondApp)
        {
            //FI 20150107 
            if (StrFunc.IsFilled(pCondApp) && pCondApp == "*")
                throw new NotSupportedException(StrFunc.AppendFormat("CondApp:{0} is not supported. Value:{0} is a keyword", pCondApp));

            string[] ret = null;
            if (ArrFunc.IsEmpty(pSQL))
                return ret;

            List<ReferentialsReferentialSQLSelect> lstSQLSelect = pSQL.Cast<ReferentialsReferentialSQLSelect>().ToList();
            //FI 20150107 Spheres® conserve les select où ConditionApplication="*"
            //Suppression des requêtes qui ne s'appliquent pas vis-à-vis de {pCondApp} 
            if (StrFunc.IsFilled(pCondApp))
                lstSQLSelect.RemoveAll(item => (item.ConditionApplicationSpecified && item.ConditionApplication != "*"
                                                                                   && item.ConditionApplication != pCondApp) ||
                                                    (false == item.ConditionApplicationSpecified));
            else
                lstSQLSelect.RemoveAll(item => (item.ConditionApplicationSpecified && item.ConditionApplication != "*"));

            //Attention La condition SESSIONRESTRICT est à utilisé uniquement avec l'élément SQLSelect 
            //Avec l'élément SQLSelect, par convention, il est prévu que pSQL contient uniquement 2 éléments 
            //- le 1er avec ConditionSystem == SESSIONRESTRICT 
            //- le 2nd sans ConditionSystem
            //Avec l'élément SQLSelect Spheres® ne retient que ler élement de la valeur retour de cette fonction
            if (SessionTools.IsSessionSysAdmin)
                lstSQLSelect.RemoveAll(item => item.ConditionSystemSpecified && item.ConditionSystem == Cst.SESSIONRESTRICT);

            if (TableName.ToUpper() == Cst.OTCml_TBL.PROCESS_L.ToString())
            {
                if (LogTools.GetLogConsultMode() == LogConsultMode.Admin)
                    lstSQLSelect.RemoveAll(item => item.ConditionSystemSpecified && item.ConditionSystem == Cst.SESSIONRESTRICT);
            }

            if (ArrFunc.IsFilled(dynamicArgs))
            {
                //Contrôle => Les conditions sur dynamicArg possèdent obligatoirement les valeurs acceptées et/ou une étiquette
                //Si ce n'est pas le cas Spheres® génère une erreur
                //Les éléments étiquettées uniquement permettent de définir une requête par défaut lorsque dynamicArg ne matchent pas avec les autres éléments de même étiquettage
                var control = lstSQLSelect.Where(item => (item.ConditionDynamicArgSpecified &&
                                                         (item.ConditionDynamicArg.dynamicArgValueSpecified == false) &&
                                                          StrFunc.IsEmpty(item.ConditionDynamicArg.grp))).ToList();
                if (control.Count() > 0)
                    throw new Exception("ConditionDynamicArg is not valid. ConditionDynamicArg must contains dynamicArgValue element or grp attribut");


                //lstSQLSelect contient :
                // - les éléments sans condition sur les dynamicsArgs (élément ConditionDynamicArg absent) ou 
                // - les éléments avec condition sur les dynamicsArgs pour lesquels il n'existe aucun paramétrage des valeurs acceptées mais où il existe nécessairement une étiquette
                // - les éléments avec condition sur les dynamicsArgs où les valeurs acceptées matchent avec les valeurs des dynamicArgs
                lstSQLSelect = lstSQLSelect.Where(item => (item.ConditionDynamicArgSpecified == false) ||
                                                           ((item.ConditionDynamicArg.dynamicArgValueSpecified == false) && StrFunc.IsFilled(item.ConditionDynamicArg.grp)) ||
                                                            DynamicArgMatchNumber(item.ConditionDynamicArg) > 0).ToList();


                List<ReferentialsReferentialSQLSelect> lstSQLSelectTmp = new List<ReferentialsReferentialSQLSelect>();
                List<string> lstGrp = new List<string>();
                foreach (ReferentialsReferentialSQLSelect item in lstSQLSelect)
                {
                    if (item.ConditionDynamicArgSpecified && StrFunc.IsFilled(item.ConditionDynamicArg.grp))
                    {
                        //Parmi les éléments avec condition, Sphere® récupère celle qui matche le plus avec les valeurs des dynamicArgs

                        string grp = item.ConditionDynamicArg.grp;
                        if (false == lstGrp.Contains(grp))
                        {
                            ReferentialsReferentialSQLSelect elementMaxMatch =
                                lstSQLSelect.Where(Element => Element.ConditionDynamicArgSpecified
                                    && StrFunc.IsFilled(Element.ConditionDynamicArg.grp) && Element.ConditionDynamicArg.grp == grp)
                                    .OrderByDescending(arg => DynamicArgMatchNumber(arg.ConditionDynamicArg)).FirstOrDefault();
                            if (null == elementMaxMatch)
                                throw new InvalidProgramException("elementMaxMatch is null");

                            lstSQLSelectTmp.Add(elementMaxMatch);

                            lstGrp.Add(grp);
                        }
                    }
                    else
                    {
                        lstSQLSelectTmp.Add(item);
                    }
                }
                lstSQLSelect = lstSQLSelectTmp;
            }


            string rdbms = string.Empty;
            DbSvrType dbSvrType = DataHelper.GetDbSvrType(SessionTools.CS);
            switch (dbSvrType)
            {
                case DbSvrType.dbORA:
                    rdbms = "oracle";
                    break;
                case DbSvrType.dbSQL:
                    rdbms = "sqlserver";
                    break;
            }

            List<string> lstSqlCommand =
               (from ReferentialsReferentialSQLSelect item in lstSQLSelect
                from ReferentialsReferentialSQLSelectCommand command in item.Command
                where (command.rdbms == rdbms || command.rdbms == "all")
                select command.Value).ToList();

            if (ArrFunc.IsFilled(lstSqlCommand))
            {
                for (int i = 0; i < ArrFunc.Count(lstSqlCommand); i++)
                {
                    if (StrFunc.ContainsIn(lstSqlCommand[i], "%%SELECT_LOGSESSION_PROCESS_L%%"))
                    {
                        QueryParameters queryLog = LogTools.GetQueryForLoadLogBySession(SessionTools.CS, SessionTools.User, SessionTools.SessionID, Cst.OTCml_TBL.PROCESS_L.ToString());
                        if (false == IsUseSQLParameters)
                            lstSqlCommand[i] = lstSqlCommand[i].Replace("%%SELECT_LOGSESSION_PROCESS_L%%", queryLog.GetQueryReplaceParameters(false));
                        else
                            lstSqlCommand[i] = lstSqlCommand[i].Replace("%%SELECT_LOGSESSION_PROCESS_L%%", queryLog.Query);
                    }

                    lstSqlCommand[i] = ReplaceDynamicData(lstSqlCommand[i], pParam);

                    SessionRestrictHelper srH = new SessionRestrictHelper(SessionTools.User, SessionTools.SessionID, IsUseSQLParameters);
                    lstSqlCommand[i] = srH.ReplaceKeyword(lstSqlCommand[i]);

                    // FI 20120803 call of OTCmlHelper.ReplaceKeyword
                    lstSqlCommand[i] = OTCmlHelper.ReplaceKeyword(SessionTools.CS, lstSqlCommand[i]);

                    // FI 20180502 [23926] Appel à ReplaceSQLCriteria
                    lstSqlCommand[i] = ReplaceSQLCriteria(SessionTools.CS, lstSqlCommand[i]);

                    // FI 20201125 [XXXXX] Mise en commentaire et call ReferentialTools.ReplaceDynamicArgsInChooseExpression
                    // FI 20150907 [21312] Appel de StrFuncExtended.ReplaceChooseExpression2 (Fonctionnalité requête dynamique en fonction des Dynamic Arg)
                    //if (this.dynamicArgsSpecified && lstSqlCommand[i].Contains(@"<choose>"))
                    //{
                    //    TypeBuilder dynamicArgsType = new TypeBuilder(SessionTools.CS, (from item in dynamicArgs
                    //                                                                    select item.Value as StringDynamicData).ToList(), "DynamicData", "ReferentialsReferential");
                    //    // EG 20161122 GetNewObject
                    //    lstSqlCommand[i] = StrFuncExtended.ReplaceChooseExpression2(lstSqlCommand[i], dynamicArgsType.GetNewObject(), true);
                    //}

                    lstSqlCommand[i] = ReferentialTools.ReplaceDynamicArgsInChooseExpression(this, lstSqlCommand[i]);
                }
                ret = lstSqlCommand.ToArray();
            }
            return ret;
        }

        /// <summary>
        /// Remplace dans {pData} les DynamicArguments par leur valeurs ou expressions
        /// </summary>
        /// <param name="pCS"></param>
        /// <param name="pData"></param>
        /// <returns></returns>
        /// FI 20200205 [XXXXX] Add 
        public string ReplaceDynamicArgument2(string pCS, string pData)
        {
            string ret = pData;
            if (ArrFunc.IsFilled(this.dynamicArgs))
            {
                foreach (var item in this.dynamicArgs.Values)
                    ret = item.ReplaceInString(pCS, ret);
            }
            return ret;
        }

        /// <summary>
        /// Retourne les scripts qu'il faut exécuter avant le chargement du datagrid
        /// <para>Cette méthode interprète les Dynamics Argument</para>
        /// <para>Retourne null s'il n'existe pas de PreSelect commandes</para>
        /// </summary>
        /// <param name="pCs"></param>
        /// <returns></returns>
        public QueryParameters[] GetSqlPreSelectCommand(string pCs)
        {
            QueryParameters[] ret = null;
            List<QueryParameters> queryParameters = new List<QueryParameters>();
            
            string[] query = this.SQLPreSelectCommand;
            if (ArrFunc.IsFilled(query))
            {
                for (int i = 0; i < ArrFunc.Count(query); i++)
                {
                    query[i] = ReplaceDynamicArgument2(pCs, query[i]);
                    // FI 20201125 [XXXXX] call ConsultationCriteria.ReplaceConsultCriteriaKeyword
                    query[i] = ConsultationCriteria.ReplaceConsultCriteriaKeyword(this, query[i]);
                    queryParameters.Add(ConvertQueryToQueryParameters(pCs, query[i]));
                }
            }

            if (ArrFunc.IsFilled(queryParameters))
            {
                ret = queryParameters.ToArray();
            }
          
            return ret;
        }

        /// <summary>
        /// Retourne la commande sql qui charge le datagrid lorsque SQLSelect est renseigné
        /// <para>Cette méthode interprète les Dynamics Argument</para>
        /// </summary>
        /// <param name="pCs"></param>
        /// <returns></returns>
        public QueryParameters GetSqlSelectCommand(string pCs)
        {
            string query = this.SQLSelectCommand;
            query = ReplaceDynamicArgument2(pCs, query);
            QueryParameters ret = ConvertQueryToQueryParameters(pCs, query);
            return ret;
        }

        /// <summary>
        /// Ajoute une colonne 
        /// </summary>
        /// <param name="pRC"></param>
        public void AddColumn(ReferentialsReferentialColumn pRC)
        {
            List<ReferentialsReferentialColumn> al = new List<ReferentialsReferentialColumn>();
            if (ArrFunc.IsFilled(this.Column))
                al.AddRange(this.Column);
            al.Add(pRC);
            this.Column = al.ToArray();
        }

        /// <summary>
        /// Retourne une requête paramétrée à partir de la requête pQuery
        /// <para>Seuls les dynamicDatas donnent lieu à des Parameters</para>
        /// </summary>
        /// <param name="pCS"></param>
        /// <param name="pQuery"></param>
        /// <returns></returns>
        /// FI 20200810 [XXXXX] Refactoring et gestion de la méthode ToUTC()
        public QueryParameters ConvertQueryToQueryParameters(string pCS, string pQuery)
        {
            string query = pQuery;

            DataParameters parameters = new DataParameters();

            if (IsUseSQLParameters & StrFunc.IsFilled(query))
            {
                if (ArrFunc.IsFilled(this.dynamicArgs))
                {

                    List<Tuple<DataParameter, string>> lstParam = new List<Tuple<DataParameter, string>>();

                    //Spheres® trie la liste du plus long au plus petit
                    List<string> lst = new List<string>(dynamicArgs.Keys);
                    lst.Sort(StrFunc.CompareLength);
                    lst.Reverse();

                    foreach (string key in lst)
                    {
                        if ((dynamicArgs[key].datatype == TypeData.TypeDataEnum.date.ToString()) || (dynamicArgs[key].datatype == TypeData.TypeDataEnum.datetime.ToString()))
                        {
                            if (query.Contains("@" + key + ".ToUTC()"))
                            {
                                string newKey = dynamicArgs[key].name + "UTC";
                                if (null == lstParam.Find(x => x.Item1.ParameterKey == newKey))
                                {
                                    string savName = dynamicArgs[key].name;

                                    dynamicArgs[key].name = newKey;
                                    DataParameter newdataParameter = dynamicArgs[key].GetDataParameter(pCS, null, CommandType.Text, 0, ParameterDirection.Input);
                                    newdataParameter.Value = DtFuncExtended.ConvertTimeToTz(new DateTimeTz(Convert.ToDateTime(newdataParameter.Value), SessionTools.GetCriteriaTimeZone()), "Etc/UTC").Date;

                                    lstParam.Add(new Tuple<DataParameter, string>(newdataParameter, Guid.NewGuid().ToString()));
                                    query = query.Replace("@" + key + ".ToUTC()", lstParam.Find(x => x.Item1.ParameterKey == newKey).Item2);

                                    dynamicArgs[key].name = savName;
                                }
                            }
                        }

                        if (query.Contains("@" + key))
                        {
                            if (null == lstParam.Find(x => x.Item1.ParameterKey == key))
                            {
                                lstParam.Add(new Tuple<DataParameter, string>(dynamicArgs[key].GetDataParameter(pCS, null, CommandType.Text, 0, ParameterDirection.Input), Guid.NewGuid().ToString()));
                                query = query.Replace("@" + key, lstParam.Find(x => x.Item1.ParameterKey == key).Item2);
                            }
                        }
                    }

                    if (lstParam.Count() > 0)
                    {
                        foreach (Tuple<DataParameter, string> item in lstParam)
                        {
                            parameters.Add(item.Item1);
                            query = query.Replace(item.Item2, "@" + item.Item1.ParameterKey);
                        }
                    }
                }

                SessionRestrictHelper srh = new SessionRestrictHelper(SessionTools.User, SessionTools.SessionID, true);
                srh.SetParameter(pCS, query, parameters);
            }

            QueryParameters ret = new QueryParameters(pCS, query, parameters);

            return ret;
        }

        /// <summary>
        /// Retourne l'enregistrement présent ds le jeu de résultat dont la PK vaut {pValueDataKeyField}
        /// <para>Retourne null si l'enregistrement n'existe pas</para>
        /// </summary>
        /// <param name="pValueDataKeyField"></param>
        /// <returns></returns>
        public DataRow GetRow(int pTableIndex, string pDataKeyField, string pValueDataKeyField)
        {
            DataRow ret = null;

            if (IndexDataKeyField > -1)
            {
                if (String.IsNullOrEmpty(pDataKeyField))
                {
                    //La colonne clé est celle du référentiel courant
                    pDataKeyField = Column[IndexDataKeyField].DataField;
                }

                string select = pDataKeyField + "=";

                if (TypeData.IsTypeString(Column[IndexDataKeyField].DataType.value))
                {
                    select += "'" + pValueDataKeyField + "'";
                }
                else
                {
                    select += pValueDataKeyField;
                }

                DataRow[] rows = dataSet.Tables[pTableIndex].Select(select);
                if (ArrFunc.IsFilled(rows))
                {
                    ret = rows[0];
                }
            }
            return ret;
        }
  


        /// <summary>
        ///  Valorise les membres dynamicArgs et xmlDynamicArgs
        /// </summary>
        /// <param name="pDynamicDatas"></param>
        /// FI 20141211 [20563] Rename de la méthode
        /// FI 20200205 [XXXXX] pDynamicDatas est de type Dictionary<string, ReferentialsReferentialStringDynamicData>
        private void SetDynamicArgs(Dictionary<string, ReferentialsReferentialStringDynamicData> pDynamicDatas)
        {
            dynamicArgs = pDynamicDatas;
            dynamicArgsSpecified = ArrFunc.IsFilled(dynamicArgs);
            // FI 20200205 [XXXXX] xmlDynamicArgs n'est plus alimenté
            //xmlDynamicArgs = DynamicDatasToString(pDynamicDatas);
            BuildDynamicDataArgsInstance();
        }


        /// <summary>
        /// Copie this dataRow
        /// </summary>
        /// <returns></returns>
        /// FI 20141021 [20350] Add Method
        public DataRow CoptyDataRow()
        {
            if (null == dataRow)
                throw new NullReferenceException("dataRow is null");

            DataRow ret = null;
            DataTable tblSav = dataSet.Tables[0].Clone();
            tblSav.ImportRow(dataRow);
            ret = tblSav.Rows[0];

            return ret;
        }


        /// <summary>
        ///  Remplacement des expressions %%DH:SQLInstrCriteria%%, %%DH:SQLInstrUnlCriteria%%, %%DH:SQLContractCriteria%%   
        /// </summary>
        /// <param name="pCS"></param>
        /// <param name="pData"></param>
        /// <returns></returns>
        /// FI 20180502 [23926] Add Method
        public string ReplaceSQLCriteria(string pCS, string pData)
        {
            string ret = pData;
            ret = ReplaceSQLInstrCriteria(pCS, ret);
            ret = ReplaceSQLInstrUnlCriteria(pCS, ret);
            ret = ReplaceSQLContractCriteria(pCS, ret);
            return ret;

        }


        /// <summary>
        ///  Remplacement des expressions %%DH:SQLInstrCriteria%%
        /// </summary>
        /// <param name="pCS"></param>
        /// <param name="pData"></param>
        /// <returns></returns>
        /// FI 20180502 [23926] Add Method
        private string ReplaceSQLInstrCriteria(string pCS, string pData)
        {
            string ret = pData;
            if (StrFunc.IsFilled(ret) && (ret.IndexOf(Cst.DH_START) >= 0))
            {
                //Exemple %%DH:SQLInstrCriteria%%(alias,FEE)
                int guard = 0;
                while (ret.Contains(Cst.DH_SQLInstrCriteria) & (guard < 100))
                {
                    guard++;

                    string[] arg = StrFunc.GetArgumentKeyWord(ret, Cst.DH_SQLInstrCriteria);
                    string arg2 = StrFunc.QueryStringData.StringArrayToStringList(arg, false).Replace(";", ",");

                    if (false == (ArrFunc.Count(arg) == 1 || ArrFunc.Count(arg) == 2))
                        throw new InvalidOperationException("%%DH:SQLInstrCriteria%% => invalid number of argument");

                    string sql = "(1=1)";
                    if (dynamicArgsSpecified || (dynamicArgs.ContainsKey("IDI")))
                    {
                        int idI = Convert.ToInt32(dynamicArgs["IDI"].GetDataValue(pCS, null));


                        string alias = arg[0];
                        Nullable<EfsML.Enum.RoleGInstr> role = null;
                        if (ArrFunc.Count(arg) == 2)
                            role = ReflectionTools.ConvertStringToEnum<EfsML.Enum.RoleGInstr>(arg[1]);

                        SQLInstrCriteria sqlInstrCriteria = new SQLInstrCriteria(pCS, null, idI, false, SQL_Table.ScanDataDtEnabledEnum.Yes);
                        sql = sqlInstrCriteria.GetSQLRestriction2(alias, role);
                    }
                    ret = ret.Replace(Cst.DH_SQLInstrCriteria + "(" + arg2 + ")", sql);
                }
                if (guard == 100)
                    throw new Exception("Infinite Loop");
            }
            return ret;
        }

        /// <summary>
        ///  Remplacement des expressions %%DH:SQLInstrUnlCriteria%%
        /// </summary>
        /// <param name="pCS"></param>
        /// <param name="pData"></param>
        /// <returns></returns>
        /// FI 20180502 [23926] Add Method
        private string ReplaceSQLInstrUnlCriteria(string pCS, string pData)
        {
            string ret = pData;
            if (StrFunc.IsFilled(ret) && (ret.IndexOf(Cst.DH_START) >= 0))
            {
                //Exemple %%DH:SQLInstrUnlCriteria%%(alias,FEE)
                int guard = 0;
                while (ret.Contains(Cst.DH_SQLInstrUnlCriteria) & (guard < 100))
                {
                    guard++;

                    string[] arg = StrFunc.GetArgumentKeyWord(ret, Cst.DH_SQLInstrUnlCriteria);
                    string arg2 = StrFunc.QueryStringData.StringArrayToStringList(arg, false).Replace(";", ",");

                    if (false == (ArrFunc.Count(arg) == 1 || ArrFunc.Count(arg) == 2))
                        throw new InvalidOperationException("%%DH:SQLInstrUnlCriteria%% => invalid number of argument");

                    string sql = "(1=1)";
                    if (dynamicArgsSpecified && (dynamicArgs.ContainsKey("IDI_UNL")))
                    {
                        int idIUnl = Convert.ToInt32(dynamicArgs["IDI_UNL"].GetDataValue(pCS, null));

                        string alias = arg[0];
                        Nullable<EfsML.Enum.RoleGInstr> role = null;
                        if (ArrFunc.Count(arg) == 2)
                            role = ReflectionTools.ConvertStringToEnum<EfsML.Enum.RoleGInstr>(arg[1]);

                        SQLInstrCriteria sqlInstrCriteria = new SQLInstrCriteria(pCS, null, idIUnl, true, SQL_Table.ScanDataDtEnabledEnum.Yes);
                        sql = sqlInstrCriteria.GetSQLRestriction2(alias, role);
                    }
                    ret = ret.Replace(Cst.DH_SQLInstrUnlCriteria + "(" + arg2 + ")", sql);
                }
                if (guard == 100)
                    throw new Exception("Infinite Loop");
            }
            return ret;
        }

        /// <summary>
        ///  Remplacement des expressions %%DH:SQLContractCriteria%%
        /// </summary>
        /// <param name="pCS"></param>
        /// <param name="pData"></param>
        /// <returns></returns>
        /// FI 20180502 [23926] Add Method
        private string ReplaceSQLContractCriteria(string pCS, string pData)
        {
            string ret = pData;
            if (StrFunc.IsFilled(ret) && (ret.IndexOf(Cst.DH_START) >= 0))
            {
                //%%DH:SQLContractCriteria%%(col,Fee)
                int guard = 0;
                while (ret.Contains(Cst.DH_SQLContractCriteria) & (guard < 100))
                {
                    guard++;

                    string[] arg = StrFunc.GetArgumentKeyWord(ret, Cst.DH_SQLContractCriteria);
                    string arg2 = StrFunc.QueryStringData.StringArrayToStringList(arg, false).Replace(";", ",");

                    if (false == (ArrFunc.Count(arg) == 1 || ArrFunc.Count(arg) == 2))
                        throw new InvalidOperationException("%%DH:SQLContractCriteria%% => invalid number of argument");

                    Boolean isOk = dynamicArgsSpecified;
                    isOk = isOk && (
                        (dynamicArgs.ContainsKey("IDCONTRACT") && dynamicArgs.ContainsKey("CONTRACTCATEGORY")
                         ||
                        (dynamicArgs.ContainsKey("IDM"))));

                    string sql = "(1=1)";
                    if (isOk)
                    {
                        string alias = arg[0];
                        Nullable<RoleContractRestrict> role = null;
                        if (ArrFunc.Count(arg) == 2)
                            role = ReflectionTools.ConvertStringToEnum<RoleContractRestrict>(arg[1]);

                        if (dynamicArgs.ContainsKey("IDCONTRACT"))
                        {
                            int idC = Convert.ToInt32(dynamicArgs["IDCONTRACT"].GetDataValue(pCS, null));
                            Cst.ContractCategory contractCategory = ReflectionTools.ConvertStringToEnum<Cst.ContractCategory>(dynamicArgs["CONTRACTCATEGORY"].GetDataValue(pCS, null));

                            SQLContractCriteria sqlContractCriteria = new SQLContractCriteria(pCS, null,
                                new Pair<Cst.ContractCategory, int>(contractCategory, idC), 0, SQL_Table.ScanDataDtEnabledEnum.Yes);

                            sql = sqlContractCriteria.GetSQLRestriction(alias, role);
                        }
                        else if (dynamicArgs.ContainsKey("IDM"))
                        {
                            int idM = Convert.ToInt32(dynamicArgs["IDM"].GetDataValue(pCS, null));
                            SQLContractCriteria sqlContractCriteria = new SQLContractCriteria(pCS, null, null, idM, SQL_Table.ScanDataDtEnabledEnum.Yes);
                            sql = sqlContractCriteria.GetSQLRestriction(alias, role);
                        }
                    }

                    ret = ret.Replace(Cst.DH_SQLContractCriteria + "(" + arg2 + ")", sql);
                }
                if (guard == 100)
                    throw new Exception("Infinite Loop");
            }
            return ret;
        }

        /// <summary>
        /// retourne les informations Table et Colonne pour jointurer avec ATTACHEDDOC ou NOTEPAD
        /// <para>Dans 90% des cas {Table}=this.TableName et {Column}=DataKeyField</para>
        /// <para>par exemple</para>
        /// <para>left outer join dbo.ATTACHEDDOC EFSad on (EFSad.TABLENAME='{Table}' and EFSad.ID=tblmain.{Column})</para>
        /// </summary>
        /// FI 20191002 [XXXXX] Add method
        private Pair<String, String> GetLinkedTableAndColumn(LinkedTableEnum pLinkedTableEnum)
        {
            Boolean isExist = false;
            ReferentialsReferentialBooleanEltAndTablenameAttrib elt = null;
            switch (pLinkedTableEnum)
            {
                case LinkedTableEnum.ATTACHEDDOC:
                    isExist = this.AttachedDocSpecified && this.AttachedDoc.Value;
                    elt = AttachedDoc;
                    break;
                case LinkedTableEnum.NOTEPAD:
                    isExist = this.NotepadSpecified && this.Notepad.Value;
                    elt = Notepad;
                    break;
            }

            Pair<String, String> ret = null;
            if (isExist)
            {
                if (m_IndexDataKeyField == -1)
                    throw new InvalidProgramException("m_IndexDataKeyField equal -1 not expected");

                ReferentialsReferentialColumn rrcolumnDataKeyField = Column[m_IndexDataKeyField];
                if (null == rrcolumnDataKeyField)
                    throw new InvalidProgramException("rrcolumnDataKeyField is null");

                Pair<string, string> defaultValue = new Pair<string, string>(this.TableName, rrcolumnDataKeyField.ColumnName);
                ret = defaultValue;
                if (elt.tablenameSpecified)
                {
                    ret.First = elt.tablename;
                    if (elt.IDSpecified)
                        ret.Second = elt.ID;
                }
            }
            return ret;
        }

        /// <summary>
        /// Retourne une nouvelle instance de classe StringDynamicDataArgs (génération en runtime en fonction des dynamicArgs)
        /// </summary>
        /// FI 20201201 [XXXXX] Add
        public void BuildDynamicDataArgsInstance()
        {
            TypeBuilder dynamicArgsType = new TypeBuilder(SessionTools.CS, (from item
                                                                                   in dynamicArgs
                                                                            select item.Value as StringDynamicData).ToList(), "DynamicDataArgs", "ReferentialsReferential");
            DynamicDataArgsInstance = dynamicArgsType.GetNewObject();
        }

        /// <summary>
        ///  Suppression des jointures left outer join non utilisées ou remplacement des jointures left outer join par des inner join en présence de filtre sur la table initailement mise en jointure externe 
        ///  <para>Ces remplacements s'appliquent uniquement aux jointures simples (sans sous select par exemple : Exemple left outer join dbo.DERIVATIVECONTRACT dc on (dc.IDDC = da.IDDC)) </para>
        /// </summary>
        /// FI 20201201 [XXXXX] Add
        void ReplaceLeftOuterJoin()
        {


            /* Exemple
            La requête initiale est  
            left outer join dbo.ASSET_ETD a_etd on (a_etd.IDASSET = t.IDASSET) and(t.ASSETCATEGORY = 'ExchangeTradedContract')
            left outer join dbo.VW_ASSET_COMMODITY_EXPANDED a_com on (a_com.IDASSET=t.IDASSET) and (t.ASSETCATEGORY='Commodity')
            left outer join dbo.ASSET_EQUITY a_eqty on (a_eqty.IDASSET=<aliasTable>.IDASSET) and (t.ASSETCATEGORY='Equity')
            left outer join dbo.DERIVATIVEATTRIB da on (da.IDDERIVATIVEATTRIB = a_etd.IDDERIVATIVEATTRIB)
            left outer join dbo.DERIVATIVECONTRACT dc on (dc.IDDC = da.IDDC)
            left outer join dbo.MATURITY ma on (ma.IDMATURITY = da.IDMATURITY)
            
            S'il existe les filtres suivants [Produit] Identifiant=exchangeTradedDerivative et [Actif] Echéance (ETD)=201706 
            La requête initiale est transformée en
            inner join dbo.ASSET_ETD a_etd on (a_etd.IDASSET = t.IDASSET) and (t.ASSETCATEGORY = 'ExchangeTradedContract')
            (Rq: les jointures sur VW_ASSET_COMMODITY_EXPANDE et ASSET_EQUITY sont supprimées s'il n'existe aucune colonne, filtre ou tir sur les alias a_com a_eqty)
            (Rq:inner join puisque jointure inner entre ma et da et puisqu'il existe un filtre sur ma)
            inner join dbo.DERIVATIVEATTRIB da on (da.IDDERIVATIVEATTRIB = a_etd.IDDERIVATIVEATTRIB)  
            left outer join dbo.DERIVATIVECONTRACT dc on (dc.IDDC = da.IDDC)
            (Rq:inner join puisqu'il existe un filtre sur ma)
            inner join dbo.MATURITY ma on (ma.IDMATURITY = da.IDMATURITY) 
            inner join dbo.INSTRUMENT i on (i.IDI = t.IDI)
            inner join dbo.PRODUCT p on (p.IDP = i.IDP)
            where ....
               and (p.IDENTIFIER = 'exchangeTradedDerivative')
               and (ma.MATURITYMONTHYEAR = '201706')
            */

            if (SQLJoinSpecified)
            {
                string pattern = $"^(\\s*left outer join\\s+dbo\\.\\w+\\s+(\\w+)\\s+on\\s+.+)$";
                Regex regex = new Regex(pattern, RegexOptions.Multiline | RegexOptions.IgnoreCase);
                //Exemple Cette regex match dans l'exemple suivant
                /*
                  left outer join dbo.ASSET_ETD a_etd on (a_etd.IDASSET=t.IDASSET) and (t.ASSETCATEGORY='ExchangeTradedContract') 
                  left outer join dbo.ASSET_ETD a_etd on (a_etd.IDASSET=t.IDASSET) and (t.ASSETCATEGORY='ExchangeTradedContract') 
                  left outer join dbo.VW_ASSET_COMMODITY_EXPANDED a_com on (a_com.IDASSET=t.IDASSET) and (t.ASSETCATEGORY='Commodity')
                  (\\w+) permet d'obtenir l'alias
                 */

                List<string> SQLJoinNew = new List<string>();
                SQLJoin.Reverse().ToList().ForEach(x =>
                {
                    if ((false == x.Contains("select")) && regex.IsMatch(x))
                    {
                        Match match = regex.Match(x);
                        while (match.Success)
                        {
                            string alias = match.Groups[2].Value;
                            string join = match.Groups[1].Value;

                            Boolean isAliasUsed = (SQLJoinNew.Where(y => y.Contains($" {alias}.") || y.Contains($"={alias}.")).FirstOrDefault() != null);
                            isAliasUsed = isAliasUsed || ((Column.Where(y => y.ColumnNameOrColumnSQLSelectSpecified && (y.ColumnNameOrColumnSQLSelect.Contains($" {alias}.") || y.ColumnNameOrColumnSQLSelect.StartsWith($"{alias}."))).FirstOrDefault() != null));
                            isAliasUsed = isAliasUsed || ((Column.Where(y => y.AliasTableNameSpecified && y.AliasTableName == ($"{alias}")).FirstOrDefault() != null));
                            isAliasUsed = isAliasUsed || (SQLWhereSpecified && (SQLWhere.Where(y => y.ColumnNameOrColumnSQLSelectSpecified && (y.ColumnNameOrColumnSQLSelect.Contains($" {alias}.") || y.ColumnNameOrColumnSQLSelect.StartsWith($"{alias}."))).FirstOrDefault()) != null);
                            isAliasUsed = isAliasUsed || (SQLRowStateSpecified && (SQLRowState.Value.Contains($" {alias}.") || SQLRowState.Value.StartsWith($"{alias}.")));
                            isAliasUsed = isAliasUsed || (SQLRowStyleSpecified && (SQLRowStyle.Value.Contains($" {alias}.") || SQLRowStyle.Value.StartsWith($"{alias}.")));

                            if (!isAliasUsed)
                            {
                                // Suppression de la jointure left outer join non utilisée
                                x = x.Replace(join, string.Empty);
                            }
                            else if (SQLWhereSpecified)
                            {
                                /*
                                // Remplacement de la jointure left outer join par inner join en cas de présence d'un filtre (*) 
                                (*) sauf s'il existe alias.COLUMN is null
                                */
                                Boolean existFilterNotnull = (SQLWhere.Where(y => y.ColumnNameOrColumnSQLSelectSpecified && (y.ColumnNameOrColumnSQLSelect.StartsWith($"{alias}.") &&
                                                           !(y.LstValueSpecified && y.LstValue == "null" && y.OperatorSpecified && y.Operator == "="))).FirstOrDefault() != null);

                                /*
                                // Remplacement de la jointure left outer join par inner join si la jointure fait référence à une table mise en jointure inner join du fait de la présence d'un filtre
                                */
                                string regexAliasUsedInInner = pattern.Replace("left outer join", "inner join").Replace(")$", $"=\\s*{alias}.+)$");
                                Boolean isAliasUsedInInner = (SQLJoinNew.Where(y => Regex.IsMatch(y, regexAliasUsedInInner, RegexOptions.Multiline | RegexOptions.IgnoreCase)).FirstOrDefault() != null);

                                if (existFilterNotnull || isAliasUsedInInner)
                                {
                                    string regexReplace = pattern.Replace("(\\w+)", $"({alias})");
                                    x = Regex.Replace(x, regexReplace, new MatchEvaluator(this.ReplaceLefJointByInnerjoin), RegexOptions.Multiline | RegexOptions.IgnoreCase);
                                }
                            }
                            match = match.NextMatch();
                        }
                    }
                    SQLJoinNew.Add(x);
                });
                SQLJoinNew.Reverse();
                SQLJoin = SQLJoinNew.ToArray();
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="m"></param>
        /// <returns></returns>
        private string ReplaceLefJointByInnerjoin(Match m)
        {
            return m.Value.Replace("left outer join", "inner join");
        }


        /// <summary>
        /// 
        /// </summary>
        /// FI 20201201 [XXXXX] Add
        private void ReplaceDynamicArgsInChooseExpression()
        {

            List<Task> tasks = new List<Task>();
            tasks.Add(
                Task.Run(() =>
                    Column.Where(y => y.ColumnNameOrColumnSQLSelectSpecified).ToList().ForEach(item =>
                    {
                        item.ColumnNameOrColumnSQLSelect = ReferentialTools.ReplaceDynamicArgsInChooseExpression(this, item.ColumnNameOrColumnSQLSelect).Trim();
                    })
                ));
            if (SQLJoinSpecified)
            {
                tasks.Add(
                    Task.Run(() =>
                        SQLJoin = SQLJoin.Select(x => ReferentialTools.ReplaceDynamicArgsInChooseExpression(this, x)).ToArray()
                ));
            }
            if (SQLWhereSpecified)
            {
                tasks.Add(
                    Task.Run(() =>
                        SQLWhere.Where(x => x.ColumnNameSpecified).ToList().ForEach(item =>
                        {
                            if (item.ColumnSQLWhereSpecified)
                                item.ColumnSQLWhere = ReferentialTools.ReplaceDynamicArgsInChooseExpression(this, item.ColumnSQLWhere);

                            if (item.ColumnNameOrColumnSQLSelectSpecified)
                                item.ColumnNameOrColumnSQLSelect = ReferentialTools.ReplaceDynamicArgsInChooseExpression(this, item.ColumnNameOrColumnSQLSelect);
                        })
                    ));

                tasks.Add(
                    Task.Run(() =>
                        SQLWhere.Where(x => x.SQLWhereSpecified || x.SQLJoinSpecified).ToList().ForEach(item =>
                        {
                            if (item.SQLWhereSpecified)
                                item.SQLWhere = ReferentialTools.ReplaceDynamicArgsInChooseExpression(this, item.SQLWhere);

                            if (item.SQLJoinSpecified)
                            {
                                for (int i = 0; i < ArrFunc.Count(item.SQLJoin); i++)
                                    item.SQLJoin[i] = ReferentialTools.ReplaceDynamicArgsInChooseExpression(this, item.SQLJoin[i]);
                            }
                        })
                    ));
            }
            if (SQLOrderBySpecified)
            {
                tasks.Add(
                    Task.Run(() =>
                        SQLOrderBy.Where(y => y.ColumnNameOrColumnSQLSelectSpecified).ToList().ForEach(item =>
                        {
                            item.Value = ReferentialTools.ReplaceDynamicArgsInChooseExpression(this, item.Value).Trim();
                        })
                    ));
            }

            try
            {
                Task.WaitAll(tasks.ToArray());
            }
            catch (AggregateException ae)
            {
                throw ae.Flatten();
            }

        }

        /// <summary>
        ///  Ajout du DA ISWITHINCOMPLETETRADE si consultation TRADEFnO_ALLOC
        /// </summary>
        /// FI 20201201 [XXXXX] Add
        private void InitDynamicArgsFilter_ISWITHINCOMPLETETRADE()
        {
            if (IsConsultation && IdLstConsult == LstConsult.ConsultEnum.TRADEFnO_ALLOC.ToString())
            {

                bool isRegularOnly = false; // Default when no filter on activation Satatus

                if (SQLWhereSpecified)
                {
                    string aliastrade = "t";
                    string columnName = "IDSTACTIVATION";

                    ReferentialsReferentialSQLWhere sqlWhere = SQLWhere.Where(item => item.ColumnNameSpecified && item.TableNameSpecified && item.AliasTableNameSpecified &&
                                                                                  item.ColumnName == columnName && item.TableName == "TRADE" && item.AliasTableName == aliastrade).FirstOrDefault();
                    if (null != sqlWhere)
                    {

                        SQL_ColumnCriteria sql_ColumnCriteria = SQLReferentialData.GetSQL_ColumnCriteria(SessionTools.CS, sqlWhere, this);
                        SQL_Criteria sql_Criteria = new SQL_Criteria(new SQL_ColumnCriteria[] { sql_ColumnCriteria }, SystemSettings.IsCollationCI());
                        isRegularOnly = sql_Criteria.IsExistFilterOnValueOnly(SessionTools.CS, aliastrade, columnName, $"{Cst.STATUSREGULAR}");
                    }
                }

                AddBoolFilterToDynamicArgs("ISWITHINCOMPLETETRADE", (false == isRegularOnly));
            }
        }
        /// <summary>
        ///  Ajout du DA ISWITHOPP2 sur certaines consultations (TRADE_ALLOC, POSACTION, FLOWBYTRADE )
        /// </summary>
        private void InitDynamicArgsFilter_ISWITHOPP2()
        {
            if (IsConsultation)
            {
                // FI 20181113 [XXXXX] Add Alimentation du ISWITHOPP2 en fonction de la présence ou non de colonnes en Devise2
                if (IdLstConsult == LstConsult.ConsultEnum.TRADEFnO_ALLOC.ToString() ||
                    IdLstConsult == LstConsult.ConsultEnum.TRADEOTC_ALLOC.ToString() ||
                    IdLstConsult == LstConsult.ConsultEnum.FLOWSBYTRADE_ALLOC.ToString() ||
                    IdLstConsult == LstConsult.ConsultEnum.FLOWSBYTRADEOTC_ALLOC.ToString() ||
                    IdLstConsult == LstConsult.ConsultEnum.POSACTIONDET.ToString() ||
                    IdLstConsult == LstConsult.ConsultEnum.POSACTIONDET_OTC.ToString()
                    )
                {
                    Regex regEx = new Regex(@"^OPP\w+2$", RegexOptions.IgnoreCase);

                    bool isExistOpp2 = (null != this.Column.FirstOrDefault(x => regEx.IsMatch(x.ColumnName)));
                    if (false == isExistOpp2 && this.SQLWhereSpecified)
                        isExistOpp2 = (null != this.SQLWhere.FirstOrDefault(x => x.ColumnNameSpecified && regEx.IsMatch(x.ColumnName)));
                    if (false == isExistOpp2 && this.SQLOrderBySpecified)
                        isExistOpp2 = (null != this.SQLOrderBy.FirstOrDefault(x => regEx.IsMatch(x.ColumnName)));

                    AddBoolFilterToDynamicArgs("ISWITHOPP2", isExistOpp2);

                }
            }
        }

        /// <summary>
        ///  Ajout du DA ISWITHLOVUMG si consultation POSSYNT_ALLOC
        /// </summary>
        private void InitDynamicArgsFilter_ISWITHLOVUMG()
        {
            if (IsConsultation && (this.IdLstConsult == LstConsult.ConsultEnum.POSSYNT_ALLOC.ToString()))
            {
                //Cas spécifique à la "Consultation synthétique des positions" (ETD)
                bool isExistColumnOnLOVorUMGAmount = (null != this.Column.FirstOrDefault(x => (x.AliasTableName == "possynt_amt")));

                AddBoolFilterToDynamicArgs("ISWITHLOVUMG", isExistColumnOnLOVorUMGAmount);
            }
        }
        /// <summary>
        ///  Ajout des arguments IDASSET, IDB_DEALER, IDB_CLEARER ,ACTORSIDE_ITEM si consultation d'une position détaillée à partir d'une postion synthétique 
        /// </summary>
        /// FI 20201214 [XXXXX] Add
        private void InitDynamicArgsFilter_PosDet()
        {
            if (IsConsultation && (this.IdLstConsult == LstConsult.ConsultEnum.POSDET_ALLOC.ToString()))
            {
                if (StrFunc.IsFilled(this.ValueForeignKeyField))
                {
                    string[] FKValues = ValueForeignKeyField.Split('|'); // Lecture de la clé de la position synthétique et extraction des données IDASSET, IDB_DEALER et IDB_CLEARER
                    string actorsideItem = FKValues[0];

                    //ACTORSIDE_ITEM
                    dynamicArgs.Add("ACTORSIDE_ITEM", new ReferentialsReferentialStringDynamicData(TypeData.TypeDataEnum.integer.ToString(), "ACTORSIDE_ITEM", actorsideItem)
                    {
                        source = DynamicDataSourceEnum.RUNTIME
                    });

                    //IDASSET
                    dynamicArgs.Add("IDASSET", new ReferentialsReferentialStringDynamicData(TypeData.TypeDataEnum.integer.ToString(), "IDASSET", FKValues[2])
                    {
                        source = DynamicDataSourceEnum.RUNTIME
                    });

                    if (actorsideItem == "1")
                    {
                        //IDB_DEALER
                        string idBookDealer = FKValues[3];
                        dynamicArgs.Add("IDB_DEALER", new ReferentialsReferentialStringDynamicData(TypeData.TypeDataEnum.integer.ToString(), "IDB_DEALER", idBookDealer)
                        {
                            source = DynamicDataSourceEnum.RUNTIME
                        });
                    }

                    //IDB_CLEARER
                    string idBookClearer = (actorsideItem == "1") ? FKValues[4] : FKValues[3];
                    dynamicArgs.Add("IDB_CLEARER", new ReferentialsReferentialStringDynamicData(TypeData.TypeDataEnum.integer.ToString(), "IDB_CLEARER", idBookClearer)
                    {
                        source = DynamicDataSourceEnum.RUNTIME
                    });
                }
            }
        }

        /// <summary>
        /// Initiale SQLWhere
        /// </summary>
        /// <param name="pParam"></param>
        /// FI 20210721 [XXXXX] Add (Replace InitializeSQLWhere)
        private void InitializeSQLWhere2(string[] pParam)
        {
            if (ArrFunc.IsFilled(SQLWhere))
            {
                for (int index = 0; index < SQLWhere.Length; index++)
                {
                    if (SQLWhere[index].ConditionSystemSpecified && SQLWhere[index].ConditionSystem == Cst.SESSIONRESTRICT)
                    {
                        if (SQLWhere[index].SQLWhereSpecified)
                        {
                            if (SQLWhere[index].SQLWhere.TrimStart().StartsWith(Cst.SR_START))
                            {
                                SessionRestrictHelper srH = new SessionRestrictHelper(SessionTools.User, SessionTools.SessionID, this.IsUseSQLParameters);
                                string join = null;
                                string where = null;
                                string[] arg = null;
                                string alias1 = string.Empty;
                                string alias2 = string.Empty;
                                AddMissingTrade addTradeMissing = AddMissingTrade.no;

                                switch (SQLWhere[index].SQLWhere)
                                {
                                    case Cst.SR_TRADE_WHERE_PREDICATE:
                                        // FI 20141107 [20441] 
                                        arg = StrFunc.GetArgumentKeyWord(SQLWhere[index].SQLJoin[0], Cst.SR_TRADE_JOIN);
                                        if (ArrFunc.Count(arg) >= 2)
                                            alias1 = arg[1];
                                        // FI 20160810 [22086] add addTradeMissing 
                                        if (ArrFunc.Count(arg) >= 3)
                                            addTradeMissing = ReflectionTools.ConvertStringToEnumOrDefault<AddMissingTrade>(arg[2], AddMissingTrade.no);

                                        srH.GetSQLTrade(arg[0], alias1, addTradeMissing, out join, out where);

                                        SQLWhere[index].SQLWhere = where;
                                        break;
                                    case Cst.SR_TRADEALLOC_WHERE_PREDICATE:
                                        // FI 20141107 [20441] 
                                        arg = StrFunc.GetArgumentKeyWord(SQLWhere[index].SQLJoin[0], Cst.SR_TRADEALLOC_JOIN);
                                        alias1 = string.Empty;
                                        if (ArrFunc.Count(arg) >= 2)
                                            alias1 = arg[1];
                                        alias2 = string.Empty;
                                        if (ArrFunc.Count(arg) >= 3)
                                            alias2 = arg[2];
                                        // FI 20160810 [22086] add addMissingTrade
                                        if (ArrFunc.Count(arg) >= 4)
                                            addTradeMissing = ReflectionTools.ConvertStringToEnumOrDefault<AddMissingTrade>(arg[3], AddMissingTrade.no);
                                        srH.GetSQLTradeAlloc(arg[0], alias1, alias2, addTradeMissing, out join, out where);
                                        SQLWhere[index].SQLWhere = where;
                                        break;
                                    case Cst.SR_TRADERISK_WHERE_PREDICATE:
                                        arg = StrFunc.GetArgumentKeyWord(SQLWhere[index].SQLJoin[0], Cst.SR_TRADERISK_JOIN);
                                        alias1 = string.Empty;
                                        if (ArrFunc.Count(arg) >= 2)
                                            alias1 = arg[1];
                                        srH.GetSQLTradeRisk(arg[0], alias1, out join, out where);
                                        SQLWhere[index].SQLWhere = where;
                                        break;
                                    case Cst.SR_TRADEADMIN_WHERE_PREDICATE:
                                        arg = StrFunc.GetArgumentKeyWord(SQLWhere[index].SQLJoin[0], Cst.SR_TRADEADMIN_JOIN);
                                        alias1 = string.Empty;
                                        if (ArrFunc.Count(arg) >= 2)
                                            alias1 = arg[1];
                                        srH.GetSQLTradeAdmin(AliasTableName + ".IDT", alias1, out join, out where);
                                        SQLWhere[index].SQLWhere = where;
                                        break;
                                    case Cst.SR_TRADEDEBTSEC_WHERE_PREDICATE:
                                        arg = StrFunc.GetArgumentKeyWord(SQLWhere[index].SQLJoin[0], Cst.SR_TRADEADMIN_JOIN);
                                        alias1 = string.Empty;
                                        if (ArrFunc.Count(arg) >= 2)
                                            alias1 = arg[1];
                                        srH.GetSQLTradeDebtSec(AliasTableName + ".IDT", alias1, out join, out where);
                                        SQLWhere[index].SQLWhere = where;
                                        break;
                                    case Cst.SR_POSCOLLATERAL_WHERE_PREDICATE:
                                        srH.GetSQLPosCollateral(AliasTableName, out join, out where);
                                        SQLWhere[index].SQLWhere = where;
                                        break;
                                }
                            }
                        }
                        //
                        if ((SQLWhere[index].SQLJoinSpecified))
                        {
                            for (int i = 0; i < ArrFunc.Count(SQLWhere[index].SQLJoin); i++)
                            {
                                if (StrFunc.IsFilled(SQLWhere[index].SQLJoin[i]) &&
                                    SQLWhere[index].SQLJoin[i].TrimStart().StartsWith(Cst.SR_START))
                                {
                                    SessionRestrictHelper srH = new SessionRestrictHelper(SessionTools.User, SessionTools.SessionID, IsUseSQLParameters);
                                    SQLWhere[index].SQLJoin[i] = srH.ReplaceKeyword(SQLWhere[index].SQLJoin[i]);
                                }
                            }
                        }
                    }

                    if (SQLWhere[index].SQLWhereSpecified)
                        SQLWhere[index].SQLWhere = ReplaceDynamicData(SQLWhere[index].SQLWhere, pParam);
                    if (SQLWhere[index].LstValueSpecified)
                        SQLWhere[index].LstValue = ReplaceDynamicData(SQLWhere[index].LstValue, pParam);
                    if (SQLWhere[index].SQLJoinSpecified)
                    {
                        for (int i = 0; i < SQLWhere[index].SQLJoin.Length; i++)
                            SQLWhere[index].SQLJoin[i] = ReplaceDynamicData(SQLWhere[index].SQLJoin[i], pParam);
                    }
                }
            }
        }

        /// <summary>
        /// Suppression des SQLWhere qui ne s'applique pas 
        /// </summary>
        /// <param name="pCondApp">Condition courante (null accepté)</param>
        /// FI 20210721 [XXXXX]Add
        private void RemoveUnusedSQLWhere(string pCondApp)
        {
            if (ArrFunc.IsFilled(SQLWhere))
            {
                for (int index = 0; index < SQLWhere.Length; index++)
                {
                    if (StrFunc.IsFilled(SQLWhere[index].ConditionApplication))
                    {
                        //lorsque ConditionApplication du where ne correspond pas au contexte retrait des infos
                        //ie  il n'existe pas de pCondApp ou ConditionApplication n'existe pas ds pCondApp
                        if (StrFunc.IsEmpty(pCondApp) || (pCondApp != SQLWhere[index].ConditionApplication))
                            SQLWhere[index] = null;
                    }
                    //
                    if (SQLWhere[index] != null)
                    {
                        if (StrFunc.IsFilled(SQLWhere[index].ConditionSystem))
                        {
                            switch (SQLWhere[index].ConditionSystem)
                            {
                                case Cst.SESSIONRESTRICT:
                                    //FI 20141107 call method User.IsApplySessionRestrict()
                                    if (false == SessionTools.User.IsApplySessionRestrict())
                                        SQLWhere[index] = null;
                                    break;
                            }
                        }
                    }
                }

                //FI 20141201 [20533] Call ReflectionTools.RemoveItemInArray de manière à supprimer les items qui sont à null
                for (int i = 0; i < ArrFunc.Count(SQLWhere); i++)
                {
                    if (null == SQLWhere[i])
                        ReflectionTools.RemoveItemInArray(this, "SQLWhere", i);
                }
            }
        }




        #endregion
    }




    #region class ReferentialsReferentialBooleanEltAndTablenameAttrib
    public class ReferentialsReferentialBooleanEltAndTablenameAttrib
    {
        [System.Xml.Serialization.XmlTextAttribute()]
        public bool Value;



        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string viewName;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool viewNameSpecified;



        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tablename;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool tablenameSpecified;

        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ID;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IDSpecified;
    }
    #endregion class ReferentialsReferentialBooleanEltAndTablenameAttrib

    /// <summary>
    /// Représente une ressource qui définie un ReferentialsReferentialSQLSelect
    /// </summary>
    public class ReferentialsReferentialSQLSelectResource
    {
        /// <summary>
        /// Nom de la ressource
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string name;
    }

    /// <summary>
    /// Représente un array de commande SQL de type ReferentialsReferentialSQLSelect
    /// </summary>
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", ElementName = "sqlCommands", IsNullable = false)]
    public class ReferentialsReferentialSQLSelects
    {
        /// <summary>
        /// Représente une liste de requête 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("sqlCommand", IsNullable = false, Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialSQLSelect[] item;
    }

    /// <summary>
    /// Représente un array de commande SQL de type ReferentialsReferentialSQLSelect ou une resource incorposée qui permet d'accéder à un array de commande SQL de type ReferentialsReferentialSQLSelect
    /// </summary>
    /// FI 20121219 Cadeau de noel pour Spheres®
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", ElementName = "SQLSelectOrResource", IsNullable = false)]
    public class SQLSelectOrResource
    {
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLSelectSpecified;
        /// <summary>
        /// Représente la commande Select exécutée pour charger les données ds le grid
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("SQLSelect", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialSQLSelect[] SQLSelect;

        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLSelectResourceSpecified;
        /// <summary>
        /// Définie la resource qui permet d'obtenir SQLSelect 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("SQLSelectResource", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialSQLSelectResource SQLSelectResource;

    }

    /// <summary>
    /// Représente une condition sur les dynamics Arguments
    /// </summary>
    /// FI 20141211 [20563] Add class
    public class ConditionDynamicArg
    {
        /// <summary>
        ///  Etiquetage de la condition
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string grp;


        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dynamicArgValueSpecified;
        /// <summary>
        /// Représente la liste des valeurs acceptées
        /// <para>Si non renseigné, toutes les valeurs sont acceptées</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("DynamicArgValue", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public DynamicArgValue[] dynamicArgValue;

    }

    /// <summary>
    /// Représente la valeur d'un Dynamic Argument
    /// <para>Rappel Les dynamic Argument sont générés à partir des contôles GUI ou à partir de l'URL (&DA=)</para>
    /// </summary>
    /// FI 20141211 [20563] Add class
    public class DynamicArgValue
    {
        /// <summary>
        /// Représente l'identifiant du Dynamic Argument
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name;

        /// <summary>
        /// Représente la valeur du Dynamic Argument
        /// </summary>
        [System.Xml.Serialization.XmlText()]
        public string @value;

    }



    /// <summary>
    /// Représente un array de commande SQL
    /// <para>chaque Commande peut être spécifique à une condition d'application</para>
    /// <para>chaque Commande peut être spécifique à une condition système</para>
    /// <para>chaque Commande est spécifique à une type de SGBD système</para>
    /// </summary>
    public class ReferentialsReferentialSQLSelect
    {



        /// <summary>
        ///  Lorsque renseigné, signifie que les requêtes SQL s'appliquent uniquement pour la condition spécifiée
        ///  <para>S'il n'existe pas de condition ou si la condition est différente de {ConditionApplication} Spheres® ignorent les requêtes ici déclérées</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ConditionApplication;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConditionApplicationSpecified;

        /// <summary>
        ///  FI (Usage très particulier .....)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ConditionSystem;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConditionSystemSpecified;

        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ConditionDynamicArg ConditionDynamicArg;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConditionDynamicArgSpecified;

        /// <summary>
        /// Représente n requêtes  
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialSQLSelectCommand[] Command;
    }

    /// <summary>
    /// Représente une commande SQL 
    /// </summary>
    public class ReferentialsReferentialSQLSelectCommand
    {
        /// <summary>
        /// type de SGBD associée à la commande SQL
        /// <para>valeurs possibles: all, oracle, sqlserver</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string rdbms;
        /// <summary>
        /// Commande SQL
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }

    // EG 20200720 [XXXXX] Nouvelle interface GUI v10 (Mode Noir ou blanc)
    public class ReferentialButton
    {
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string title;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string url;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tooltip;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool tooltipSpecified;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string bkgcolor;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool bkgcolorSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string color;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool colorSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string faclass;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool faclassSpecified;
    }

    public class ReferentialItemTableName
    {
        /// <summary>
        /// TableName
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;

        /// <summary>
        /// ColumnName
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string itemcolumnname;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool itemcolumnnameSpecified;

        /// <summary>
        /// Number of columns displayed by row 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int columnbyrow;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool columnbyrowSpecified;
    }
    // EG 20210304 [XXXXX] Relooking Referentiels
    // EG 20210304 [XXXXX] Relooking Referentiels - Ajout ContainerOverflow
    public class ReferentialItems
    {
        /// <summary>
        /// Source table name
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string srctablename;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool srctablenameSpecified;

        /// <summary>
        /// Target table name
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tablename;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool tablenameSpecified;

        /// <summary>
        /// Target column name
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string columnname;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool columnnameSpecified;

        /// <summary>
        /// Additional columns name not null or necessary to unique key
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string addcolumns;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool addcolumnsSpecified;

        //PL 20170913 [23409] Newness
        /// <summary>
        /// Specif column key in Target table (ex. CONTRACTG --> IDXC instead of IDDC and IDCC)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string datacolumnname;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool datacolumnnameSpecified;
        /// <summary>
        /// Additional column key (ex. CONTRACTG --> CONTRACTCATEGORY)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string addcolumnkey;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool addcolumnkeySpecified;
        /// <summary>
        /// Value for additional column key (ex. CONTRACTG --> "DerivativeContract", "CommodityContract")
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string addcolumnkeyvalue;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool addcolumnkeyvalueSpecified;

        /// <summary>
        /// Mode
        /// <para>RW: Read Write - Affichage des informations en lecture/écriture</para>
        /// <para>RO: Read Only - Affichage des informations en lecture seule</para>
        /// <para>SO: Selected Only - Affichage uniquement des informations sélectionnées et en lecture seule</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string mode;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool modeSpecified;

        [System.Xml.Serialization.XmlElementAttribute("html_BLOCK", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnhtml_BLOCK html_BLOCK;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool html_BLOCKSpecified;

        [System.Xml.Serialization.XmlElementAttribute("ContainerOverflow", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialContainerOverflow ContainerOverflow;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ContainerOverflowSpecified;

    }

    public class ReferentialsReferentialSQLOrderBy
    {
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string ColumnName;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string Alias;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string DataType;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ColumnNotInReferential;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GroupBySpecified;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ReferentialsReferentialColumnGroupBy GroupBy;
        //
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ColumnNameOrColumnSQLSelect;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ColumnNameOrColumnSQLSelectSpecified;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string GroupBySort;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string GroupBySortWithAlias;
        //
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string ValueWithAlias;
    }

    /// <summary>
    /// 
    /// </summary>
    public class ReferentialsReferentialSQLRowStyle
    {
        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string type;

        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }

    /// <summary>
    /// 
    /// </summary>
    public class ReferentialsReferentialSQLRowState
    {
        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string headerText;
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }

    /// <summary>
    /// 
    /// </summary>
    public class ReferentialsReferentialSQLWhere
    {
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ConditionApplication;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConditionApplicationSpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ConditionSystem;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConditionSystemSpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string AliasTableName;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AliasTableNameSpecified;

        /// <summary>
        ///  Table associée à AliasTableName
        ///  <para>Rq si LST cette table représente une table LST (Ce n'est pas nécessairement une table Physique (Exemple: ASSET_ETD_ESE_COM)</para>
        /// </summary>
        /// FI 20201127 [XXXXX] Add
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TableName;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TableNameSpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ColumnName;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ColumnNameSpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string LstValue;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LstValueSpecified;

        /// <summary>
        /// 
        /// </summary>
        /// FI 20190327 [24603] DataType est désormais de type  ReferentialsReferentialColumnDataType
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnDataType DataType;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DataTypeSpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Operator;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OperatorSpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SQLWhere;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLWhereSpecified;

        [System.Xml.Serialization.XmlElementAttribute("SQLJoin", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] SQLJoin;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLJoinSpecified;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ColumnSQLWhereSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ColumnSQLWhere;
        //
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ColumnNameOrColumnSQLSelect;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ColumnNameOrColumnSQLSelectSpecified;

    }

    /// <summary>
    /// 
    /// </summary>
    /// // EG 20110104 Add controlEdit/controlEditSpecified
    [System.Xml.Serialization.XmlRootAttribute("Column", Namespace = "", IsNullable = false)]
    // EG 20200720 [XXXXX] Nouvelle interface GUI v10 (Mode Noir ou blanc)
    public class ReferentialsReferentialColumn
    {
        public ReferentialsReferentialColumn()
        {
            this.IsOrderBy = new ReferentialsReferentialColumnIsOrderBy();
            this.IsIdentity = new ReferentialsReferentialColumnIsIdentity();
            this.DataType = new ReferentialsReferentialColumnDataType();

        }

        #region Members
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string color;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool colorSpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int ColumnPositionInDataGrid;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ColumnPositionInDataGridSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ColumnName;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ColumnNameOrColumnSQLSelect;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ColumnNameOrColumnSQLSelectSpecified;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string DataField;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int IndexColSQL;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string AliasTableName;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AliasTableNameSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string AliasColumnName;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AliasColumnNameSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Ressource;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RessourceSpecified;//PL 20120109 New

        /// <summary>
        /// Réprente le type de donnée
        /// </summary>
        /// FI 20171025 [23533] Modify (DataType est de type ReferentialsReferentialColumnDataType) 
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnDataType DataType;
        /// <summary>
        /// 
        /// </summary>
        /// FI 20190327 [24603] Add DataTypeSpecified (Dans la LSTCOLUMN.COLUMNXML le datatype pourrait ne pas être renseigné)
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DataTypeSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsDataXml;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TextMode;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Coding;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Align;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AlignSpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool LabelNoWrap;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LabelNoWrapSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string LabelWidth;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string InputWidth;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string InputHeight;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int GridWidth;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GridWidthSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("GroupBy", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnGroupBy GroupBy;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GroupBySpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Colspan;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ColspanSpecified;

        /// <summary>
        /// Obtient ou définit la taille de la donnée dans le Datagrid
        /// <para>Ne s'applique que au champs text et string</para>
        /// <para>si -1 la colonne est présente dans le select du datagrid mais elle est non chargée => la query fait un select 'text' as COLUMNNAME, cela permet d'améliorer sensiblement les perfs</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Length;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LengthSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int LengthInDataGrid;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LengthInDataGridSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool Nowrap;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NowrapSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Scale;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ScaleSpecified;

        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ColumnSqlWhereSpecified;
        [System.Xml.Serialization.XmlElementAttribute("SQLWhere", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ColumnSqlWhere;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsMandatory;
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsMandatorySpecified;

        /// <remarks/>
        // EG 20110104
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsEditableSpecified;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsEditable;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RegularExpression;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Default", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnDefault[] Default;

        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnResource IsResource;

        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsResourceSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsRTF;
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsRTFSpecified;
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsTRIM;
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsTRIMSpecified;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RowStyleSpecified;
        [System.Xml.Serialization.XmlElementAttribute("RowStyle", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnStyleBase RowStyle;
        //
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CellStyleSpecified;
        [System.Xml.Serialization.XmlElementAttribute("CellStyle", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnStyleBase CellStyle;

        // RD 20110704 [17501] / Suppression des deux colonnes LSTCOLUMN.ISSIDE et LSTCOLUMN.ISQUANTITY

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsHide;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsHideSpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsHideInDataGrid;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsHideInDataGridSpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsHideInCriteria;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsHideInCriteriaSpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsHideOnLightDisplay;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsHideOnLightDisplaySpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsKeyField;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsKeyFieldSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsDataKeyField;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsDataKeyFieldSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsForeignKeyField;

        // RD 20161121 [22619] Add IsExternalKeyField
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsExternalKeyFieldSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsExternalKeyField;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsForeignKeyFieldSpecified;

        [System.Xml.Serialization.XmlElementAttribute("IsIdentity", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnIsIdentity IsIdentity;
        //public bool IsIdentity;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsIdentitySpecified;

        [System.Xml.Serialization.XmlElementAttribute("IsUpdatable", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnIsUpdatable IsUpdatable;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsUpdatableSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsAutoPostBack;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsAutoPostBackSpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsVirtualColumn;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsVirtualColumnSpecified;

        [System.Xml.Serialization.XmlElementAttribute("IsOrderBy", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnIsOrderBy IsOrderBy;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsOrderBySpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnIsHyperLink IsHyperLink;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsHyperLinkSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ToolTip;
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ToolTipSpecified;

        [System.Xml.Serialization.XmlElementAttribute("Information", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialInformation Information;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InformationSpecified;

        [System.Xml.Serialization.XmlElementAttribute("Misc", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Misc;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MiscSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Help;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string ListRetrievalType;
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string ListRetrievalData;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsExternal;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsRole;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsItem;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string ExternalTableName;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string ExternalIdentifier;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public int ExternalFieldID;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string ColumnRef;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Relation", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnRelation[] Relation;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("html_BLOCK", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnhtml_BLOCK[] html_BLOCK;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("html_HR", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnhtml_HR[] html_HR;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("html_TITLE", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnhtml_TITLE[] html_TITLE;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("JavaScript", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnJavaScript JavaScript;

        [System.Xml.Serialization.XmlElementAttribute("ContainerOverflow", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialContainerOverflow ContainerOverflow;

        //Gestion des controles        

        //Label
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Web.UI.WebControls.WebControl controlLabel;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Web.UI.WebControls.WebControl ControlLabel
        {
            get
            {
                return controlLabel;
            }
            set
            {
                controlLabel = value;
                ControlLabelSpecified = true;
            }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ControlLabelSpecified;// = false;

        //Controle principal (html ou web)
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Web.UI.WebControls.WebControl controlMain;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Web.UI.WebControls.WebControl ControlMain
        {
            get
            {
                return controlMain;
            }
            set
            {
                controlMain = value;
                ControlMainSpecified = true;
            }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ControlMainSpecified; // = false;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Web.UI.HtmlControls.HtmlControl htmlControlMain;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Web.UI.HtmlControls.HtmlControl HtmlControlMain
        {
            get
            {
                return htmlControlMain;
            }
            set
            {
                htmlControlMain = value;
                HtmlControlMainSpecified = true;
            }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HtmlControlMainSpecified; // = false;

        //Autres controles associés (ex: calendar pour un champ date (le seul a l'h actuelle: 06/07/2004))
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Web.UI.WebControls.WebControl[] OtherControls;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Web.UI.WebControls.WebControl[] OtherGridControls;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Web.UI.WebControls.WebControl[] InformationControls;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasInformationControls;

        //Données diverses
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string Label
        {
            get
            {
                string ret = string.Empty;
                if (this.ExistsRelation)
                    ret = this.Relation[0].ColumnSelect[0].Ressource;
                else
                    ret = this.Ressource;

                ret = EFS.ACommon.Ressource.GetMulti(ret);
                return ret;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string MsgErrRequiredField;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string MsgErr;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsFirstControlLinked;// = false;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string FirstControlLinkedColumnName;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsMiddleControlLinked;// = false;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsLastControlLinked;// = false;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string IDForItemTemplate;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string IDForItemTemplateRelation;
        /// <summary>
        /// 
        /// </summary>
        /// FI 20210208 [XXXXX] Add
        [System.Xml.Serialization.XmlElementAttribute("AutoComplete", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialAutoComplete AutoComplete;
        #region DataTypeEnum
        public TypeData.TypeDataEnum DataTypeEnum
        {
            get
            {
                return TypeData.GetTypeDataEnum(DataType.value, true);
            }
        }
        #endregion DataTypeEnum
        #endregion Members
        #region Accessors
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsDDLType
        {
            get { return ((this.Relation != null) && (this.Relation[0].DDLType != null)) || (this.ListRetrievalData != null); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsRelation
        {
            get { return (this.Relation != null) && (this.Relation[0].TableName != null); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsRelationDDLType
        {
            get { return (this.Relation != null) && (this.Relation[0].DDLType != null); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsDefault
        {
            get { return (this.Default != null) && ((this.Default[0].Value != null) || (this.Default[0].ColumnName != null)); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsDefaultValue
        {
            get { return (this.Default != null) && (this.Default[0].Value != null); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsDefaultColumnName
        {
            get { return (this.Default != null) && (this.Default[0].ColumnName != null); }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsJavaScript
        {
            get { return (this.JavaScript != null) && (this.JavaScript.Script.Length > 0); }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsHelp
        {
            get { return (this.Help != null); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsHyperLinkDocument
        {
            get
            {
                return (this.IsHyperLinkSpecified) &&
                    (this.IsHyperLink.linktypeSpecified) &&
                    (this.IsHyperLink.linktype == "document");
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsHyperLinkExternal
        {
            get
            {
                return (this.IsHyperLinkSpecified) &&
                    (this.IsHyperLink.linktypeSpecified) &&
                    (this.IsHyperLink.linktype == "external");
            }
        }

        /// <summary>
        /// Obtient true si le link est spécifié via un nom de colonne
        /// <para>IsHyperLink.type contient la nom de colonne qui permet d'ouvrir un référentiel (Ex IDA, IDDC, IDM)</para>
        /// <para>IsHyperLink.name contient la colonne qui détient la valeur id associé</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExistsHyperLinkColumn
        {
            get
            {
                return (this.IsHyperLinkSpecified) &&
                    (this.IsHyperLink.linktypeSpecified) &&
                    (this.IsHyperLink.linktype == "column");
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsExternal2
        {
            get
            {
                return (("EXTLLINK" == this.ColumnName) || ("EXTLLINK2" == this.ColumnName) || this.IsExternal);
            }
        }
        /// <summary>
        /// Obtient true si IsExternal ou IsRole ou IsItem
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsAdditionalData
        {
            get
            {
                return (this.IsExternal || this.IsRole || this.IsItem);
            }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsNotVirtualColumn
        {
            get
            {
                return (false == IsVirtualColumnSpecified) || (false == IsVirtualColumn);
            }
        }

        #region AutoComplete
        /// <summary>
        /// Obtient true lorsque le contôle associé est autocomplete
        /// <para>Spheres® propose des valeurs en fonction de la description de la relation</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AutoCompleteRelationEnabled
        {
            get
            {
                return
                    // relation enabled
                    (this.Relation != null)
                    && (this.Relation[0].TableName != null)
                    // autocomplete enabled
                    && (this.Relation[0].AutoComplete != null)
                    && (this.Relation[0].AutoComplete.Enabled);
            }
        }

        /// <summary>
        /// Obtient true lorsque le contôle associé est autocomplete
        /// <para>Spheres® propose des valeurs déjà existantes pour la colonne</para>
        /// </summary>
        /// 20210208 [XXXXX] Add
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AutoCompleteEnabled
        {
            get
            {
                return (this.AutoComplete != null) && (this.AutoComplete.Enabled);
            }
        }


        #endregion AutoComplete

        #endregion Accessors
        #region Methods
        #region IsAliasEqualToMasterAliasTableName
        public bool IsAliasEqualToMasterAliasTableName(string pAliasMasterTableName)
        {
            return (AliasTableNameSpecified && (AliasTableName == pAliasMasterTableName));
        }
        #endregion IsAliasEqualToMasterAliasTableName
        #region GetStringDefaultValue
        public string GetStringDefaultValue(string pTableName)
        {
            string retValue = string.Empty;
            if (ExistsDefaultValue)
            {
                if (this.Default[0].Value.ToLower() == "{Previous}".ToLower())
                {
                    retValue = String.Empty;
                }
                else if (TypeData.IsTypeDateOrDateTime(DataType.value))
                {
                    retValue = new DtFunc().GetDateString(Default[0].Value);
                }

                else
                {
                    retValue = this.Default[0].Value;
                }
            }
            //CC 20110210 Ticket 17315
            else if (this.ColumnName == "ISENABLED" || this.ColumnName == "ISSECURITYSTATUS")
            {
                //20081013 PL Gestion dynamique via le web.config des defaults sur les colonnes ISENABLED
                retValue = ConfigurationManager.AppSettings["Spheres_ReferentialDefaultEnabled_" + pTableName];
            }
            //20081204 PL Add if()
            if (StrFunc.IsFilled(retValue) && (TypeData.IsTypeBool(this.DataType.value)))
                retValue = OTCmlHelper.GetADONetBoolValue(SessionTools.CS, retValue);
            //
            return retValue;
        }
        #endregion GetStringDefaultValue
        #region GetStringDefaultValue2
        /// <summary>
        /// EG 20121029 Fonction (de merde) appelée à l'initialisation d'un formulaire en modification 
        /// dans le mode consultationMode: PartialReadOnly
        /// </summary>
        /// <param name="pTableName"></param>
        /// <returns></returns>
        public string GetStringDefaultValue2(string pTableName)
        {
            string retValue = string.Empty;
            if (ExistsDefaultValue)
            {
                if (this.Default[0].Value.ToLower() == "{Previous}".ToLower())
                    retValue = String.Empty;
                else if (TypeData.IsTypeDate(DataType.value))
                    retValue = new DtFunc().GetDateString(Default[0].Value);
                else if (TypeData.IsTypeDateTime(DataType.value))
                    retValue = new DtFunc().GetDateTimeString(Default[0].Value, DtFunc.FmtDateLongTime);
                else
                    retValue = this.Default[0].Value;
            }
            if (StrFunc.IsFilled(retValue) && (TypeData.IsTypeBool(this.DataType.value)))
                retValue = OTCmlHelper.GetADONetBoolValue(SessionTools.CS, retValue);
            return retValue;
        }
        #endregion GetStringDefaultValue2
        #region GetStringExternalValue
        /// <summary>
        /// Format string data (ISO) To Thread Format  
        /// </summary>
        private string GetStringExternalValue(string pValue)
        {
            string data = pValue;
            //
            if (TypeData.IsTypeDateOrDateTime(DataType.value))
            {
                try
                {
                    DateTime dt;
                    if (TypeData.IsTypeDateTime(DataType.value))
                    {
                        dt = new DtFunc().StringDateTimeISOToDateTime(pValue);

                        //MF 20120601 Ticket 17856 Mail Information complémentaire : une date à null
                        if (dt <= DateTime.MinValue && this.IsAdditionalData)
                        {
                            data = String.Empty;
                        }
                        else
                        {
                            data = DtFunc.DateTimeToString(dt, DtFunc.FmtDateTime);
                        }
                    }
                    else if (TypeData.IsTypeDate(DataType.value))
                    {
                        //PL 20111227 Nouveau format de stockage: FmtISODate 
                        dt = new DtFunc().StringDateISOToDateTime(pValue);
                        //Pour compatibiliter ascendante 
                        if (dt == DateTime.MinValue)
                            dt = new DtFunc().StringyyyyMMddToDateTime(pValue);

                        //MF 20120601 Ticket 17856 Mail Information complémentaire : une date à null
                        if (dt <= DateTime.MinValue && this.IsAdditionalData)
                        {
                            data = String.Empty;
                        }
                        else
                        {
                            data = DtFunc.DateTimeToString(dt, DtFunc.FmtShortDate);
                        }
                    }


                }
                catch { data = string.Empty; }
            }
            return data;
        }
        #endregion GetStringExternalValue
        #region GetStringValue
        /// <summary>
        /// 
        /// </summary>
        /// <param name="pValue"></param>
        /// <param name="pRow"></param>
        /// <returns></returns>
        public string GetStringValue(object pValue, DataRow pRow)
        {
            string data = string.Empty;

            if (!(pValue is DBNull))
            {
                if (this.IsExternal2)
                {
                    data = this.GetStringExternalValue((String)pValue);
                }
                else
                {
                    /* FI 20200710 [XXXXX] use of  ReferentialTools.GetFormatedDateTime
                    if (TypeData.IsTypeDate(this.DataType.value) && pValue is DateTime)
                    {
                        data = DtFunc.DateTimeToString((DateTime)pValue, DtFunc.FmtShortDate);
                    }
                    else if (TypeData.IsTypeDateTime(this.DataType.value) && pValue is DateTime)
                    {
                        data = DtFunc.DateTimeToString((DateTime)pValue, DtFunc.FmtDateLongTime);
                    }
                    else if (TypeData.IsTypeTime(this.DataType.value) && pValue is DateTime)
                    {
                        data = DtFunc.DateTimeToString((DateTime)pValue, DtFunc.FmtISOShortTime);
                    }*/
                    if (TypeData.IsTypeDateTime(DataType.value) || TypeData.IsTypeDate(DataType.value) || TypeData.IsTypeTime(DataType.value))
                    {
                        data = ReferentialTools.GetFormatedDateTime(SessionTools.FmtDisplayCollection(), SessionTools.Collaborator, DataType, pValue, pRow);
                    }
                    else if (TypeData.IsTypeDec(this.DataType.value))
                    {
                        //+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
                        //PL 20190404 Test in progress... pour ne plus afficher les décimales non significatives sur les formulaires de saisie des prix (DSP/EDSP)
                        //+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
                        if (this.ColumnName.EndsWith("VALUE") && (this.Scale == 9))
                        {
                            data = Convert.ToDecimal(pValue).ToString("0.00#######");
                        }
                        else
                        {
                            //----------------------------------------------------------------------------------------------------
                            //PL 20190404 Le format "d" est réservé aux nombres entiers. Il n'est pas suporté par les décimaux !!!
                            //string decFormat = "d";
                            string decFormat = "f2";
                            //----------------------------------------------------------------------------------------------------
                            if (this.ScaleSpecified)
                                decFormat = "f" + this.Scale.ToString();
                            data = Convert.ToDecimal(pValue).ToString(decFormat);
                        }
                    }
                    // AL 20240703 [WI605] Datakind Seconds for integer type
                    else if (TypeData.IsTypeInt(this.DataType.value) && DataType.datakindSpecified && DataType.datakind == Cst.DataKind.Seconds) {                        
                        data = ReferentialTools.GetFormattedDuration(Convert.ToInt32(pValue));
                    }

                    else
                    {
                        data = pValue.ToString();
                    }
                }
            }
            return data;
        }
        #endregion GetStringValue
        /// <summary>
        /// Attribut sur un objet relation qui positionné à false
        /// indique de ne pas générer les instructions de jointure pour la colonne
        /// </summary>
        /// EG 20231114 [WI736] New (Amélioration requête d'affichage des Barèmes de frais)
        public bool IsApplyJoin
        {
            get { return ExistsRelation && (!Relation[0].applyJoinSpecified || Relation[0].applyJoin);}
        }
        #endregion Methods
    }

    #region class ReferentialsReferentialColumnhtml_BLOCK
    public class ReferentialsReferentialColumnhtml_BLOCK
    {
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string title;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string color;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string width;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int blockbyrow;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool blockbyrowSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int columnbyrow;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool columnbyrowSpecified;
        //2009109 PL
        [System.Xml.Serialization.XmlElementAttribute("Information", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialInformation Information;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InformationSpecified;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool backcolorheaderSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string backcolorheader;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool backcolorSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string backcolor;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool bordercolorSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string bordercolor;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cssheadertagSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cssheadertag;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startdisplaySpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string startdisplay;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool reverseSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool reverse;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool squareSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool square;
    }
    #endregion class ReferentialsReferentialColumnhtml_BLOCK
    #region class ReferentialsReferentialColumnhtml_TITLE
    public class ReferentialsReferentialColumnhtml_TITLE
    {
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string title;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string color;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string width;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int blockbyrow;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool blockbyrowSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int columnbyrow;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool columnbyrowSpecified;
    }

    #endregion class ReferentialsReferentialColumnhtml_TITLE
    #region class ReferentialsReferentialColumnJavaScript
    public class ReferentialsReferentialColumnJavaScript
    {
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Script", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public JavaScript.JavaScriptScript[] Script;
    }

    #endregion class ReferentialsReferentialColumnJavaScript
    // EG 20210304 [XXXXX] Relooking Referentiels
    // EG 20210304 [XXXXX] Relooking Referentiels - Ajout Ressource
    public class ReferentialsReferentialContainerOverflow
    {
        [System.Xml.Serialization.XmlTextAttribute()]
        public bool Value;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string startheight;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startheightSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ressource;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ressourceSpecified;

    }
    #region class ReferentialsReferentialColumnhtml_HR
    public class ReferentialsReferentialColumnhtml_HR
    {
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string title;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int titlemargin;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string titlepuce;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string color;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string size;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int columnbyrow;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool columnbyrowSpecified;
    }
    #endregion class ReferentialsReferentialColumnhtml_HR
    #region class ReferentialsReferentialColumnIsOrderBy
    public class ReferentialsReferentialColumnIsOrderBy
    {
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string order;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool orderSpecified;
    }
    #endregion 
    #region class ReferentialsReferentialColumnIsIdentity
    public class ReferentialsReferentialColumnIsIdentity
    {
        [System.Xml.Serialization.XmlTextAttribute()]
        public bool Value;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string source;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sourceSpecified;
    }
    #endregion 
    #region class ReferentialsReferentialColumnIsUpdatable
    public class ReferentialsReferentialColumnIsUpdatable
    {
        [System.Xml.Serialization.XmlTextAttribute()]
        public bool Value;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool isupdatableincreation;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isupdatableincreationSpecified;
    }
    #endregion class ReferentialsReferentialColumnIsUpdatable

    /// <summary>
    /// Représente un link 
    /// <para>Le link ouvre un référentiel ou un document (exemple un pdf)</para>
    /// </summary>
    // EG 20210412 [XXXXX] Step1 : Utilisation Hyperlink pour Autocomplete(nouveaux attributs)
    public class ReferentialsReferentialColumnIsHyperLink
    {
        /// <summary>
        /// True pour activer l'hyperlink sur la colonne
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public bool Value;

        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool linktypeSpecified;
        /// <summary>
        /// Type de Link 
        /// <para>Les valeurs possibles sont "document" ou "column" ou "external"</para>
        /// <para>document: pour l'ouverture d'un document</para>
        /// <para>column:   pour l'ouverture d'un référentiel</para>
        /// <para>external: pour l'ouverture d'un document externe à Spheres</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string linktype;

        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dataSpecified;
        /// <summary>
        /// <para>
        /// Lorsque link de de type "document", représente la colonne qui contient le document
        /// </para>
        /// <para>
        /// Lorsque link est de type "column", représente la colonne qui contient la valeur PK utilisée pour ouvrir le référentiel
        /// </para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string data;

        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified;
        /// <summary>
        /// <para>
        /// Lorsque link est de type "document", représente le type de document (exemple application/pdf)
        /// </para>
        /// <para>
        /// Lorsque link est de type "column", représente un nom de colonne caractéristique d'un référentiel (exemple IDA pour le référentiel ACTEUR)
        /// </para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nameSpecified;
        /// <summary>
        /// <para>
        /// Lorsque link est de type "document", représente le nom final du fichier
        /// </para>
        /// <para>
        /// Lorsque link est de type "column", représente le nom de la colonne select utilisé par l'autocomplete
        /// </para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool linktableSpecified;
        /// <summary>
        /// <para>
        /// Lorsque link est de type "document", représente la table qui contient le document
        /// </para>
        /// <para>
        /// Lorsque link de de type "column", représente le nom de fichier xml utilisé pour l'autocomplete
        /// </para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string linktable;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool conditionSpecified;
        /// <summary>
        /// Lorsque link de de type "column", représente la condition d'application utilisée pour l'autocomplete
        /// voir par exemple les conditions d'application dans ACTOR.xml
        /// </para>
        /// </summary>
        // EG 20210412 [XXXXX] Step1 : Utilisation Hyperlink pour Autocomplete(nouveaux attributs)
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string condition;

        /// <summary>
        /// Usage de l'hyperlink pour l'autocomplete 
        /// Utilisé pour ne pas faire l'usage d'un hyperlink pour l'autocomplete
        /// - Exemple Echéance sur Actif
        /// </summary>
        // EG 20210412 [XXXXX] Step1 : Utilisation Hyperlink pour Autocomplete(nouveaux attributs)
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool autocompleteSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool autocomplete;

        /// <summary>
        /// Pas d'automplete sur l'hyperlink
        /// </summary>
        // EG 20210412 [XXXXX] Step1 : Utilisation Hyperlink pour Autocomplete(nouveaux attributs)
        [System.Xml.Serialization.XmlIgnoreAttribute()]        
        public bool IsAutocompleteAuthorized
        {
            get { return (false == autocompleteSpecified) || autocomplete;}
        }
    }

    public class ReferentialsReferentialLogo
    {
        [System.Xml.Serialization.XmlTextAttribute()]
        public bool Value;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValueSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string columnname;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool columnnameSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string image;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool imageSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tooltip;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool tooltipSpecified;
    }

    #region class ReferentialsReferentialColumnDefault
    public class ReferentialsReferentialColumnDefault
    {
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Value;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ColumnName;
    }

    #endregion class ReferentialsReferentialColumnDefault

    #region class ReferentialsReferentialColumnGroupBy
    public class ReferentialsReferentialColumnGroupBy
    {
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Aggregate;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AggregateSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SqlGroupBy;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SqlGroupBySpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Cst.GroupingSet GroupingSet;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool IsGroupBy;
    }

    #endregion class ReferentialsReferentialColumnGroupBy

    #region class ReferentialInformation
    public class ReferentialInformationToolTipMessage
    {
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string title;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool titleSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cssToolTip;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cssToolTipSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string width;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool widthSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string height;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool heightSpecified;
    }
    public class ReferentialInformationURL
    {
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string @enum;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool @enumSpecified;
    }
    #endregion class ReferentialInformation
    #region class ReferentialsReferentialColumnRelation
    public class ReferentialsReferentialColumnRelation
    {
        // EG 20231114 [WI736] New
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool applyJoin;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool applyJoinSpecified;

        //20090625 PL Add iscolor
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool iscolor;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool iscolorSpecified;

        [System.Xml.Serialization.XmlElementAttribute("DDLType", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnRelationDDLType DDLType;

        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string RelationColumnSQLName
        {
            get
            {
                string ret = string.Empty;
                if (ArrFunc.IsFilled(ColumnSelect))
                {
                    if (-1 == ColumnSelect[0].ColumnName.IndexOf("."))
                        ret = AliasTableName + "_" + ColumnSelect[0].ColumnName;
                    else
                        ret = ColumnSelect[0].ColumnName;
                }
                // FI 20240130 [WI832] This property is always used using a .ToUpper(). So the ToUpper() method is removed
                //return ret.ToUpper();
                return ret;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ListType;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ListTypeSpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TableName;
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TableNameForDDL;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TableNameForDDLSpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string AliasTableName;

        [System.Xml.Serialization.XmlElementAttribute("ColumnRelation", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnRelationColumnRelation[] ColumnRelation;

        [System.Xml.Serialization.XmlElementAttribute("ColumnSelect", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnRelationColumnSelect[] ColumnSelect;

        [System.Xml.Serialization.XmlElementAttribute("ColumnLabel", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnRelationColumnLabel[] ColumnLabel;

        [System.Xml.Serialization.XmlElementAttribute("Condition", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnRelationCondition[] Condition;

        [System.Xml.Serialization.XmlElementAttribute("AutoComplete", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialAutoComplete AutoComplete;

        //[System.Xml.Serialization.XmlIgnoreAttribute()]
        //public bool ExistsCondition
        //{
        //    get { return (ArrFunc.IsFilled(Condition)) && (Condition[0].TableName != null); }
        //}
    }
    #endregion class ReferentialsReferentialColumnRelation

    #region public class ReferentialAutoComplete
    public class ReferentialAutoComplete
    {
        /// <summary>
        /// Get and set the activation state of the autocomplete engine
        /// </summary>
        [System.Xml.Serialization.XmlAttribute("enabled")]
        public bool Enabled
        {
            get;
            set;
        }

        public ReferentialAutoComplete()
        {
            Enabled = true;
        }
    }
    #endregion ReferentialAutoComplete

    #region class ReferentialsReferentialColumnRelationDDLType
    public class ReferentialsReferentialColumnRelationDDLType
    {
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string misc;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool miscSpecified;
    }
    #endregion class ReferentialsReferentialColumnRelationDDLType
    #region class ReferentialsReferentialColumnRelationColumnRelation
    public class ReferentialsReferentialColumnRelationColumnRelation
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ColumnName;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DataType;
    }

    #endregion class ReferentialsReferentialColumnRelationColumnRelation
    #region class ReferentialsReferentialColumnRelationColumnLabel
    public class ReferentialsReferentialColumnRelationColumnLabel
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ColumnName;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Ressource;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DataType;
    }

    #endregion class ReferentialsReferentialColumnRelationColumnLabel
    #region class ReferentialsReferentialColumnRelationColumnSelect
    public class ReferentialsReferentialColumnRelationColumnSelect
    {
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ColumnName;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Ressource;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DataType;
    }

    #endregion class ReferentialsReferentialColumnRelationColumnSelect
    #region class ReferentialsReferentialColumnRelationCondition
    public class ReferentialsReferentialColumnRelationCondition
    {
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string apply; //PL 20190513 - Allowed values: ALL | GRID
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool applySpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TableName;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string AliasTableName;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AliasTableNameSpecified;

        [System.Xml.Serialization.XmlElementAttribute("ColumnRelation", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnRelationColumnRelation[] ColumnRelation;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SQLWhere;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SQLWhereSpecified;

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ColumnName;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ColumnNameSpecified;
    }
    #endregion class ReferentialsReferentialColumnRelationCondition
    #region class ReferentialsReferentialColumnStyleBase
    public class ReferentialsReferentialColumnStyleBase
    {
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string type;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool modelSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string model;
        // EG 20160224 New Gestion du rendu d'une cellule sur la base d'une class CSS complexe (Gestion du REQUESTTYPE)
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool complexModelSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string complexModel;
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool versionSpecified;
        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string version;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WhenSpecified;
        [System.Xml.Serialization.XmlElementAttribute("When", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnStyleWhen[] When;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherwiseSpecified;
        [System.Xml.Serialization.XmlElementAttribute("Otherwise", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReferentialsReferentialColumnStyleOtherwise Otherwise;
    }
    #endregion class ReferentialsReferentialColumnStyleBase
    #region class ReferentialsReferentialColumnStyleWhen
    public class ReferentialsReferentialColumnStyleWhen
    {
        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string test;
        //
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    #endregion class ReferentialsReferentialColumnStyleWhen
    #region class ReferentialsReferentialColumnStyleOtherwise
    public class ReferentialsReferentialColumnStyleOtherwise
    {
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    #endregion class ReferentialsReferentialColumnStyleOtherwise
    #region class ReferentialsReferentialColumnRowStyle
    public class ReferentialsReferentialColumnRowStyle : ReferentialsReferentialColumnStyleBase
    {
    }
    #endregion class ReferentialsReferentialColumnRowStyle
    #region class ReferentialsReferentialColumnCellStyle
    public class ReferentialsReferentialColumnCellStyle : ReferentialsReferentialColumnStyleBase
    {
    }
    #endregion class ReferentialsReferentialColumnCellStyle

    /// <summary>
    /// Représente les propriétés d'une colonne vis à vis des resources
    /// </summary>
    public class ReferentialsReferentialColumnResource
    {
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool prefixSpecified;
        /// <summary>
        /// Obtient ou définit un prefix qui sert à obtenir le nom de la ressource
        /// <para>Lorsque prefix est renseigné Spheres® recherche la resource qui commence par {prefix}</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttribute("prefix", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string prefix;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sqltableSpecified;
        /// <summary>
        /// Obtient ou définit le nom d'une table SQL qui sert à obtenir le nom de la ressource
        /// <para>Lorsque sqltable est renseigné Spheres® recherche la resource dans cette table (ex. SYSTEMMSG)</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttribute("sqltable", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string sqltable;

        /// <summary>
        /// Obtient ou définit un drapeau qui indique si l'affichage de la donnée doit s'appuyer sur les resources
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public bool IsResource;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isCriteriaDisplaySpecified;
        /// <summary>
        /// Obtient ou définit un drapeau qui indique si la valeur d'un critère sur cette donnée doit être remplacée par une resource
        /// </summary>
        [System.Xml.Serialization.XmlAttribute("criteriadisplay", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool isCriteriaDisplay;

        /// <summary>
        /// 
        /// </summary>
        public ReferentialsReferentialColumnResource()
        {
            IsResource = false;
            isCriteriaDisplay = false;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pValue"></param>
        public ReferentialsReferentialColumnResource(bool pValue)
        {
            IsResource = pValue;
            isCriteriaDisplay = true;
        }
    }

    #region class ReferentialsReferentialXSLFileName
    public class ReferentialsReferentialXSLFileName
    {
        /// <summary>
        /// Full pathname of XSL file 
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;

        /// <summary>
        /// Title for item menu
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string title;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool titleSpecified;
        /// <summary>
        /// Tooltip for item menu
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tooltip;
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool tooltipSpecified;
    }
    #endregion class ReferentialsReferentialXSLFileName

    ///// <summary>
    ///// Caractéristiques des colonnes utilisées pour alimenter la trace des données financières
    ///// </summary>
    ///// FI 20140519 [19923] add class
    //public class ReferentialsReferentialColumnIsTrack
    //{
    //    /// <summary>
    //    /// 
    //    /// </summary>
    //    [System.Xml.Serialization.XmlIgnoreAttribute()]
    //    public bool typeSpecified;
    //    /// <summary>
    //    /// Type de Track
    //    /// <para>Valeurs possible</para>
    //    /// <para>- ACTOR</para>
    //    /// <para>- BOOK</para>
    //    /// </summary>
    //    [System.Xml.Serialization.XmlAttributeAttribute(AttributeName="type")]
    //    public string type;

    //}


    /// <summary>
    /// Permet de piloter la journalisation des actions utilisateurs
    /// </summary>
    /// FI 20140519 [19923] add Class
    public class ReferentialsReferentialRequestTrack
    {
        /// <summary>
        /// description des data insérées dans le log 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("RequestTrackData")]
        public ReferentialsReferentialRequestTrackData[] RequestTrackData;
    }


    /// <summary>
    /// Pilote l'alimentation des data dans le journal des actions utilisateurs 
    /// </summary>
    public class ReferentialsReferentialRequestTrackData
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Boolean columnIdASpecified;

        /// <summary>
        /// Colonne des acteurs 
        /// </summary>
        [System.Xml.Serialization.XmlElement("ColumnIdA")]
        public ReferentialsReferentialRequestTrackDataColumn columnIdA;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Boolean columnIdBSpecified;
        /// <summary>
        /// Colonne des books
        /// </summary>
        [System.Xml.Serialization.XmlElement("ColumnIdB")]
        public ReferentialsReferentialRequestTrackDataColumn columnIdB;

        /// <summary>
        /// Colonne des regroupements
        /// </summary>
        [System.Xml.Serialization.XmlElement("ColumnGrp")]
        public ReferentialsReferentialRequestTrackDataColumn columnGrp;
    }

    /// <summary>
    /// 
    /// </summary>
    public class ReferentialsReferentialRequestTrackDataColumn
    {
        /// <summary>
        /// alias de la colonne 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("alias")]
        public string alias;
        /// <summary>
        /// Expression SQL de la colonne 
        /// </summary>
        [System.Xml.Serialization.XmlText()]
        public string sqlCol;

    }

    /// <summary>
    /// Repésente le type de la donnée
    /// </summary>
    /// FI 20171025 [23533] Add 
    public class ReferentialsReferentialColumnDataType
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool tzdbidSpecified;
        /// <summary>
        /// Donne le timeZone associé à un horodatage
        /// <para>S'aplique uniquement aux données date, datetime, time lorsque la colonne Spheres® représente un horodatage (DTINS, DTUPD,DTEXECUTION etc...)</para>
        /// <para>Iana timezone expected</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("tzdbid")]
        public string tzdbid;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool displaySpecified;
        /// <summary>
        /// Indique les instructions d'affichage d'un horodatage
        /// <para>S'aplique uniquement aux données date, datetime, time lorsque la colonne Spheres® représente un horodatage (DTINS, DTUPD,DTEXECUTION etc...)</para>
        /// <para>L'affichage est fonction du paramétrage dans profil</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("display")]
        public Cst.DataTypeDisplayMode display;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool datakindSpecified;
        /// <summary>
        /// Donne des informations supplémentaires sur le contenu de la colonne
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("datakind")]
        public Cst.DataKind datakind;

        /// <summary>
        /// Représente le type de la donnée (voir TypeData.TypeDataEnum )
        /// </summary>
        [System.Xml.Serialization.XmlText()]
        public string value;

        /// <summary>
        /// 
        /// </summary>
        public ReferentialsReferentialColumnDataType()
        {
        }

    }

    /// <summary>
    /// Repésente StringDynamicData et sa source 
    /// </summary>
    /// FI 20200205 [XXXXX] Add method
    public class ReferentialsReferentialStringDynamicData : StringDynamicData
    {
        /// <summary>
        /// Repésente la source (GUI, URL, RUNTIME) 
        /// <para>Plusieurs source possibles (consultation des positions détaillées depuis la consultation des positions synthétiques) </para>
        /// </summary>
        [System.Xml.Serialization.XmlAttribute()]
        public DynamicDataSourceEnum source;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pDataType"></param>
        /// <param name="pName"></param>
        /// <param name="pValue"></param>
        public ReferentialsReferentialStringDynamicData(string pDataType, string pName, string pValue) :
            base(pDataType, pName, pValue)
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public ReferentialsReferentialStringDynamicData() :
            base()
        {
        }
    }
    /// <summary>
    /// 
    /// </summary>
    /// FI 20210218 [XXXXX] 
    public class ReferentialsReferentialJQuery
    {
        /// <summary>
        /// function JQuery exécutée lorsque a page est chargée 
        /// </summary>
        [System.Xml.Serialization.XmlAttribute()]
        public string function;

    }
}